<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[提升网站性能的方法总结]]></title>
      <url>/2017/01/18/%E6%8F%90%E5%8D%87%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E7%9A%84%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>《高性能网站建设》这本书中提到一个网站建设的黄金法则：”只有10%~20%的响应时间花在了下载HTML文档上，其余的80%~90%时间花在了下载页面的所有组件上”。所以，网站性能优化的中点在于如何削减这80%~90%的时间。</p>
<a id="more"></a>
<h4 id="优化1：（后端）启用GZIP压缩"><a href="/2017/01/18/提升网站性能的方法总结/#优化1：（后端）启用GZIP压缩" class="headerlink" title="优化1：（后端）启用GZIP压缩"></a>优化1：（后端）启用GZIP压缩</h4><p>GZIP压缩可以比较大程度上减少网络的流量传输。其原理算是比较简单和直接，就是对返回的内容进行压缩。在HTTP中，只需要在Response中的Header里加入<code>Content-Type=Gzip</code>即可。一般对于页面、css、js等文件起到压缩作用，从而减少浏览器的下载时间，加速网站性能和提升用户体验。</p>
<h4 id="优化2：（后端）启用ETag"><a href="/2017/01/18/提升网站性能的方法总结/#优化2：（后端）启用ETag" class="headerlink" title="优化2：（后端）启用ETag"></a>优化2：（后端）启用ETag</h4><p>ETag是用来验证缓存的有效性的。ETag有自己特定的格式，这里不详细介绍。通过ETag，可以验证每次请求的资源是否发生过变化，如果没有变化，则服务端返回304，从而避免重复下载相同的资源。但是，对于分布式的后端集群，比如通过反向代理实现的大规模集群中，如果使用ETag则会打打损耗性能。因为需要对比多台服务器上的ETag值。一般情况下，默认携带ETag信息，可以禁用。</p>
<h4 id="优化3：（架构）减少HTTP请求"><a href="/2017/01/18/提升网站性能的方法总结/#优化3：（架构）减少HTTP请求" class="headerlink" title="优化3：（架构）减少HTTP请求"></a>优化3：（架构）减少HTTP请求</h4><p>每一个HTTP请求在服务器中一般都表现为一个线程，在并发环境下，大量线程会驻留在服务器的请求队列中，同时，不同的服务器也会创建不同数量的最大线程去维护和处理并发的请求。而没创建一个线程，都需要耗费资源和时间去维护。所以应当减少一个页面对应的HTTP请求数量。一般可以使用预加载或者延迟加载来减少同一时刻下（宏观上）的并发请求，减少请求队列的长度，从而缩短请求的响应时间。</p>
<h4 id="优化4：（架构）使用CDN加速"><a href="/2017/01/18/提升网站性能的方法总结/#优化4：（架构）使用CDN加速" class="headerlink" title="优化4：（架构）使用CDN加速"></a>优化4：（架构）使用CDN加速</h4><p>CDN加速主要是因为减少了DNS的寻找时间和网络之间通讯的跳数，从而减少连接到服务器和从服务器返回到客户端的时间。</p>
<h4 id="优化5：（前端）启用Expires"><a href="/2017/01/18/提升网站性能的方法总结/#优化5：（前端）启用Expires" class="headerlink" title="优化5：（前端）启用Expires"></a>优化5：（前端）启用Expires</h4><p>原理比较简单，通过设置Headers中的Expires属性的值，来表明该内容是否具有缓存，是否具有有效缓存。但是缓存也不能滥用，一般对高访问低修改的数据使用缓存。</p>
<h4 id="优化6：（前端）将CSS引用放在页面顶部"><a href="/2017/01/18/提升网站性能的方法总结/#优化6：（前端）将CSS引用放在页面顶部" class="headerlink" title="优化6：（前端）将CSS引用放在页面顶部"></a>优化6：（前端）将CSS引用放在页面顶部</h4><p>原理很简单，HTML的渲染是从头到尾的渲染模式，将CSS放在顶部，可以在加载页面内容的同时渲染其样式，否则，在浏览器渲染过程中，加载完页面到渲染样式完毕的时间间隔内可能会出现白屏的现象。</p>
<h4 id="优化7：（前端）将js引用放在底部"><a href="/2017/01/18/提升网站性能的方法总结/#优化7：（前端）将js引用放在底部" class="headerlink" title="优化7：（前端）将js引用放在底部"></a>优化7：（前端）将js引用放在底部</h4><p>这个和上面的一个是一致的，本质上是由于浏览器页面渲染是从上往下进行渲染的。对于JS，一般来说执行时会引起线程阻塞，如果放在顶部，页面还没加载，就在执行对应的JS代码，会导致页面卡顿的现象。</p>
<h4 id="优化8：（前端）避免使用CSS表达式"><a href="/2017/01/18/提升网站性能的方法总结/#优化8：（前端）避免使用CSS表达式" class="headerlink" title="优化8：（前端）避免使用CSS表达式"></a>优化8：（前端）避免使用CSS表达式</h4><p>CSS表达式会进行频繁的求值，导致了性能低下。</p>
<h4 id="优化9：（前端）引用外部CSS和JS文件"><a href="/2017/01/18/提升网站性能的方法总结/#优化9：（前端）引用外部CSS和JS文件" class="headerlink" title="优化9：（前端）引用外部CSS和JS文件"></a>优化9：（前端）引用外部CSS和JS文件</h4><p>是否引用外部CSS和JS文件的区别在于，引用了外部文件后可能会被浏览器缓存，从而加快速度。</p>
<h4 id="优化10：（网络）减少DNS查找"><a href="/2017/01/18/提升网站性能的方法总结/#优化10：（网络）减少DNS查找" class="headerlink" title="优化10：（网络）减少DNS查找"></a>优化10：（网络）减少DNS查找</h4><p>善用DNS缓存，减少DNS查找时间。</p>
<h4 id="优化11：（前端）精简Javascript代码"><a href="/2017/01/18/提升网站性能的方法总结/#优化11：（前端）精简Javascript代码" class="headerlink" title="优化11：（前端）精简Javascript代码"></a>优化11：（前端）精简Javascript代码</h4><p>一般表现为移除不必要的空格，压缩文件的大小，比如常见的jquery.min.js。</p>
<h4 id="优化12：（前端）删除重复的引用"><a href="/2017/01/18/提升网站性能的方法总结/#优化12：（前端）删除重复的引用" class="headerlink" title="优化12：（前端）删除重复的引用"></a>优化12：（前端）删除重复的引用</h4><p>重复引用相同的JS文件，会导致浏览器额外下载重复的内容，延长加载的时间。同时可能应为相同的JS中存在相互冲突。</p>
<h4 id="优化13：（前端）避免重定向"><a href="/2017/01/18/提升网站性能的方法总结/#优化13：（前端）避免重定向" class="headerlink" title="优化13：（前端）避免重定向"></a>优化13：（前端）避免重定向</h4><p>重定向的耗时是因为，一次重定向需要向服务端发送两次请求，第一次将原始URL发送给服务端，服务端解析后返回重定向指令（HTTP 302），客户端接收到该指令后，重新向服务端发送需要重定向的地址，最后服务端返回重定向后的页面。所以重定向耗费的资源和时间是比较大的。</p>
<h4 id="优化14：（前端）缓存AJAX请求"><a href="/2017/01/18/提升网站性能的方法总结/#优化14：（前端）缓存AJAX请求" class="headerlink" title="优化14：（前端）缓存AJAX请求"></a>优化14：（前端）缓存AJAX请求</h4><p>本质上属于缓存的内容。即设置Expires信息。</p>
<h4 id="优化15：（前端）延迟加载"><a href="/2017/01/18/提升网站性能的方法总结/#优化15：（前端）延迟加载" class="headerlink" title="优化15：（前端）延迟加载"></a>优化15：（前端）延迟加载</h4><p>对于图片等，可以等页面渲染完后再慢慢渲染，没有必要一次性将庞大的图片资源渲染到页面中。</p>
<h4 id="优化16：（前端）预加载"><a href="/2017/01/18/提升网站性能的方法总结/#优化16：（前端）预加载" class="headerlink" title="优化16：（前端）预加载"></a>优化16：（前端）预加载</h4><p>和延迟加载相反，在页面使用前预先加载好，使其看起来响应速度更快，页面更流畅。</p>
<h4 id="优化17：（前端）减少DOM数量"><a href="/2017/01/18/提升网站性能的方法总结/#优化17：（前端）减少DOM数量" class="headerlink" title="优化17：（前端）减少DOM数量"></a>优化17：（前端）减少DOM数量</h4><p>主要HTML优化结构，加快渲染速度。</p>
<h4 id="优化18：（前端）不在HTML页面中进行图片缩放"><a href="/2017/01/18/提升网站性能的方法总结/#优化18：（前端）不在HTML页面中进行图片缩放" class="headerlink" title="优化18：（前端）不在HTML页面中进行图片缩放"></a>优化18：（前端）不在HTML页面中进行图片缩放</h4><p>不建议在html中设置长宽而使用比实际需要大的图片。比如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">src</span>=<span class="string">"demo.jpg"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="优化19：（前端）favicon要小且可缓存"><a href="/2017/01/18/提升网站性能的方法总结/#优化19：（前端）favicon要小且可缓存" class="headerlink" title="优化19：（前端）favicon要小且可缓存"></a>优化19：（前端）favicon要小且可缓存</h4><p>favicon.ico是web项目中根目录下的一个必要存在的网站图标文件。浏览器每次都会请求这一个favicon图标。并且每次都会携带相应的cookie信息。所以最好是将其缓存下来。</p>
<h4 id="优化20：（前端）保持单个文件小于25K"><a href="/2017/01/18/提升网站性能的方法总结/#优化20：（前端）保持单个文件小于25K" class="headerlink" title="优化20：（前端）保持单个文件小于25K"></a>优化20：（前端）保持单个文件小于25K</h4><p>这个主要是因为对于IOS是无法缓存超过25KB的文件的，所以需要注意文件的大小。</p>
<p><strong>以上总结来自《高性能网站建设》和Yahoo</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[UNIX编程艺术之系统优化]]></title>
      <url>/2017/01/11/UNIX%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%E4%B9%8B%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>在阅读《Unix编程艺术》这本书时，看到有句话是这么说的:”Premature optimization is the root of all evil.”,文艺地翻译过来就是说，过早的优化简直就是万恶之源。本篇文章总结了下关于项目优化的一些清单。</p>
<a id="more"></a>
<ul>
<li>[x] 程序员工具箱中最强大的优化技术就是不做优化。</li>
<li>[x] 如果有证据证明程序运行缓慢，此时才可以考虑优化。</li>
<li>[x] 代码优化之前需要先考虑代码，应先估量，再实施。</li>
<li>[x] 最有效的优化方法就是保持代码的短小简单。</li>
<li>[x] 缓存操作结果。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[试试Redis之安装服务]]></title>
      <url>/2017/01/11/%E8%AF%95%E8%AF%95Redis%E4%B9%8B%E5%AE%89%E8%A3%85%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>如果是通过MSI安装包安装的Redis，那么Redis会自动安装一个Windows服务，也就是说不需要再进行额外的安装工作了。如果不是，或者想要修改配置，可以使用redis.windows-service.conf文件进行修改。</p>
<a id="more"></a>
<h3 id="安装Redis服务"><a href="/2017/01/11/试试Redis之安装服务/#安装Redis服务" class="headerlink" title="安装Redis服务"></a>安装Redis服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server --service-install redis.windows.conf --loglever verbos</div></pre></td></tr></table></figure>
<h3 id="卸载服务"><a href="/2017/01/11/试试Redis之安装服务/#卸载服务" class="headerlink" title="卸载服务"></a>卸载服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server --service-uninstall</div></pre></td></tr></table></figure>
<h3 id="启动服务"><a href="/2017/01/11/试试Redis之安装服务/#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server --service-start</div></pre></td></tr></table></figure>
<h3 id="停止服务"><a href="/2017/01/11/试试Redis之安装服务/#停止服务" class="headerlink" title="停止服务"></a>停止服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server --service-stop</div></pre></td></tr></table></figure>
<h3 id="命名服务"><a href="/2017/01/11/试试Redis之安装服务/#命名服务" class="headerlink" title="命名服务"></a>命名服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server --service-name newname</div></pre></td></tr></table></figure>
<h3 id="指定其他属性创建服务"><a href="/2017/01/11/试试Redis之安装服务/#指定其他属性创建服务" class="headerlink" title="指定其他属性创建服务"></a>指定其他属性创建服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server --service-install --service-name redis1 --port 12345</div></pre></td></tr></table></figure>
<h3 id="启动和关闭指定的服务"><a href="/2017/01/11/试试Redis之安装服务/#启动和关闭指定的服务" class="headerlink" title="启动和关闭指定的服务"></a>启动和关闭指定的服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">redis-server --service-start --service-name yourname</div><div class="line">redis-server --service-start --port yourport</div><div class="line">redis-server --service-stop --service-name yourname</div><div class="line">redis-server --service-stop --port yourport</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[玩转MongoDB之性能调优]]></title>
      <url>/2017/01/09/%E7%8E%A9%E8%BD%ACMongoDB%E4%B9%8B%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
      <content type="html"><![CDATA[<p>MongoDB由于是将数据加载到内存后进行操作，所以其速度与并发速度相对于传统的磁盘数据库有巨大的飞跃，但是，并不是所有的场景都适合适用MongoDB数据库来存储。比如，由于MongoDB的事务性很弱，或者说基本没有，所以不适合将MongoDB用于高度事务性质的项目中（当然可以程序控制逻辑事务）。MongoDB对于实时的增删改查操作友好，可以进行分布式的集群、动态的增删节点（网上参考，笔者未实践过）。<br><a id="more"></a></p>
<h4 id="数据准备"><a href="/2017/01/09/玩转MongoDB之性能调优/#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><p>每次10万条数据，每次递增10万插入新数据，测试每次数据量下的操作速度，插入脚本如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> count=<span class="number">7500000</span>;count&lt;<span class="number">10000000</span>;count++)&#123;</div><div class="line">   <span class="keyword">var</span> tmp = count%<span class="number">2</span>==<span class="number">0</span>?count:(<span class="number">0</span>-count);</div><div class="line">   <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">   <span class="keyword">var</span> demo = &#123;</div><div class="line">      <span class="string">"a"</span>:<span class="string">"a is a string"</span>,</div><div class="line">      <span class="string">"b"</span>:<span class="string">"123"</span>,</div><div class="line">      <span class="string">"c"</span>: count+<span class="number">1</span>,</div><div class="line">      <span class="string">"d"</span>: &#123;</div><div class="line">         <span class="string">"d1"</span>:<span class="string">"d1 is a string"</span>,</div><div class="line">         <span class="string">"d2"</span>:<span class="string">"123"</span>,</div><div class="line">         <span class="string">"d3"</span>: tmp,</div><div class="line">         <span class="string">"d7"</span>: tmp,</div><div class="line">         <span class="string">"d4"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>],</div><div class="line">         <span class="string">"d5"</span>:[<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span>]         </div><div class="line">      &#125;,</div><div class="line">      <span class="string">"d6"</span>: date</div><div class="line">   &#125;;</div><div class="line">   db.TestIndexes.insert(demo);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数据结构如下所示：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"_id"</span> : ObjectId(<span class="string">"587330f80f5dc508c0b0be13"</span>),</div><div class="line">    <span class="attr">"a"</span> : <span class="string">"a is a string"</span>,</div><div class="line">    <span class="attr">"b"</span> : <span class="string">"123"</span>,</div><div class="line">    <span class="attr">"c"</span> : <span class="number">5.0</span>,</div><div class="line">    <span class="attr">"d"</span> : &#123;</div><div class="line">        <span class="attr">"d1"</span> : <span class="string">"d1 is a string"</span>,</div><div class="line">        <span class="attr">"d2"</span> : <span class="string">"123"</span>,</div><div class="line">        <span class="attr">"d3"</span> : <span class="number">5.0</span>,</div><div class="line">        <span class="attr">"d4"</span> : [ </div><div class="line">            <span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>,<span class="number">5.0</span>,<span class="number">6.0</span>,<span class="number">7.0</span>,<span class="number">8.0</span>,<span class="number">9.0</span>,<span class="number">10.0</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"d5"</span> : [ <span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>,<span class="string">"6"</span>,<span class="string">"7"</span>,<span class="string">"8"</span>,<span class="string">"9"</span>,<span class="string">"10"</span></div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="查询实验"><a href="/2017/01/09/玩转MongoDB之性能调优/#查询实验" class="headerlink" title="查询实验"></a>查询实验</h4><p>1、根据_id查询，_id本身具有索引，根据_id查询指定数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.TestIndexes.find(&#123;<span class="string">"_id"</span>:ObjectId(<span class="string">"587330f80f5dc508c0b0be13"</span>)&#125;);</div></pre></td></tr></table></figure>
<p>2、根据无索引字段c查询</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.TestIndexes.find(&#123;<span class="string">"c"</span>:<span class="number">1000</span>&#125;);</div></pre></td></tr></table></figure>
<p>3、对d.d3加入索引</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.TestIndexes.createIndex(&#123;<span class="string">"d.d3"</span>:<span class="number">1</span>&#125;);</div></pre></td></tr></table></figure>
<p>查询语句同2</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.TestIndexes.find(&#123;<span class="string">"d.d3"</span>:<span class="number">1000</span>&#125;);</div></pre></td></tr></table></figure>
<p>自动化查询语句</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n=<span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> ret1=<span class="number">0</span>,ret2=<span class="number">0</span>,ret3=<span class="number">0</span>,ret4=<span class="number">0</span>,ret5=<span class="number">0</span>,</div><div class="line">    ret6=<span class="number">0</span>,ret7=<span class="number">0</span>,ret8=<span class="number">0</span>,ret9=<span class="number">0</span>,reta=<span class="number">0</span>,retb=<span class="number">0</span>,retc=<span class="number">0</span>,retd=<span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line"></div><div class="line">    ret1 += db.getCollection(<span class="string">'TestIndexes'</span>)</div><div class="line">        .find(&#123;<span class="string">"_id"</span>: ObjectId(<span class="string">'587330f80f5dc508c0b0be13'</span>)&#125;)</div><div class="line">        .explain(<span class="string">"executionStats"</span>)</div><div class="line">        .executionStats.executionTimeMillis;</div><div class="line"></div><div class="line">    ret2 += db.getCollection(<span class="string">'TestIndexes'</span>)</div><div class="line">        .find(&#123;<span class="string">"c"</span>:<span class="number">1000</span>&#125;)</div><div class="line">        .explain(<span class="string">"executionStats"</span>)</div><div class="line">        .executionStats.executionTimeMillis;</div><div class="line">    </div><div class="line">    ret3 += db.getCollection(<span class="string">'TestIndexes'</span>)</div><div class="line">       .find(&#123;<span class="string">"d.d3"</span>:<span class="number">7580</span>&#125;)</div><div class="line">       .explain(<span class="string">"executionStats"</span>)</div><div class="line">       .executionStats.executionTimeMillis;</div><div class="line"></div><div class="line">    ret4 += db.getCollection(<span class="string">'TestIndexes'</span>)</div><div class="line">       .find(&#123;<span class="string">"d.d4"</span>:<span class="number">6.0</span>&#125;)</div><div class="line">       .explain(<span class="string">"executionStats"</span>)</div><div class="line">       .executionStats.executionTimeMillis;</div><div class="line"></div><div class="line">    ret5 += db.getCollection(<span class="string">'TestIndexes'</span>)</div><div class="line">       .find(&#123;<span class="string">"d.d5"</span>:<span class="number">7.0</span>&#125;)</div><div class="line">       .explain(<span class="string">"executionStats"</span>)</div><div class="line">       .executionStats.executionTimeMillis;</div><div class="line"></div><div class="line">    ret6 += db.getCollection(<span class="string">'TestIndexes'</span>)</div><div class="line">       .find(&#123;&#125;)</div><div class="line">       .limit(<span class="number">40</span>)</div><div class="line">       .skip(<span class="number">20</span>)</div><div class="line">       .explain(<span class="string">"executionStats"</span>).executionStats.executionTimeMillis;</div><div class="line"></div><div class="line">    ret7 += db.getCollection(<span class="string">'TestIndexes'</span>)</div><div class="line">       .find(&#123;<span class="string">"c"</span>:&#123;<span class="string">"$gt"</span>:<span class="number">12</span>&#125;&#125;)</div><div class="line">       .limit(<span class="number">40</span>)</div><div class="line">       .skip(<span class="number">20</span>)</div><div class="line">       .explain(<span class="string">"executionStats"</span>)</div><div class="line">       .executionStats.executionTimeMillis;</div><div class="line"></div><div class="line">    ret8 += db.getCollection(<span class="string">'TestIndexes'</span>)</div><div class="line">       .find(&#123;<span class="string">"c"</span>:&#123;<span class="string">"$gt"</span>:<span class="number">12</span>&#125;,<span class="string">"d.d3"</span>:&#123;<span class="string">"$mod"</span>:[<span class="number">2</span>,<span class="number">0</span>]&#125;&#125;)</div><div class="line">       .limit(<span class="number">40</span>)</div><div class="line">       .skip(<span class="number">20</span>)</div><div class="line">       .explain(<span class="string">"executionStats"</span>)</div><div class="line">       .executionStats.executionTimeMillis;</div><div class="line"></div><div class="line">    ret9 += db.getCollection(<span class="string">'TestIndexes'</span>)</div><div class="line">       .find(&#123;&#125;)</div><div class="line">       .sort(&#123;<span class="string">"d6"</span>:<span class="number">-1</span>&#125;)</div><div class="line">       .explain(<span class="string">"executionStats"</span>)</div><div class="line">       .executionStats.executionTimeMillis;</div><div class="line">    </div><div class="line">    reta += db.getCollection(<span class="string">'TestIndexes'</span>)</div><div class="line">       .find(&#123;&#125;)</div><div class="line">       .sort(&#123;<span class="string">"d.d3"</span>:<span class="number">-1</span>&#125;)</div><div class="line">       .explain(<span class="string">"executionStats"</span>)</div><div class="line">       .executionStats.executionTimeMillis;</div><div class="line">    </div><div class="line">    retb += db.getCollection(<span class="string">'TestIndexes'</span>)</div><div class="line">       .find(&#123;&#125;)</div><div class="line">       .sort(&#123;<span class="string">"d.d7"</span>:<span class="number">-1</span>&#125;)</div><div class="line">       .explain(<span class="string">"executionStats"</span>)</div><div class="line">       .executionStats.executionTimeMillis;</div><div class="line"></div><div class="line">    retc += db.getCollection(<span class="string">'TestIndexes'</span>)</div><div class="line">       .find(&#123;&#125;,&#123;<span class="string">"_id"</span>:<span class="number">1</span>,<span class="string">"c"</span>:<span class="number">1</span>&#125;)</div><div class="line">       .limit(<span class="number">10</span>)</div><div class="line">       .explain(<span class="string">"executionStats"</span>)</div><div class="line">       .executionStats.executionTimeMillis;</div><div class="line"></div><div class="line">    retd += db.getCollection(<span class="string">'TestIndexes'</span>)</div><div class="line">       .find(&#123;&#125;)</div><div class="line">       .limit(<span class="number">10</span>)</div><div class="line">       .explain(<span class="string">"executionStats"</span>)</div><div class="line">       .executionStats.executionTimeMillis;   </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = &#123;</div><div class="line">    <span class="string">"查询_id"</span>: ret1/n,</div><div class="line">    <span class="string">"查询c(无索引)"</span>: ret2/n,</div><div class="line">    <span class="string">"查询d.d3(有索引)"</span>: ret3/n,</div><div class="line">    <span class="string">"查询d.d4(无索引)"</span>: ret4/n,</div><div class="line">    <span class="string">"查询d.d5(有索引)"</span>: ret5/n,</div><div class="line">    <span class="string">"分页(0条件)"</span>: ret6/n,</div><div class="line">    <span class="string">"分页(1条件)"</span>: ret7/n,</div><div class="line">    <span class="string">"分页(n条件)"</span>: ret8/n,</div><div class="line">    <span class="string">"排序(时间)"</span>: ret9/n,</div><div class="line">    <span class="string">"排序(字段,无索引)"</span>: reta/n,</div><div class="line">    <span class="string">"排序(字段,有索引)"</span>: retb/n,</div><div class="line">    <span class="string">"查询(无过滤)"</span>: retc/n,</div><div class="line">    <span class="string">"查询(有过滤)"</span>: retd/n</div><div class="line">&#125;</div><div class="line">printjson(result);</div></pre></td></tr></table></figure>
<h4 id="结果记录"><a href="/2017/01/09/玩转MongoDB之性能调优/#结果记录" class="headerlink" title="结果记录"></a>结果记录</h4><table>
<thead>
<tr>
<th style="text-align:left">检测项目</th>
<th style="text-align:right">10w</th>
<th style="text-align:right">20w</th>
<th style="text-align:right">30w</th>
<th style="text-align:right">40w</th>
<th style="text-align:right">50w</th>
<th style="text-align:right">60w</th>
<th style="text-align:right">70w</th>
<th style="text-align:right">80w</th>
<th style="text-align:right">90w</th>
<th style="text-align:right">100w</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">查询_id</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:left">查询c(无索引)</td>
<td style="text-align:right">52.2</td>
<td style="text-align:right">101.1</td>
<td style="text-align:right">120.6</td>
<td style="text-align:right">127.6</td>
<td style="text-align:right">130.5</td>
<td style="text-align:right">154.3</td>
<td style="text-align:right">149.5</td>
<td style="text-align:right">165.1</td>
<td style="text-align:right">135.4</td>
<td style="text-align:right">157.7</td>
</tr>
<tr>
<td style="text-align:left">查询d.d3(有索引)</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:left">查询d.d4(无索引)</td>
<td style="text-align:right">124.4</td>
<td style="text-align:right">248.9</td>
<td style="text-align:right">317.4</td>
<td style="text-align:right">376.5</td>
<td style="text-align:right">326.6</td>
<td style="text-align:right">327.9</td>
<td style="text-align:right">342.3</td>
<td style="text-align:right">325.8</td>
<td style="text-align:right">443.4</td>
<td style="text-align:right">324.1</td>
</tr>
<tr>
<td style="text-align:left">查询d.d5(有索引)</td>
<td style="text-align:right">111.4</td>
<td style="text-align:right">218</td>
<td style="text-align:right">261.1</td>
<td style="text-align:right">267.7</td>
<td style="text-align:right">272.6</td>
<td style="text-align:right">260.2</td>
<td style="text-align:right">283.2</td>
<td style="text-align:right">262.9</td>
<td style="text-align:right">294.1</td>
<td style="text-align:right">269.7</td>
</tr>
<tr>
<td style="text-align:left">分页(0条件)</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:left">分页(1条件)</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:left">分页(n条件))</td>
<td style="text-align:right">44.7</td>
<td style="text-align:right">79.3</td>
<td style="text-align:right">84.7</td>
<td style="text-align:right">90.6</td>
<td style="text-align:right">82.3</td>
<td style="text-align:right">75.9</td>
<td style="text-align:right">92.2</td>
<td style="text-align:right">75.2</td>
<td style="text-align:right">80</td>
<td style="text-align:right">88.3</td>
</tr>
<tr>
<td style="text-align:left">排序(时间)</td>
<td style="text-align:right">195.8</td>
<td style="text-align:right">192.2</td>
<td style="text-align:right">154.4</td>
<td style="text-align:right">93.4</td>
<td style="text-align:right">95.7</td>
<td style="text-align:right">75.7</td>
<td style="text-align:right">57.9</td>
<td style="text-align:right">58.1</td>
<td style="text-align:right">38.6</td>
<td style="text-align:right">38.2</td>
</tr>
<tr>
<td style="text-align:left">排序(字段,无索引)</td>
<td style="text-align:right">136.7</td>
<td style="text-align:right">263.9</td>
<td style="text-align:right">263.9</td>
<td style="text-align:right">240.7</td>
<td style="text-align:right">307.8</td>
<td style="text-align:right">290.2</td>
<td style="text-align:right">248.8</td>
<td style="text-align:right">290.3</td>
<td style="text-align:right">214.3</td>
<td style="text-align:right">241.1</td>
</tr>
<tr>
<td style="text-align:left">排序(字段,有索引)</td>
<td style="text-align:right">102.7</td>
<td style="text-align:right">209.9</td>
<td style="text-align:right">221.2</td>
<td style="text-align:right">261.6</td>
<td style="text-align:right">211.4</td>
<td style="text-align:right">253.8</td>
<td style="text-align:right">275.4</td>
<td style="text-align:right">255.4</td>
<td style="text-align:right">238.1</td>
<td style="text-align:right">262.3</td>
</tr>
<tr>
<td style="text-align:left">查询(无过滤)</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:left">查询(有过滤)</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">检测项目</th>
<th style="text-align:right">120w</th>
<th style="text-align:right">140w</th>
<th style="text-align:right">160w</th>
<th style="text-align:right">180w</th>
<th style="text-align:right">200w</th>
<th style="text-align:right">250w</th>
<th style="text-align:right">300w</th>
<th style="text-align:right">500w</th>
<th style="text-align:right">750w</th>
<th style="text-align:right">1000w</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">查询_id</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:left">查询c(无索引)</td>
<td style="text-align:right">185.2</td>
<td style="text-align:right">144</td>
<td style="text-align:right">166.8</td>
<td style="text-align:right">185.9</td>
<td style="text-align:right">204.7</td>
<td style="text-align:right">133.5</td>
<td style="text-align:right">157.2</td>
<td style="text-align:right">299.6</td>
<td style="text-align:right">1477.4</td>
<td style="text-align:right">1132.3</td>
</tr>
<tr>
<td style="text-align:left">查询d.d3(有索引)</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:left">查询d.d4(无索引)</td>
<td style="text-align:right">337.3</td>
<td style="text-align:right">386.9</td>
<td style="text-align:right">440.4</td>
<td style="text-align:right">194.7</td>
<td style="text-align:right">271.5</td>
<td style="text-align:right">348.9</td>
<td style="text-align:right">422.1</td>
<td style="text-align:right">725.3</td>
<td style="text-align:right">1048.8</td>
<td style="text-align:right">13584</td>
</tr>
<tr>
<td style="text-align:left">查询d.d5(有索引)</td>
<td style="text-align:right">261.4</td>
<td style="text-align:right">302.8</td>
<td style="text-align:right">349.5</td>
<td style="text-align:right">196.7</td>
<td style="text-align:right">217.5</td>
<td style="text-align:right">270.7</td>
<td style="text-align:right">326</td>
<td style="text-align:right">-</td>
<td style="text-align:right">807.6</td>
<td style="text-align:right">1346.7</td>
</tr>
<tr>
<td style="text-align:left">分页(0条件)</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:left">分页(1条件)</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:left">分页(n条件))</td>
<td style="text-align:right">72</td>
<td style="text-align:right">83.7</td>
<td style="text-align:right">96.7</td>
<td style="text-align:right">53.7</td>
<td style="text-align:right">59.5</td>
<td style="text-align:right">73.5</td>
<td style="text-align:right">87.7</td>
<td style="text-align:right">-</td>
<td style="text-align:right">1322</td>
<td style="text-align:right">1350.7</td>
</tr>
<tr>
<td style="text-align:left">排序(时间)</td>
<td style="text-align:right">38</td>
<td style="text-align:right">38</td>
<td style="text-align:right">38.7</td>
<td style="text-align:right">19.3</td>
<td style="text-align:right">19.5</td>
<td style="text-align:right">18.5</td>
<td style="text-align:right">18.5</td>
<td style="text-align:right">0</td>
<td style="text-align:right">187.7</td>
<td style="text-align:right">194.6</td>
</tr>
<tr>
<td style="text-align:left">排序(字段,无索引)</td>
<td style="text-align:right">280.7</td>
<td style="text-align:right">321.2</td>
<td style="text-align:right">183.2</td>
<td style="text-align:right">205.8</td>
<td style="text-align:right">227.6</td>
<td style="text-align:right">283.2</td>
<td style="text-align:right">321</td>
<td style="text-align:right">-</td>
<td style="text-align:right">827.2</td>
<td style="text-align:right">1057.7</td>
</tr>
<tr>
<td style="text-align:left">排序(字段,有索引)</td>
<td style="text-align:right">252.4</td>
<td style="text-align:right">147.6</td>
<td style="text-align:right">168.4</td>
<td style="text-align:right">189.7</td>
<td style="text-align:right">208.6</td>
<td style="text-align:right">256.2</td>
<td style="text-align:right">0</td>
<td style="text-align:right">-</td>
<td style="text-align:right">1484.8</td>
<td style="text-align:right">1410</td>
</tr>
<tr>
<td style="text-align:left">查询(无过滤)</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
<tr>
<td style="text-align:left">查询(有过滤)</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
<td style="text-align:right">0</td>
</tr>
</tbody>
</table>
<h4 id="有无索引的区别"><a href="/2017/01/09/玩转MongoDB之性能调优/#有无索引的区别" class="headerlink" title="有无索引的区别"></a>有无索引的区别</h4><p>1000w数据量下，对d.d7字段分别进行有索引和无索引情况下的指定记录查询。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.getCollection(<span class="string">'TestIndexes'</span>).find(&#123;<span class="string">"d.d7"</span>:<span class="number">-9</span>&#125;).explain(<span class="string">"executionStats"</span>)</div></pre></td></tr></table></figure>
<p>创建索引时，操作时间为 0ms<br>取消索引时，操作时间为 5519ms</p>
<p>所以索引对于查询的优化效率不言而喻。</p>
<h4 id="调优总结"><a href="/2017/01/09/玩转MongoDB之性能调优/#调优总结" class="headerlink" title="调优总结"></a>调优总结</h4><ul>
<li>在查询条件、排序条件、统计条件的字段上选择创建索引,对于不同的索引（比如单键索引，数组索引，复合索引等等）需要分开对待。</li>
<li>在创建索引操作时，应当后台运行，降低对性能的影响（拥有数据后才创建索引的情况下）。</li>
<li>使用limit()限定返回结果集的大小，减少数据库服务器的资源消耗，以及网络传输的数据量。</li>
<li>只查询使用到的字段，而不查询所有字段。</li>
<li>基于Mongodb分布式集群做数据分析时，MapReduce性能优于count、distinct、group等聚合函数。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ASP.Net实现页面跳转的方法]]></title>
      <url>/2017/01/09/ASP-Net%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>在ASP.NET中，即使用C#编写的WEB项目中，服务端对前端页面的路由控制在不同的情况下使用不同的方式对页面进行跳转控制。总的来说，主要具有七种不同的方式可以实现。</p>
<a id="more"></a>
<h4 id="方式一-Response-Rediect"><a href="/2017/01/09/ASP-Net实现页面跳转的方法/#方式一-Response-Rediect" class="headerlink" title="方式一: Response.Rediect()"></a>方式一: Response.Rediect()</h4><p><strong>原理：</strong>服务端发送HTTP重定向状态码(302)到客户端，客户端接收到重定向指令后，按照需要重定向的路径重新向服务端发起请求。<br><strong>优点：</strong>可以跳转到任意页面，无类似于浏览器的同源策略的限制，即可从A站点跳转到B站点。<br><strong>缺点：</strong>速度慢，需要两次请求，无法保存请求携带的数据。<br><strong>示例：</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">System.Web.HttpContext.Current.Response.Rediect(<span class="string">"http://www.hummingman.cc"</span>,<span class="literal">true</span>);</div><div class="line">System.Web.HttpContext.Current.Response.End();</div></pre></td></tr></table></figure>
<p>其中，第二个参数表示，是否终止当前页面的执行。</p>
<h4 id="方式二-Server-Transfer"><a href="/2017/01/09/ASP-Net实现页面跳转的方法/#方式二-Server-Transfer" class="headerlink" title="方式二: Server.Transfer()"></a>方式二: Server.Transfer()</h4><p><strong>原理：</strong>转发机制，从A页面跳转到B页面，无重定向过程，所以地址不变，但是页面改变。<br><strong>优点：</strong>可以跳过登录验证，一次返回，速度快。<br><strong>缺点：</strong>只能转发到同一个站点下的其他页面。<br><strong>示例：</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.Web.HttpContext.Current.Response.Server.Transfer(<span class="string">"http://www.hummingman.cc"</span>,<span class="literal">true</span>);</div></pre></td></tr></table></figure>
<p>其中，第二个参数表示，是否携带当前表单中的内容。</p>
<h4 id="方式三-Server-Execute"><a href="/2017/01/09/ASP-Net实现页面跳转的方法/#方式三-Server-Execute" class="headerlink" title="方式三: Server.Execute()"></a>方式三: Server.Execute()</h4><p><strong>原理：</strong>将一个页面的输出结果插入到另一个aspx页面，即先跳转到一个新的页面，再返回原页面。<br><strong>优点：</strong>目标页面和原页面可以在同一个服务器上。<br><strong>缺点：</strong>只能转发到同一个站点下的其他页面。<br><strong>示例：</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.Web.HttpContext.Current.Response.Server.Execute(<span class="string">"http://www.hummingman.cc"</span>,<span class="literal">true</span>);</div></pre></td></tr></table></figure>
<p>其中，第二个参数表示，是否携带当前表单中的内容。</p>
<h4 id="方式四：Response-Write"><a href="/2017/01/09/ASP-Net实现页面跳转的方法/#方式四：Response-Write" class="headerlink" title="方式四：Response.Write()"></a>方式四：Response.Write()</h4><p><strong>原理：</strong>直接写入前端页面代码。<br><strong>缺点：</strong>前后端耦合严重，后端直接参与前端页面代码，不推荐。<br><strong>示例:</strong></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Response.Write(<span class="string">"&lt;script&gt;window.location=\"http://www.hummingman.cc\"&lt;/script&gt;"</span>);</div></pre></td></tr></table></figure>
<h4 id="不同方法的使用场景"><a href="/2017/01/09/ASP-Net实现页面跳转的方法/#不同方法的使用场景" class="headerlink" title="不同方法的使用场景"></a>不同方法的使用场景</h4><p>1、如果要让用户来决定何时转换页面以及转到哪一个页面，前端超链接比较合适，比如导航栏等。<br>2、如果要把用户连接到另一台服务器上的资源，即跳转到其他服务器的页面，使用Response.Rediect()。<br>3、如果要跳转到其他的静态HTML页面，使用Response.Rediect()。<br>4、如果要将查询字符串作为URL的一部分，使用Response.Redirct()。<br>5、如果要将执行的流程转发到另外一个ASPX页面，使用Server.Transfer()。<br>6、如果要捕获一个ASPX页面的输出结果并插入到新的ASPX页面中，使用Server.Execute()。<br>7、如果要确保合法的HTML，使用Response.Rediect()。</p>
<h4 id="其他"><a href="/2017/01/09/ASP-Net实现页面跳转的方法/#其他" class="headerlink" title="其他"></a>其他</h4><p>在前后分离盛行的时代，使用Response.Rediect()方法和Server.Transfer()方法是最为合适的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[X:Rebirth Home Of Light Guide]]></title>
      <url>/2016/12/05/X-Rebirth-Home-Of-Light-Guide/</url>
      <content type="html"><![CDATA[<p>本篇文章主要介绍了如何玩《X重生：光之家园》这个游戏。</p>
<a id="more"></a>
<h3 id="The-universe"><a href="/2016/12/05/X-Rebirth-Home-Of-Light-Guide/#The-universe" class="headerlink" title="The universe"></a>The universe</h3><ul>
<li>At the top, we have the <strong>galaxy</strong>. The galaxy is basically everything in the x-universe. Think of it as the world (Earth) to make things easier. </li>
<li>Now Earth is divied into smaller sections called <strong>sectors</strong>.</li>
<li>Each cluster is split into <strong>sectors</strong>. </li>
<li>Sectors is split into <strong>zones</strong>.</li>
<li><strong>Local highway</strong> is designed to connect different zones.</li>
<li><strong>Super highway</strong> is designed to connect different sectors.</li>
<li><strong>Gate</strong> is designed to connect different clusters.</li>
<li>Super-highways are blue and local-highways are green.</li>
</ul>
<h3 id="Platforms"><a href="/2016/12/05/X-Rebirth-Home-Of-Light-Guide/#Platforms" class="headerlink" title="Platforms"></a>Platforms</h3><p> In X-Rebirth we land on platforms, so that we can talk to people about the services they offer. The range of services includes recruitment, ship repairs, mission objectives, trade, ship upgrades etc. Landing on platforms also gives you the chance to look at varoius people. </p>
<ul>
<li>Bar platforms</li>
<li>Drnoe</li>
<li>Shipyard</li>
<li>Headquarters</li>
<li>Repair platform</li>
<li>Trade platform</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[致X君]]></title>
      <url>/2016/12/04/To-Li/</url>
      <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><span id="encrypt-message">A correct password is required for this article. Please ask me for more help if you can't get the key! This article is a letter for X.</span><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">确认</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> U2FsdGVkX18zlQhx0hk+0itRQiGUtWXb+CBYpZp2l3NMn7kBNbMNEyt7Q3glwZ4xDtTA3MICsKf4pMsYpl9HatbA/yCEl2ndo8hvIKyXaFLJKIllvkZxKv+ilnkXaOuD8M8Y4eI2lGicaVY8B6Ei4TpjYs/7KNHvtP5xyOxPt7NYyBhYy07U8piMZXwLLiSr8daYVm9QyWmK1C+W+4fEEmXk7p01ssmF2ZZfHMxpRBLxf4m3XqB5w/kZV9be7HZkJ4qqOmDwtbBe6Ng09Az4CBgxbnpDbeWivnbq3q+sWBXvz1kzzO2cqu5vtIiDUSzOvTFlq9mO7AoDG9sygyN3d/0MZwl4YsCVhAp4w/Q1kpPVRfOAzW/ov9A0G0ZRrEYvB/+pu8SGFngX3RGq/vGyCffQ4bqYOGt7tFWji+ntl/I2RW2q+UCOISulm9CV67m3VyPQeEeaUaW0OCVw4I3HVF66VM/rXT5Qzfcr50elIR6jOATujdphnuZDU6ojke/H2MXoSe5Rd+izaKrgbbmYihgUO/Dyb5RHDQVWeGWT5DxyBJifDSP6jpauE1U/4AXq9yLt/GhyuV68nc0fQfuEwn/2fSn198QX7qq9VU0rarOzbACQUd5tDITcat3mKI5qMhP3pHUi/05Tn+Jf+xOBztIzpkEBizhlp2c1TU6x51L25AHrrJ4ecqSYB3QKye4oNlQTjossVY1iCp4T/9MGwWFUB8WOL4sf23O22AXYrG884eY3jq1GhkE0a4SgGKjBeM3G2DbCLp1nK6MsVfd07xUj+DVe4NJ8CREGQ4mvPaBQOsnxXHE2su+1KFXVw5+w7WNiv4O2nwHKAjiT5j2lgNgyOEgdCDfnHG8NvD96u9H2RRuz4YlkxqsaU+zCSEbiLGhs6Rlcty2oiMjRYz2nOsRbHqGbS1nDv26ZBS6oeR5xEi/tp2paKUKZtTs8zkDcZB6f2jG8PP16u3TbMn5ztNzSzvUfoSGMpMMRqZL1ajPJAc2ZqVl+Tj6sNBlw1hd9Y6Xk0zVlPjVvHHab3xUEs39WiIgL+Iw1QwCza4pAKCQMZNLdB8xiJkF1oiWaDBSnt0OYFQAVJVEy5EkzHqujL0Y/q94WwnhpW8v0AKrt6YdGRkXjnN+Tn52R8DBWpXjg9gdGX2vaUzb5RcnKqUD2bYA6qw5Y+ohJebpvfSjJqm5Qw47+mVyyygpRmpeAjRxyHCawOm9MYk6ddjdr1UXgdhcbBHBAWsKKbCY8zodQv4yvoPxJnT07Hi1hoooGbBjNfhRPNdATTsZkYXw84nsbdBMB5ItEwR9Qumw3pPmX2ISQYlAT0QLvj8X9OJ5HWVe7FPO8zK1tHwEvpLelNk40aKY3dzwFN4r/aoL1hHbU48C+oiXJd5dehXi759+44V6CHe6hXVlSvN3NgaYXV7iLQTtToNU31rRQCZCXnYK3/0gnDgaOXaq7Uum6iCvJ+qGZRHfLo1YJ+4q41RS+VJwsZ/5IRamJpL4+MJ/GPjJbZ/6EOA4FZYiXDk2F9q/PTDey9A5DZq8asPF1D3sb34l5u7f0UCPPn4a7R9JSc+NerQio6bvdn8IIiTCDrXaqmT4AycWWhgwrmz1XABVrdZonVcUTusNgQTfLVMkggo00FE4m28YJLcj09ICkB8SttB9MQU8HSBD0XYxrnwLt3QD9YqrZUQbwMWz9nvlX4Ryps1kU2kuxwzgwLKTM4dyQ3++rYC//JLewY5w2gXP9Ii7m63wU4zFhS+xdazBJ+OppuMjIUiHjP0FJSuftXwgQ2foXkLw+qOq6U6MCYpksAv8VVnGQgw2wkgfAOW5uxnLqK0CK2xH2Tcx1x6KpsgDjWjlVp7GcJZUVUgGNVvP2UifhIF8tVyUxYA1YTHSdX2mKxx7PZpPqbNicWA3F8puOMv6UFJaIm2gOjT3Up7u5hxNMvUppOqqOaaXmm2nCgBnh+ZExOZcWgN5/oySmoThnCPQb5rvKoyiYczqBkPgf2bSLfcmUf43tTdz8I7V9QUOrXWfuC6D5hbjP9QDXkM/1pAW/9qzB612rl7BzqVrlw/jbTTEMgiWKmg83QnlMF8euRYXRvGNY1hfP6UXIxArMDhDcZtCmWUMM4v5wA1D3nbINkLomtch3jyfvYrv0aG8wxUlAtdmHEpGVTcsLIVW6p08dC6LqcnO8WrrHNByz59tjqOG6MDIAOPdXcwHdyMMZav+Q9xn0XVn95z/DvO9gJnGsjGLNDnBPXIEPMVTHZD/Me1GxG8b7pYx50FZ27Xj35ZdmbDNes4K1xJ9Sswmw/CxdPKNliJU/bb5I+RKEezPgQaUII1Gwy0SxU7amFQ/SRGajyKHoa1kmkdMzMnr8k6PTlBalyk8TLUzXn9K0wmv9lI/EtgrUVUSBXAn+zRrgduOZ6tkvCnNq5lCTADmKq0J0WOQThoOWyqU/x7BUIXglQ7WtmNwQyF+wuKjw9rf8mtKDpUnn80VoUb4ifL0qHJ43w26Upi1iOB7ZmluTxaGMti1tY9e8Es07DoM2/znwtZJpakVXj3OZXB+nEw8aj1Tgzp6pa9ITK15PmUM+diwdniiDxno0aDegvS8ajes9+91IqwognIknE6mcE8PphF814l3KJUUPUs0yz/ZOuI7gb473X+osDgf30FqjpGJ7iNHNoS2VrnKPmGiXRr/chkv7MqR+odubwoC/1UnH9uROKW2PwssL785BGOiCeGqbRABM64cOIE2F+QVKSYpzjG378Zzl5OPgyp5NMzycuoX3OzkSOq/UMH/qSezZwJVKVHlmC4EsbR1IBGeAMN1UwxStkQsm2HcJNPLfPpomqXDiGZDUJlKhy0zlW3A9Wo0EhttkVl4obcV/ToaPbbeALUBmGy2fXWWbo8SmrrQQMYrqdV/BrnRzvzTRvLJEFkfmN2aFvuu+BFoy26RiCyc+9SP9GXJuZ0BgpaWdJa8LjzAtbuu8WxyZb5V0nW+PBCqtxRNuTziIaAPhvQ9p75IiYNxAQ3uQuD1y0qHRQkaelWipew+/RKaJCgq3Ke6O3aml81cMej0yKKwic2aHV0k8zS6IHVIhOP2JPukhzzuFjYD/3ZF4xO1LRGf/RMOryldvQre4IjN8FaNR5o6OnwI9ViN22NiRAthi6xoSUfhyFZEPIsEjqUIHaIP68jhetuyqUzLdwiGC5Rl9l/gom8RqRlWfqlyeJwwG5zJ8raF6j6SktQdR9wZ1jj9mA4NqBk5WuZPI4dJhq6XECCBEyK/6uJGH6lIlCgjvaOYwvONWcfHA+B/Uve7h/oAGrQC8SLcWx/ut0MDSqS8R7xWhRU7BlUu5VyV7AzXhmGSCV1pEp9j5x0J6LYMkQyVBp/A+95iI8OY5VdPUbEWaU7/NsEEVGm6KuCz/5YRu+CuUd0p6EqohgkGIOwucpjrDnZudyx4dzZPpSqc+stDredMuGHiUIn+hD8VerWdYefdmbaqz4SXeNqHOY9lJF2rcM5W4CCyokMyP8Ro2Os5mzGeXjxM/jqU5zBqS05YZ304P3U6B3SX87i067kEUri6pillsETLvkiLJPgMe6kRuOCWhfVrL3MFVjyhPogOYgFGLUdMZlsNwVzF2DGFiqgaLcWlgOKuSpEP/lSuybWMY8L9rlASsyUgiGnUlZshUoBgU9pNJlxCC2lsk0mgXZfFq6O/1BZNiLQHgujZLlGCvqjoXGvE4mhXbkjulbAU7j050x2iYYEGpaaMcsaY7CMmXqNUPBt46v5Efg5+mErWK83LdNhgIh08rPuS/dQvj0RCm00GuCqr3tTveVlUgMvw7VAJ3/Rs1g1CvPpQxAp8NPbLfI67scDlcmXZYxzIjfRBWkJTNpRi/jmYrI3gxYAOCXUSXmZRCihuyO4kGff2LBou7uFM4PGYXhdkXgd99c8XbqNS7ltBQqyyraaT/79JFJUhuaezKaiFRwxtRfyKxRP+A54x+TZPUrPsuFhbzZybkycmv2XQSfhWnGM3ALGBNt+7x0r3FI6oWr3yZxNDo9C5azX0nmX6t67W6jT2fAfnXaBM+mqWBosua6K2DHNKyr9kffcr4mg1ETOEULO6Mw8PR6cz+j0m9eurKrMkaP05ylSZn0ChtaSwKJqakG+VX0YPYoqse1gDKIQdsee/x0yK8fsbGFXmHgh/Th1c74odwDeuAuYXkrVMAk36aKp3AY51YwDdYgp6pPBuewDhAkOXO0YqNnHE/O9eoU0YS68+yHTmwVN6iSeV7x1Dr/e3fmPW1hNror1GFdAPk1MD4q2ZhzfalDj1QJ6cJiiMrTrghk9AFSSDHVsG8O3nqganIrYm0nE5oZNGLEQmsCayAq6CDUds0/f4qpZJcfWrqRVmpR4GL98tnzr2QOl+CcIyMs6B7z0Ts8Ev76dlUy2HtfmQEGYX0raBjYrrnoXmOoHfU/f/Qxb4nQvZPuCmAWOc5HiiuRtp9BFqEVf5Vsw980F+YXZvwCXK7iswnXmCdBsA1shYrWrEhAPzJWfKXPP/FeqOvNNWaylbYsSWQQ52jexcab+mgtGrDlKQPu09rTse8pFRRbucqaxa+M/GxEdqJN36ceeWdnQMcF3HKbiu5c4LXZ8gLMWZCxxq9ygSJ7/iAtt2pUxm7qS5V8LuOK2oJ/h88QdRCMMLFlk4TtE3sxifFjJN38588JzJMUEQ5oJIXbqT2IRY4+N0IsxGDLyHl5XR+vlL9JgSeoL9GbtrUKvA9V0tsSlRCggddlC9UZc6J7khdCjWjDI7XTx3sW1/ECy7SnQf7g8IhMuHCdbSbYUwSu5xAmL95VNN7EKII2wuc1TvF3ldu3k3o6WHjXQq7X/Z7HfG74Scef9F0TTnCjpyQxmZJeRTHO174GRA0NV8n7V0ruRGdp2+YUcaRBFBzWRUNY1hvalSeeWTOwQWETaPL5PrfWt5mVG0qVqm1UUuUw5QF/EOOtqxv6DFqKiiO7lggIItUli4aooFjQfcteEDqei39fba3g8nnosG7z/Xy2uUMq6kAu+qPAvcmHaHB+Nu2MoK9R1jgtaK3e7YnVuhuEwsRTZxM6d3fsYmg57aRfq/JzkJ1luTx2j/adW7rDFf4yxB8LVer2oPDLVV5JQ2AH+9JDTklMQ8vzy+j25fCAE3iRExrloeS19o9CZxM8uIr9H7r6UZIch6XlJnNdfc0wIcYqXsLu8JVKBEh2XI22QTkVokn7Fib3S+0kYzj3MKehvnuUwtqoCvzLuj4Lpu4+ZXMs5osnFuZRGaBsRUDdmIUd9Ol/UKjA89keKGG0tPXVwD/AbJ9IGysphDLDa33HZFPBNl+co4CqUJGbXVNiZ9Zqf3o2hxrPWe9v3yAJg9WMUm1Xw5fL4f3+7i8EwYsV3mt93b0wqFWFtKadurSpuCLj2d9Dxn3m8hULag7nq9F/qHsFg3Ru6ESirK9kXZpKZFi48a50sHO5wKiInRbTqPQAqwSWeNepodaaBOBCZJWQAWMZws8IEgfLvILg0dBCdzYeZGBcj4KHN1Ez3UQ0EIkqKFwUGhoGAyhoCUYE8QscCsw1JADgIoEWaA1HJcd4nfuqWMoMrDlKHlHpBSuuIOrU0VxbBvsXUlBzDQSV7RS6bYREna5IUJxrpPcZe8lVzeq0qfsUMA3kKD4W3laC1jmgwmnV7q6XjpVg2wa2iKjYRYGwHY73SAFYAYHOjITXKEn/6kk/u2FiJg2f8hzcqZF7gHocvdhFtv9HgXMjS5Q7Y/93ccmDPwGVw11G0Fc3/26/52Mbmju0jLNbgu4SyFOjr2HXg37lHJCMKsH1zPmuQhbKrwr4LtivRL2Z9nIbk1HyVhTxT55kuPqH3V0oT97zlxB0KQj3CTaYUu2hvSLiIhROpK88sfG6qWDKZnGc5kVnzuuqKwf7GKL5qi0Y7/udqyXFQux6dqBe4PGeLPFaHo7NuHzQ4unxqOak9oiahvDAqYUMudKlK2Rrs0Ec++KMAI1TIoS8sQ+2gj1rPPAAwoi2NYPdfIQuEOP0L2GxiSdx56Ukliy1TRV1Yl3NgsVNb5FlEUy06d9A4hMuVzXWNz+Wlr7CWzPWzwj+TRnzL0AlPgGrGEoqKwYbTItnmuj83OBN4nAogbGbJp3p+2yzRxAFjc7u8mnx8Y6mD//upjxCy/pzHOjVkQ9BZpDH/KfhSQgnrSpDrqkoHT5+v0JZYdF5p0RZaTfl0KOVJ6ndWnvoX07e/MbBuyCiFZoX36lIB7lVvl+J05G7/C7QVJoLohTwNWwijXhOpSVkMG4UqHMWEiiY7loOyIkL0J3jtzq6sd/4EzVGwQWa4EsdTE8OtyHcWlL8URIc8dzeBil1sAlfnh0D71wpkC0nJFLnARXpoMjvjqz+IFd30pk3/GJ5yORfC69l1apbNQ0ixd2alON7NQFnguv5G+459wIkOwy43l6TdDs5U2AX56Vk/JecpVsh6EJUwxQQdNRmDy2jDGk6PSTqCOuKxf+9KkWn8lr4NQImrM/yNyUXEUebLfjR940WyYcVS8ATWeY7XPeucBTEZfWem8vp5/Udy8y9Dbl+x6z2cOrnyyCAh5rdgVZWoSkj7eFcGQZLHaTMhdxjREssstGK+tY5R1uUjp8SY7sxGxV/npcwUUwwcGfWqo+qdFEq7DNVM7o4rESQVX9Bz4ujg+1quiTCDEbQF1tJk9WVI0BHI1VUXpOqxGaZOs3evihLGfWkJQHqOdfLmoBkRlDGLKXWIoyMqXcT0/kuSqggjAeyDLtfJL3pSZrajEP+Pe9JG32aG0xLtMfQ7Lf/gw9q7eJcGkfOhbBsrItzkXY63eBPjIZpiIh1UtjPMBKdmXh5dsL53GwHE7UXZZjGBhYY20eDMjy11yP5wg3+yT2/cvhEC6JHVrvmLggkFDeMDHTWawXM/HgjjaTzr4V5MGwNbrh9r5kKNm7GbGqt3c3MjPZhu0besJ4JwVT8I6OT/Es9uaWLN0AC7fXyyIS3b/5kJC+x4/rM49w3vgz1ZGYmYVXFIEqSkyqZkPWvKhxy/zmtydCGY2ZlIlN3nGdWz//qdZ5JkKGeAXta8F6Gvxnds1j+JMBbFWBWEjC4nF4G4WWsX8e5OWYiGK74yf4QMUEhprhmVTZ/44SwpKOngXCwiJnr/R3jRJVQYuc541xQlxMpQEpmkM1pyK6Cp3IuRI/wVdD+wyzlbAA2Pn8siWjXcRqigY7ridcQI5JYjlLz1Bs/vuvSk/WdLdM64GlKNK5wtiJ7nzwK+FxF/KEeSXCDLeUppsVj87PYJ7a9owy0kFBP6bOk7F/quEwpklw6uZ8ZtoQSxXmNNac7XgawartEdeUN2Bx7wsIsdSjvS1YukOXFnkVLXD9ZrdjarBDetEnj/gTp4uP/G+Ik+c6Aft1ZoIBdDqCQkOjSbhl9Rr0C62w+dWt6zIASbntOvjbSCn4mvZQ89ESVfNxt7FSLfkyCL2c7g9cvg2QzOlJuQ9O1OrZwv2MuUTtlnPdO+4KJR3sZ2YLFvvNF4zNbwnW1xVJwMSjhhGqKuCAyUFzuzbsZMoY0HVOKdOLDauvaaUj2HpChQlAdtQBC3dCUQdRszz77YyyZR+z8CZYkMOiTFWJCQoAUrmefVE/l7T8TfWKQ9M8r7VIrfA9DA0QR15rzdwjLoVsbGOOygoM1pEMtO7dd4Cf55qlIkVnmpLMeLPY5EcQxIHmWWMtYtsi2aYTmChdjCZt2IltDpNCAAlwXCLdsv/xF1FvqLocqFgIt6XOeyrWro1IX4k5twryXMgtWxQYxYTArYjpJcvqUbyZar86CGUsOmnXXaJM1u5c7Qe+QuiMfUkjDfMcRjTZr1vqhdBS9ixI/zQi9JBLeC9qEjd6+xFSyHmU0XMfUVKn/+pdbIgVXTwxZIvDZctOeTj0InhRCfC8zSjJNzCW06TJXjCU86LrKc9axkXCYeCWA42iFoEaaqgddp+f/AwbGnWbsdSlcnm9Im5i3fzHNv9X9lupW0QjkJFXvmOrY9zyA3L443umcb4AmZnKYXxk3o09ymhCi0MCAnrt8G1c40h0keJ15Zg7ue26uhnkMgo+YSNlHrDcj8GjPBihQN11iLj0Zi66kA1pwYmPkfe7QRPhQfVC01+3aijUsdZiwPDe03uMn9s4r/d84OHntZyyi9E6GYyYoopNPQoNmvoOnMC36Y2ThdqHI73SUf6QBX5+GLag2rEMeIBvfXD5v9seDiSFbkTZJ7Cr94Y3reCp6x9xE9Cl7qFKmp4OU4mvoS8ldhEtUIIeuel1e7wGptsaFcFiqNbcr44+tgwrgHUHRyS8gmWrIOdNQlLSpJ5w3PLAtPkUUyQaMZvCVx2LgPLed/81O37ru1AIZXtK0B95Gn8u7gYKmJ8njaKLbSl1NfJC0aUtJMZ46r9iaZhhphP+ye0LNqv3nq/JNwuaWakNCWwIpZcq4DHMAiX7BU+/OPLsaeh+EET/P37ooTkREtS8aTz0MfSGn+1dWp63Mr9PzQ+u/ZabjHPbsUxAfiwruQpOmIxHO45hntb3Ydhmu7rc2Q5uv4k/li0AitDeuyIASgEpnnBQwf++UrpYJcBwJZXH8f2BHu56dbgBRrLZSHWGxzs1EziafyWbxqV204iNqFSLYJO6IGRCbLvtRUazMRDc4YgL99UmGvf741H3re5yUMAgwty15qa5dwsge1IWJ1u2iYfbUQ0fEyrsYCbsI6niDPE/9cw38QaUGwpmZXPUZufLE9U5R6E5CKMNCavIF+qnEaznat2RhOjahjz1qYlykBFQKJBaeF8nIJaFyZYH0TaOsMKHRwsDEREiDp85P482iIRJ+x7gLgEns3HmsDPrtDcLOA0RLKC/Fyu5w8gEiabkDL2vFnU1FW9v3FOvJjIoKyScVx3YNf7zBO85c+oBG5uqlzTwcCL0C9CFSHIQHW+OEsfST5k6gY562a3G/k0WBuSy+o61IM6MNDARit2k1vIQrLMzCwASU6u4ocZ7HVe/Wg8CbDdHSSHGXwR752YIMASsXI7/TWmcD2p7Mg6A4k9q2Yd3TjMr1Y+jOqET4aCUX2gcQva8X9jgTc/4zhc6WHxyrxH/jpld8o31G7fiv1X8cyNCWHF0NoQ7lm7DzuAJ0csGcU69hq1IZAV20VSv/Zfn1wztiTU8kzvPh4zd6B0LQ5Yq1mROrx3D6tZUnE1m8GpjD1oZFXOFSvDGSb9cLkwg3BVsBGiCwxu9RHGgtaIUwWQ0Wjwq8sM5bIYmKjflOp3jNV1S5hRUbZ4BpTq0G1W8fn/fsvd50Zxb0dj27jfOToXUa//CISDNGR/C+MetWFV3JMPLrnfNSFIuUdmp+/uG3Z5rZG/Tl9KjudxOe8fdGVmJeeF38vcrqSATiXc8X20790JfFnNkzyrt+sPWx4VVKZlQWq2mI73mKLmBvcMOeER/ynKxGTdPJkdwm8KW+MyxJM4QvVmEx5mDVPtwlvV7DJvQ1JYb5zaCGnTtmFKxc8qzKHcRd1D6BYDvb/cF6llNj/zrw2rhqMOj00DC5inuGC2hRIMTBTbIbJi7p5xKk0WULOKEu34LfxXzJvgdQkLhG7sK1hT0uCZEYkQXz3LLkwVk5JV0FVkOE6WRfqEKGsOZzB4wSOfB1Cnr4wYdBqzuYPqFa3Yu+YTMxYV2tgMaMICLBKyz+SBh8eN6ILK653TEozaD9hNO5biDcrcDLZmiypQjx+qzzzPWsy7RyDz5wHwDOQYwEzg1xvpa06O6HcdN8UO+UrJbEMMiRofsCQUBcYJJR5ikHyzm+YZQMFJr4lZyPSNVtX/KfFBm+EHGZYOMXkjp1+LbKlj22B3GLQ77e3ywKLbshdHDILnEwR/zKXDZaUG38BX6sAO72wqshOY0QmIzX626YhVVg3uusaiXC57jbX8J10dF8SJcaGN0PzjnzGTi2fdsOmxX3CfnsDz2u30qb/ptxABw4e3nL91ckci/jPHTmFl6IlCwea3oz8aUsG4H0Tq6tr3W7zsLVBq5FBasEOqi2LVcKxQJT6LojgwIn0p1ZQJNY2vdGgNUmPMY1syvlFwNYIIfvfREfK5mmFXAOscoYQgkC+diDMKZkvPfgOqJWjyON1vM/04hE97XptRdAE1CNKKRCr95bSHBedr5JTMKukiUh05Nv9CDJXzDutph6fLOVopA/du2jLBRpmgh4F1LOqO2idsG7Msa6vgaURZ81oiQvukOOimINZD1GoMC1yh5nbsM49w6m8UmPOHA5Cn3MejK2s+zyPysNWEQYkUFwhoJEHaAjeIEWIEZHUVBOT9B8Wj6dx3jeRhdO5LVN0mHAo3pHIBDuNA4BFg6XGKGf2S6kpRruGgGVAteEGa0NbuJh0FLW+P7rk7TBuukInlP8F1lpiGsWlByZz/xQFomQXn9ChWuGut6C580PdiIUV9P/pB7u/tujfuEE1GJX7sOGJovXyFW54Gr4QMBXGZNhuSObBo+n47jONhlejRx7kX9ux2PTlSQNULjjdn7QnyZznkcwfqiPr74sYavkkEjL+JbRFY+0f7Sg9/IRo87lIeVY5pndmrLAvCaPgatm3tMKEEYpWBZTBnSnfMUQ9aSt7eWPENYwxL/sFf9rQEHZBUsjHG/LoFrVGeIj79QOM+6WOZyvK2jycqGKbjpTybBwJdHL5oiDS7uUVd5Cu7HVAgUlrhTUC+Vw+OBfXDU6TRW0SILzdrv/iTCUohKbYcUH85jD3XiAttHUqwn2RG0GBrAvf1hmW4d/6TGaHXTuoAIe72MGekBOUWsdf7vS6DpsHizq4jmbTgxEyFVz5+Fq3XhR94TnrBZUFHM5Ixm2q20YTLSaWQNKF53om6Mf9rJ7LDh9OIjwHys5iY0XEh+MFXlgWfjlfc7bpReHyaC64kbUsNtqg5eKJEFDMJURuMQOvtvRkDr+iPAuX5868kYpxdoIUDksTP8nZRUGdtcqBnimV5vlVMC4KBdP8XzhMZERb3yIM3bVrowOaJqDRybGGXciC42HNxIF8zuKyGAoUyPd2HJCdaahBG7BvgFty510bNcudZqcGRsXvgJ6xtkkQKamKS0VrrBH2vZhVDFpx1t/IzJhyIhGBhq97nwjOTUuMpDMMMTeEek39Dszzqi5Cm749DQ3Kqd+Rw64+Q6/gzFuZK4fcM1hdWNasqO/cLEC39rpG4VaCLJiHuKVflhJADhGnghtpv8E/x5XruYI7GYWf1yn6Cf+Kp3Te/DpjgdU08P0IPdRkCPsa7U34690C0n4XSOo6M1qfSvyZxsnexRG1M7jd5pvaTwBMlZ01Zuin18qsxE7fwOSCYwyZt+UCS813zkTP8wIn3VUUOHTa4zqrgORXvvH+b3fdzrFKbkeFu26kZlrd5QwVSLe90j9XjecKTBrNX5V11ESydumd8eStlP/a3jGJu8/yBvsTmPaOwU3QIweYbFDACf1MKJEgp5J4xW+yvRLJ6O14HA6HnSZk8x9c2hH+NJHdNlB0+sHVtd3f1q9A8/F4Gn8EQgFkxagq5uCiIltK5dNAzv8RBfEikSvqVfSIuXnWEa/mHDHjmHLIyT2Ms82nSE93wbCOQCmh2zsljm0wl9/T+VYttpbDdTGgUH/QksChX2GAhEAfrfCsp6uM75mW20XxSg96wwGkbivIYhaloxSNfUYafrvsOVOoitvOIiSJ28YE7a4xpZmilWAlF9KH7eEu/8SeHxcxp2M3WapTzoNBrmoYyjbR/kgvSBrOoOd1fYWrKIUJsyts07sym88QqZmA/0dhH4qIH57FHFtBSu9aoO5ltjjIMUTq9a2yUprbUoRE541z1K9+dXWl4uYQciZW1ChagXyJaxGcHmWCwKgu9RZHeO2uZDKppeMjm/x76elUwdtvzp0GLY1OI79Vo98TcmK/rQOWZkcX+cVKb+VYagpXVrl5tgVXEaqeTwKbsrMjcg9rEEjrIP5HiLn0MglCbRsiB/GXydOBv5WTrrJbsC7DXeby1zte/ttMPZtuJqIjfe2rq8l+DsbZALb7cbgfWFYKlWuUGoejDxne8PsRY8+W4Mu13TxiXeMF4+yWN347zGNo5BSCcM1dst/tdis0HiHe5iSm2IUA9NNWRaqSBcpRS3EIVoGLPq/1Kups59/8E0Syuef2lk7cEkn8FUqigXeQgXbnhCV15WZ6DFoOzEigKbCHISKyWAZ7xnXvEVuhdgteXpEsX5qWhZ7myYCsrthsauVHGOwGVyunxgZcr/b335Q3iTmtvMOKy+QNQxEb9sHn4g9n7Ytb4A5J1zlhAQ2s9E1ZFKBbzhWlZxOdV7FnbujZoWjPHjx238WDLM1HfjUIPnrbZ4kYwSKVja+5MZdGETQu+0KVsL9RD3FQHOVaXyhUUdmX2Jy0XgbNNWObv/CtqPHpkmL38JY/3VQIiMOtQMV6ciRankMGXNzAUT/Jk1OmVALWSHx99lU10cm5k7MQHFXOSorLnq3e5xzvFFNSAZgZShVJxevujbMegsHTsnKFyOB+fDoZkwkqNzaxTvnDg6ForxJ1ovFHnViyrh9vm6tOvm8DeY9UxRH+OkYPJGl3L/bVsO7ESW1CHvF/OUS7pSqA48fdhXxMOot3EnubsOCsQxN/j1yP7lL1vP1Nx7eIUidceyL55HwDcNHVnIIQR3EVjkzrpq/nBnU0v9X5SYHiNsbhpWJHa0cl3z6QaFhhqzzJo8NMCT+LhT3Iw1S1HIChJ4MwZ2muuUh4yy3bL32eVqbCjOmpcs6AmwkgakaiwU7+NDpv04ary5+FlgNwqpzqJu6PBuU63oXB4unSJj1Qy1ma24XNzprRq7K9kKPdo5LEOpiYr45vmUUnzLv+YXFHlWlf8YUMcDyX/xXUP81SdUDZFZFVeFE3Wb8x0HoYh6OW0AJvC9JC1IK+sjlQvptgOq8NzReJRta/gjrB98Aq8iEgbsyNJ4K1nAFcVAkcz9SWYmby/9zvrC4iyn5iWZWeeT+tqq2eIXsyfGxfpCMUP/frfY597kS/6iuOjK1PACvTXRHrBAPkF4yKRPWAPjEC5vNI4qasmIU4aTOSXOPzD6ppyF6sk14my3qFXgo6JLfxlt0F0dDqkX6dqsFR5AWzlRbN/C7o+LTzDzSJx9ErIos/+bCEAQLnYsPb+EdgKrG5SAzshtJrUWmoahCjirY1eNUEzyTwJgtGorRDQIlCINKm74vHI4D6doJJsMkHYfgVOvw5lSjw4ae6z07hOGJL/6h09UqUcQSgt8M/xF0OGjNnsxa7A4qu70fsb7D/OKSiGQYChXqdllOmiMJu/pfSntllKl/qHpdktCK4VkzXJfu/r608+bDZo7GBOQ564o7gfeei4Zfw5Q4g/lyQFvjjfv5K/ghZeYzqONTPdOqijR07otBSXRFTFBvUq+A8wN8FsHojr3/CSMNeWJ3jUcF7npkyh4e0w2jUTA33zuGCcg/vzA/pqY0TN8x4ycGdyBdDJxQmZklgjlwwUTV0kJFEmonGVD9KY6hUjyZ9AVPFfB0ngtY+rVrpwILOLX6oxh8yLSiE0cnbK+YB8d50setvYinTQ0UWHm8j1bjxOsTtVck1qAVly2SYlUMruZeTeuIEN8YFMumk8pcCLd2XwfkYaqbfo0OUWXt83ioQpuyjFUbv7sK0ntpNHgqcU3uCtfRSlQz3FU6ZppXXWhSQcJl+iKDhCXiI6J5fgccPb+J+tWURRNWAXCZfXdH1x+8foFDrz+pIA2i+dh0+D4PdawIEaAqVfHx1uDEjyfvVxnzEtw0BigEOtp6bIrQDn7nq8X8sB58+pyv1+9y3ar1V0qX8jLS50wZxIjxSUah/a4MGro5Pe/Oy8W96tEyofEuoTXRLWc+AItzT+kOHpsWebAy/vOwd84KHVoHXiCVsxsTeRFk4S0FEuLOrg5VeJep1iI5sff+7CTBvtbWq11l8mRPv0+OxMI9SZjZcYLsrhjmJDK7wQQ9hzrz3K8yAEcdbcCJtlAXwmdJev/lQt8EgtiMAz8nB7FIGob1q1j1GSm4dGXiZVqDx5YHtwgJGnuWcPjjCTrMM9ydfXS4M7i1fbXpOkJuQLcZ8UgdEQG48fY0R1lBAe/iRwDXBHwNWX2YBYPDKHzpsSbtaOvPqD//YE3wLcA1HAq7SQB70ereL338kxupbV0HJn7KJWmQ8dlf6Jcprw9H1rT9uMbgFJmIdwa+D0wyTuN0BRLj6bmk4tymiFSC6/boHa4Lj0Iyj/R1GxyK0Sxs+y72HbdrjwAV6XKNZFP7PfxSBUjQCxU82Xz0JHRSIfmPsR0UsmdPRxjfhh59o4VAMtysBLGv+QTJbpB7e8WuRU5AULyVpNyVWQ1Om6nRYKWS+2KFVPd8fyiVUhOJJnG1oSFFNuKjpewBfZMUlIdW4S2nKScG6LNwW6UYiPmrDBvLKGto5257wTCsXmiHSFul4VcV3XRF49FsyO+XxxlO0D61CYprpaM+PWu7nck+TMLtpTRXlty20LjHV48GVQfz/WyVcaPpa2P7BhOrLEKHYJGI4tR96N6uyskHTwualUnqoC9n0UNWS/RfeLgEyUq/6+7v5lfCOW9daKJYiKSdEUvuDSRDMEX224qY4vh2V855Afle2GAFRFh+2A5XwRsBD0nkDtH98m6avzZ+2YkTe3DjBa8nK1yTcUPUSao1ZsVcv5Dc5ZaalIVLqOoJ0ilNsaMlWa7HpQaFqX7RL2/CP6CGGYSu8bSo1lncuCIjgn7l4lpQ96vF8XFn4AXj805OyC9yaim/vkth6CejqEVibBCeMD3yUagv1CPVQBeOMRRczatKVUWaRXi5z6rdOUQVSfTg2hHVoQanIXIEoZsHyLosZzLbpqN0w8LzO1hf8pne1gAQMAm3mjOnTgb1GkjO86g4+ZDOlWvkmMqNcQgaTmSMImAfiYjQdJVrukaeOSyS/zYBk7LTP91SueqhHPYNUfDWByVghRz6n/qEHFUecAWO5DppFQ7+beQFYouYq1siH1PBaOG3fnQ+VDDpusyndy0zjVMyANY1ZpFUtvLaD1ofrxx8k88t8/Hf7RJT8z+bctaOYp/2VTW667o/r87D1LEp6ug470rtDKhJMXM/5fZcoevCgv4gSN5kQOg4/auG93kkxUl0tbh8l9g3C3Kzn0Zubb6AVia47Kzp19IHW4u13cTMQ0mI/us5eIj3bepo3VUUYL+kRKNDKQuUFDEoPQrWulPGmvQeFsPe5K2kSujWPOt7dI9YePTvRbB5qmw6AwwzNIH0XgqIAyfvKj4x4eopGg9AV6syBeDH4bwle6X5CUuMaok/7G2J2JB2NSt+cAfiDjfDGE+qb5JExCIwmbmcp3XZdFD8S2bT7oUrmdgSfHEQnvUzvPg7khHX18aun5pJPRx5ofc9NGw5bglFLzvtkdoqbSoamEgmIJZ3cjV8UjE7r63jNd00n79BRt6KXlXo5AkEqqWmEeYznLqT7GFcvCHD+tBRaRwzhMFyr5VUSqhbsSH0PGmyYTFSILTpxiWO/p4fa55uCw8gl0UqTtvSGrZl6wlp6eVFjLIqUssSXfjHjlM5BXBXZk1JH8UUWYn41tbJQ4eTAmJ+ggoRNfiLnYn4YuruH0wfcOQSyLqGLDty+v6qTf7ZksRHG8fY7rzBHyiILoCwS9+xMftkRuP97uhPWAEuUmy0ifxbWLV1GO32x+JNXENE8wSic6QB0elajmgFWYx3MDJvpnVqze3KeLlEZ2o0jNZRQblhw2YnT7KoIXoNLOwu8xInZ1mBAdMDkQVPgZS0ha47YacgoGLN7wNHUNZ1zDrwIa4qzCgFr6tmPB0zcJ1OfO0JSFgpz/nX8QsRv9HWyHftLbJ3QPnCYJNCVn/ODCa9mBCAhv/n7C4jn671/7Opnh2xAwAYSk1AjHbacDu6fJQRKnedTWdq9/ujO9u2BahtezsA4P6ohISM5SA4dH0QmnDrFBtBlG1Ynp4OjHvUC4BiAfB+rG/FR3mekRgz4cvr2qe95XgPcSMLwzIUZKMQc+6Glw17YZdulcw1vSq2yWa4djbPKiKRTyi03ggR5RMmW4IqRUSrD54QsW9WAPrlHkdEiAKYQWMaRUNQ0Zdv0CRMvw4KFSdgYNIF6kFTLRWtr3j7+3LbkhTMkdAjyfHdAj+LxpRqFhQCx8owOzGC8GBWi2SYK6G2yuAPF2BH8il4ESZMf83tC6iX50Xm50+0OhJQ39IXb1asij+LH0FNm9pPf5T/uE9RcE4j5bltwn9p5gj4yHu/+68qFdOOjQSoPB/yYLyEnlDx9+CMW/371tjPGNzlU84sYVuCzC4WxogfCUu/wEmH10VFK12omGFMliVpVokSbUwMUep9YvN1QkArW1pFLhAe5NnSum3q2TvCI9fqvLpOxCrWS7dNbHRlv6+eiBf3KZ4Ntmuudy8oh6rMdEho9nVQXIyH2tWp5UJMEk0Q9lJ/68koPR6e/wbnSU/Httql3xDJCikugXwyMQBNTtLi1MB3vp1RTycKIT/pIC0SuDp/aS0ni+vn3WsuxKRDAjyDw2d+888/OwaFUupaaeDrnxwrE6BdS9FM7F5CBlZ7SxY8STCCQQUYKLHDdZDHkIJsC8KFujzjv1zIyTvks5Fq79kic6v+tz+HD5CRM6FDJn8y+evx0FfayjWz0kvLa3Ke5xxYuinD916IrKm5IZEqJRFArCv8F3VFTJsgEIvGsgWilWw/PCqumqFss1HRMpJsfQ12fpHa3wB58JIBq43TKXFUTWJ/xgbJkNpA6TWM8pA8IqAxAKMk5NQJDBVoTjHzVqpbtRjnGk21aN7QvyC6rS72HNK6/c2wbj4RbeNq84ve5yhKUHw48Uu35WrwXyVZMfnRG3qcsCc6nSX3REXUYc9cMwmxYxVYBRzqSym4Z7a7o/dHkrVf0JDFqXNFnxWB0HW7XViczWe2k3Y2G4CfrqxXp6KWr3F6Teq74U6G62x1mW1hh3HWHMdO8FogQbiy226H/YERQKOlWa08JeuuYat0A40psuCI5KGkrfmGsb9UcivSFgfuNfInvvi9rAehBaSwJ0XhHtzJk/B/wnAv+3kOcCs </div>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[随笔集]]></title>
      <url>/2016/11/25/%E9%9A%8F%E7%AC%94%E9%9B%86/</url>
      <content type="html"><![CDATA[<p>人生若只如初见，何事秋风悲画扇。大概经历得多了，便觉得多了一些偏见与执念。所以善始者繁，善终者却很少。于是初次见面的时候，彼此了解甚少，所以各自展现自己最好的一面，也各自接受对方最好的一面。在一个阶段刚踏足的时候，往往以昂然的心态去面对。时光匆匆，当我们失去了这个新鲜感，褪去了伊始靓丽的颜色，便开始感叹，人生，若能保持开始时的美好，该有多好。 <strong>– 开始的美好</strong></p>
<a id="more"></a>
<hr>
<p>小时候，我家住在一栋的三层楼房里，一楼是客厅和厨房，二楼则是卧室，三楼只有哥哥和大姐回来或者是客人来的时候才会整理出来，平时则是储物的地方。由于每层楼的摆设、结构基本一模一样，所以，每次我和二姐玩耍的时候，总要吐槽一下这个房子的设计。有一天，妈妈突然问我，“你觉得搬家怎么样？”，我一听，内心欢喜极了，心想着可以到新的地方玩了，于是我激动地回答道，“好啊好啊”。我记得妈妈当时那种强颜欢笑的感觉，只是在我们面前，依然笑靥如初。长大后回想起来，才知道，那次搬家，是后来颠沛流离与寄人篱下生活的开始。 <strong>– 关于搬家</strong></p>
<hr>
<p>初生牛犊的程序员在软件开发中总会遇到一些坎坷与牵绊，究其本质，可以归纳为不确定性。理想与现实总是存在差距的，这种差距也加大了不确定性。打个比方，你独立负责一个系统的设计，设计开起来堪称完美，心想着，这要是做完了，一定能大放异彩。于是，自以为完美地啪啦啪啦地开始代码实现了。慢慢地，你发现，有太多的地方设计不完善，对于敏捷的需求变动无法实现即时适应，对于系统的性能无法保证，对于系统的交互无法确定。总而言之，你开始忧虑起来，因为自己的设计渐渐产生负面的效应，你开始反思与怀疑自己的设计，你开始无法确定系统能否按照正常计划实现。<strong>–不确定性</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[软件开发原则]]></title>
      <url>/2016/11/24/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ol>
<li>代码规范</li>
<li>系统耦合</li>
<li>系统性能</li>
<li>数据完整</li>
<li>系统健壮</li>
<li>数据库设计</li>
<li>异常捕获与处理+日志记录</li>
<li>接口安全</li>
<li>系统兼容性(版本向下兼容，前端跨浏览器兼容)<br>A. 事务安全</li>
</ol>
<hr>
<h3 id="软件开发箴言"><a href="/2016/11/24/软件开发原则/#软件开发箴言" class="headerlink" title="软件开发箴言"></a>软件开发箴言</h3><ul>
<li>任何傻瓜都能写出计算机可以理解的代码。好的程序员能写出人能读懂的代码 —— Martin Fowler</li>
<li>简单不先于复杂，而是在复杂之后 —— Alan Perlis</li>
<li>Real developers ship —— Jeff Attwood</li>
<li>过去的33年里，我每天早上看着镜子问自己：“今天是我生命的最后一天吗？我是否要去做今天该做的事？”一天一天太多次 是“不是”，我知道这需要改变…所有的事情 —— 所有身外的期望，所有的骄傲，所有的对困难和失败的恐惧 —— 这些东西在死亡面前立刻消失的无影无踪，只剩下真正重要的东西。想着自己即将死去，这是让我避免落入担心失去什么的陷阱里的最好的方法。—— Steve Jobs</li>
</ul>
<h3 id="软件开发"><a href="/2016/11/24/软件开发原则/#软件开发" class="headerlink" title="软件开发"></a>软件开发</h3><ul>
<li>收到策划稿永远不要立马写代码实现，而是要对所有的需求进行分析和归纳，并抽象出整体业务体系和程序架构。</li>
<li>高内聚，低耦合。各自负责各自的事情，减少模块间耦合性。</li>
<li>异常检测机制与日志管理。规定好异常，作好异常捕获与处理工作，并对业务、框架等进行日志记录。这部分在脱离开发环境后极为有用。</li>
</ul>
<h3 id="身份认证"><a href="/2016/11/24/软件开发原则/#身份认证" class="headerlink" title="身份认证"></a>身份认证</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[试试Reids之基础知识]]></title>
      <url>/2016/11/21/%E8%AF%95%E8%AF%95Reids%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>本篇文章主要介绍了我在使用Redis过程中对Redis数据库的一些技术积累。</p>
<a id="more"></a>
<h3 id="PING"><a href="/2016/11/21/试试Reids之基础知识/#PING" class="headerlink" title="PING"></a>PING</h3><p>使用客户端向 Redis 服务器发送一个 PING ，如果服务器运作正常的话，会返回一个 PONG 。通常用于测试与服务器的连接是否仍然生效，或者用于测量延迟值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 客户端和服务器连接正常</div><div class="line">redis&gt; PING</div><div class="line">PONG</div><div class="line"># 客户端和服务器连接不正常(网络不正常或服务器未能正常运行)</div><div class="line">redis 127.0.0.1:6379&gt; PING</div><div class="line">Could not connect to Redis at 127.0.0.1:6379: Connection refused</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[试试Redis之环境搭建]]></title>
      <url>/2016/11/21/%E8%AF%95%E8%AF%95Redis%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>本篇文章主要介绍了如何在Windows下和Linux下安装Redis数据库。</p>
<a id="more"></a>
<h3 id="Windows下的安装"><a href="/2016/11/21/试试Redis之环境搭建/#Windows下的安装" class="headerlink" title="Windows下的安装"></a>Windows下的安装</h3><p>从<a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="external">Redis的Github仓库</a>上下载合适的安装包，一键安装即可。</p>
<h3 id="Linux下的安装"><a href="/2016/11/21/试试Redis之环境搭建/#Linux下的安装" class="headerlink" title="Linux下的安装"></a>Linux下的安装</h3><p>下载地址：<a href="http://redis.io/download，下载最新文档版本。" target="_blank" rel="external">http://redis.io/download，下载最新文档版本。</a></p>
<figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz</div><div class="line">$ tar xzf redis-2.8.17.tar.gz</div><div class="line">$ cd redis-2.8.17</div><div class="line">$ make</div></pre></td></tr></table></figure>
<p>make完后 redis-2.8.17目录下会出现编译后的redis服务程序redis-server,还有用于测试的客户端程序redis-cli,两个程序位于安装目录 src 目录下：<br>下面启动redis服务.</p>
<figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd src</div><div class="line">$ ./redis-server</div></pre></td></tr></table></figure>
<h3 id="密码验证"><a href="/2016/11/21/试试Redis之环境搭建/#密码验证" class="headerlink" title="密码验证"></a>密码验证</h3><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ config set requirepass your_password</div></pre></td></tr></table></figure>
<h3 id="安装Redis服务-Windows下"><a href="/2016/11/21/试试Redis之环境搭建/#安装Redis服务-Windows下" class="headerlink" title="安装Redis服务(Windows下)"></a>安装Redis服务(Windows下)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server --service-install redis.windows.conf --service-name yourname</div></pre></td></tr></table></figure>
<p>安装成功后可以看到类似于下面的提示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[2888] 01 Jan 16:36:21.883 <span class="comment"># Redis successfully installed as a service</span></div></pre></td></tr></table></figure>
<h3 id="启动和关闭服务"><a href="/2016/11/21/试试Redis之环境搭建/#启动和关闭服务" class="headerlink" title="启动和关闭服务"></a>启动和关闭服务</h3><p>通过Reids自带的reids-server启动和关闭服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">redis-server --service-start</div><div class="line">redis-server --service-stop</div></pre></td></tr></table></figure></p>
<p>通过Windows自带的命令提示行启动和关闭服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">net start redis</div><div class="line">net stop redis</div></pre></td></tr></table></figure>
<h3 id="卸载服务"><a href="/2016/11/21/试试Redis之环境搭建/#卸载服务" class="headerlink" title="卸载服务"></a>卸载服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server --service-uninstall</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WEB系统性能调优之路]]></title>
      <url>/2016/11/19/%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>之所以想总结这么一个点，是因为在开发过程中觉得一切正常的情况下，在压测中却出现了各种始料未及的情况。比如，高并发下的卡顿、大数据量下的查询缓慢等等。为什么会出现这种情况？原因有二：一是开发过程中没有注重数据库的性能调优，导致数据库性能不佳；二是开发过程中没有模拟并发下的情况，因为有一些情况只有并发访问下才会出现。以下是我在开发过程中使用的一些调优的方法，当然，也不一定合理。</p>
<a id="more"></a>
<h3 id="数据库瓶颈"><a href="/2016/11/19/网站性能调优总结/#数据库瓶颈" class="headerlink" title="数据库瓶颈"></a>数据库瓶颈</h3><p>一般我们说大数据量，那么什么情况才算是大数据量？100万算不算，1000万算不算？100万算不上大数据量，1000万也不一定算得上大数据量。当然，如果能够保证在越大的数据量下依然保持高度的顺畅，那自然是求之不得的。那么如果保持在上千万的数据量中，能够迅速的对数据进行聚合、查询和插入与修改呢？</p>
<ul>
<li><p><strong>首先，必然要使用索引</strong>。索引是什么？为什么能够提高数据库性能？索引本质上是一种哈希树的结构，通过哈希，能够将庞大的数据映射到一个范围较小的数据集合，这样就避免了数据库的全盘扫描。数据库扫描的数据量是觉得数据库性能的一大要素。所以，通过索引能够减少数据的检索，从而提高数据的操作速度。但是，索引不是越多越好，索引的创建需要额外的空间和时间进行维护。适当的建立索引才是正确之选。当然，不同的数据库的索引也是不一样的，索引的种类也是不同的。</p>
</li>
<li><p><strong>数据库结构的优化</strong>。数据库结构的优化对于聚集统计非常重要。一个良好的表结构（SQL数据概念）或者文档结构（NOSQL数据概念）非常重要。在NOSQL数据库中，嵌套的文档子字段和排序下无法使用会导致字文档中索引的失效，在数据量比较大的情况下会导致数据库的文档检索消耗过大，从而导致在数据库并发下访问缓慢的出现。</p>
</li>
<li><p><strong>数据库类型的选择</strong>。一是、关系型数据库与非关系型数据库的选择，磁盘数据库与内存数据库的选择。传统的SQL数据库，比如Oracle、MySQL以及SQL Server，都必须保证验证的数据表结构的设计，而MongoDB等文档型型数据库则没有这个要求，所有的数据结构逻辑由程序控制。另外一个就是MongoDB和Redis等NOSQL数据库采用的是内存式查询，相对于查询磁盘数据文件，这无疑提高了数据库的性能。当然，具体使用什么数据库，需要结合业务逻辑来选择。</p>
</li>
<li><p><strong>数据缓存</strong>。数据缓存在高并发下使用缓存是合适的。并发下的数据库连接太过频繁，会降低数据库的读写性能。使用缓存数据库，比如Redis，则可以减少数据库的连接次数，加快并发访问速度。</p>
</li>
</ul>
<h3 id="业务逻辑瓶颈"><a href="/2016/11/19/网站性能调优总结/#业务逻辑瓶颈" class="headerlink" title="业务逻辑瓶颈"></a>业务逻辑瓶颈</h3><ul>
<li><p><strong>第三方系统数据接入</strong>。在IIS中，使用WebClient实时获取第三方系统数据时，在并发访问下会导致耗时加长N倍。网上有种较为可靠的说法，在非服务器版本Windows中，IIS仍然遵循HTTP1.0的规则：一个客户端不允许同时超过连个并发的连接去访问其他的域。但是在服务器版本中则有20个还是几个并发的连接访问。个人感觉这是一个坑。所以建议在向第三方系统交互的时候，可以适当地使用缓存数据。</p>
</li>
<li><p><strong>自身代码重构与优化</strong>。自身代码需要保持良好的代码风格。避免Code Semll（Code Smell也称代码臭味，是指可能对可能导致潜在BUG的垃圾代码），比如减少不必要的循环，避免长类，长方法等等。从而提高系统的可维护性与可扩展性。最重要的是简洁的代码，可以减少系统出错的概率，减少程序运行的时间复杂度，提高效率。</p>
</li>
</ul>
<p>当然，笔者到目前为止，工作经验尚浅，可能这些方法也不一定合适。对于像什么分布式部署什么的，目前还未涉足，所以也无法总结这方面的知识。漫漫的取经路上，程序猿只能边走边积累！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[程序猿百宝箱(持续更新)]]></title>
      <url>/2016/11/19/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%99%BE%E5%AE%9D%E7%AE%B1-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<p>本篇博文收集了平时开发中会使用到的一些工具资源、网址、文章等。</p>
<a id="more"></a>
<h3 id="MongoDB"><a href="/2016/11/19/程序猿百宝箱-持续更新/#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="external">MongoDB菜鸟教程</a> | <a href="https://docs.mongodb.com/manual/" target="_blank" rel="external">MongoDB文档</a> | <a href="http://www.mongoing.com/" target="_blank" rel="external">MongoDB中文社区</a> | <a href="https://robomongo.org/" target="_blank" rel="external">RoboMongo</a></p>
<h3 id="Redis"><a href="/2016/11/19/程序猿百宝箱-持续更新/#Redis" class="headerlink" title="Redis"></a>Redis</h3><p><a href="https://github.com/MSOpenTech/redis/releases" target="_blank" rel="external">Redis Download</a> | <a href="http://www.runoob.com/redis/redis-intro.html" target="_blank" rel="external">Redis菜鸟教程</a> | <a href="https://redisdesktop.com/download" target="_blank" rel="external">Redis Desktop Manager</a> | <a href="http://gitbook.net/redis/redis_security.html" target="_blank" rel="external">Redis在线教程</a></p>
<h3 id="XAML"><a href="/2016/11/19/程序猿百宝箱-持续更新/#XAML" class="headerlink" title="XAML"></a>XAML</h3><p><a href="https://www.microsoft.com/zh-cn/store/p/xaml-ui-controls/9nblggh31bxt" target="_blank" rel="external">XAML UI Controls</a></p>
<h3 id="前端插件"><a href="/2016/11/19/程序猿百宝箱-持续更新/#前端插件" class="headerlink" title="前端插件"></a>前端插件</h3><p><a href="https://github.com/zeroclipboard/zeroclipboard" target="_blank" rel="external">ZeroClipboard</a> | <a href="http://echarts.baidu.com/examples.html" target="_blank" rel="external">Echarts3</a> | <a href="https://github.com/hustcc/ribbon.js" target="_blank" rel="external">Ribbon.js</a> | <a href="https://tiaanduplessis.github.io/wenk/" target="_blank" rel="external">Wenk.css</a> | <a href="http://www.raphaelfabeni.com.br/css-loader/" target="_blank" rel="external">Css Loader</a> | <a href="https://canvas-gauges.com/documentation/examples/" target="_blank" rel="external">Canvas Gauges</a> | <a href="http://cssicon.space/old/" target="_blank" rel="external">CSS Icon</a> | </p>
<h3 id="趣味资源"><a href="/2016/11/19/程序猿百宝箱-持续更新/#趣味资源" class="headerlink" title="趣味资源"></a>趣味资源</h3><p><a href="https://clustrmaps.com/profile/178id/widget/customize" target="_blank" rel="external">ClustrMaps</a> | <a href="http://fontawesome.io/icons/" target="_blank" rel="external">Fontawesome</a> | <a href="http://theblogstylist.com/resources/picmonkey/" target="_blank" rel="external">Theblogstyllist.com</a> | <a href="http://theblogstylist.com/resources/picmonkey/" target="_blank" rel="external">Crazy Egg</a> | <a href="https://www.revolvermaps.com/?target=setupgl" target="_blank" rel="external">Revolvermaps.com</a> | <a href="http://widgetdemo.edublogs.org/" target="_blank" rel="external">widgetdemo.edublogs.org</a> | <a href="http://100widgets.com/" target="_blank" rel="external">100.widgets.com</a> | <a href="http://www.dribbble.com" target="_blank" rel="external">Dribbble.com</a> | <a href="https://codepen.io/" target="_blank" rel="external">CodePen</a> | <a href="https://codemyui.com" target="_blank" rel="external">Code My UI</a></p>
<h3 id="调试工具"><a href="/2016/11/19/程序猿百宝箱-持续更新/#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><p><a href="https://www.telerik.com/download/fiddler" target="_blank" rel="external">Fidder</a> | <a href="https://www.getpostman.com/" target="_blank" rel="external">Postman</a></p>
<h3 id="性能测试"><a href="/2016/11/19/程序猿百宝箱-持续更新/#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p><a href="http://jmeter.apache.org/" target="_blank" rel="external">JMeter</a></p>
<h3 id="安全检测"><a href="/2016/11/19/程序猿百宝箱-持续更新/#安全检测" class="headerlink" title="安全检测"></a>安全检测</h3><p><a href="http://www.nstalker.com/products/editions/free/download/" target="_blank" rel="external">Nstalker</a> | <a href="http://www.jsons.cn/useragent/" target="_blank" rel="external">Jsons.cn</a> | <a href="http://www.91ri.org/16532.html" target="_blank" rel="external">BurpSuite</a></p>
<h3 id="在线工具"><a href="/2016/11/19/程序猿百宝箱-持续更新/#在线工具" class="headerlink" title="在线工具"></a>在线工具</h3><p><a href="http://html2jade.aaron-powell.com/" target="_blank" rel="external">Html to Jade</a> | <a href="https://1024tools.com/" target="_blank" rel="external">1024 Tool</a> | <a href="http://html2jade.vida.io/" target="_blank" rel="external">Html2Jade</a></p>
<h3 id="Google插件"><a href="/2016/11/19/程序猿百宝箱-持续更新/#Google插件" class="headerlink" title="Google插件"></a>Google插件</h3><p><a href="https://chrome.google.com/webstore/detail/momentum/laookkfknpbbblfpciffpaejjkokdgca?hl=zh-CN" target="_blank" rel="external">Momentum</a></p>
<h3 id="版本控制"><a href="/2016/11/19/程序猿百宝箱-持续更新/#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p><a href="https://git-scm.com/download/" target="_blank" rel="external">Git</a> | <a href="https://tortoisesvn.net/" target="_blank" rel="external">TortoiseSVN</a> | <a href="https://tortoisegit.org/" target="_blank" rel="external">TortoiseGit</a></p>
<h3 id="构建工具"><a href="/2016/11/19/程序猿百宝箱-持续更新/#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><p><a href="https://mvnrepository.com/" target="_blank" rel="external">MavenRepo</a> | <a href="https://gradle.org/" target="_blank" rel="external">Gradle</a></p>
<h3 id="Markdown"><a href="/2016/11/19/程序猿百宝箱-持续更新/#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p><a href="http://forthebadge.com/" target="_blank" rel="external">forthebadge.com</a></p>
<h3 id="技术书籍"><a href="/2016/11/19/程序猿百宝箱-持续更新/#技术书籍" class="headerlink" title="技术书籍"></a>技术书籍</h3><p><a href="https://linuxstory.org/free-chinese-programming-books/" target="_blank" rel="external">编程类开放书籍荟萃</a> | <a href="https://www.zhihu.com/question/38836382/answer/79794319" target="_blank" rel="external">GitHub 上有哪些值得推荐的开源电子书</a> | <a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="external">Github上免费的计算机编程类中文书籍</a> | <a href="http://www.imooc.com/article/1977" target="_blank" rel="external">慕课网总结:Github资源汇总</a></p>
<h3 id="在线产品"><a href="/2016/11/19/程序猿百宝箱-持续更新/#在线产品" class="headerlink" title="在线产品"></a>在线产品</h3><p><a href="http://www.kancloud.cn/" target="_blank" rel="external">在线文档创作-看云</a></p>
<h3 id="励志文章"><a href="/2016/11/19/程序猿百宝箱-持续更新/#励志文章" class="headerlink" title="励志文章"></a>励志文章</h3><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA%3D%3D&amp;mid=2650994277&amp;idx=1&amp;sn=f0d3c25d805503264a78ab5eeb29044d&amp;chksm=bdbf0e368ac88720da10e901457fdbee77a90a426c20a3b95316fcbc6c8ab7b1afbd55950ad3&amp;mpshare=1&amp;scene=1&amp;srcid=0929tHBCIJ0R71LdEDGf9Gc1" target="_blank" rel="external">《天天写「业务代码」，如何成为「技术大牛」？》</a><br><a href="http://blog.jobbole.com/97009/" target="_blank" rel="external">《15 位健在的牛叉程序员，你知道哪几位？》</a><br><a href="http://blog.qiniu.com/archives/5897" target="_blank" rel="external">《架构师成长之路》</a> |<br><a href="http://www.freebuf.com/vuls/120049.html" target="_blank" rel="external">《一个网站图标引发的血案！绕过同源策略，判断你是否登录了某网站》</a></p>
<h3 id="其他资源"><a href="/2016/11/19/程序猿百宝箱-持续更新/#其他资源" class="headerlink" title="其他资源"></a>其他资源</h3><p><a href="http://luckerme.com/archives/1835.html" target="_blank" rel="external">身份证编码算法</a> | <a href="http://apistore.baidu.com/astore/classificationservicelist.html?sortBy=accessCount&amp;isFree=1" target="_blank" rel="external">API集市</a> | <a href="http://www.zhidao91.com/donet-upload-image-validate/" target="_blank" rel="external">文件类型检测</a> | <a href="http://www.cmd5.com/b.aspx" target="_blank" rel="external">MD5破解</a> | <a href="http://stackoverflow.com/questions/4744105/parse-and-execute-js-by-c-sharp" target="_blank" rel="external">C#执行JS代码</a></p>
<h3 id="其他有趣的事情"><a href="/2016/11/19/程序猿百宝箱-持续更新/#其他有趣的事情" class="headerlink" title="其他有趣的事情"></a>其他有趣的事情</h3><p><a href="https://www.google.com/chrome/browser/desktop/index.html?system=1&amp;standalone=true" target="_blank" rel="external">如何下载Google离线安装包</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[玩转MongoDB之备份与恢复]]></title>
      <url>/2016/11/15/%E7%8E%A9%E8%BD%ACMongoDB%E4%B9%8B%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
      <content type="html"><![CDATA[<p>在Mongodb中我们使用mongodump命令来备份MongoDB数据，这个命令可以导出所有数据到指定目录中，并将所有的索引信息一并导出到文件中。另外，MongoDB提供了mongoexport和mongoimport工具，但是这两个工具只是导出文档，而不导出相应的索引等其他信息。</p>
<h3 id="mongodump工具"><a href="/2016/11/15/玩转MongoDB之备份与恢复/#mongodump工具" class="headerlink" title="mongodump工具"></a>mongodump工具</h3><p>使用mongodump工具导出的数据具备文档数据和索引数据。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongodump -u username -p password -o outputDirectory <span class="_">-d</span> databaseName -h host</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-h</td>
<td>MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</td>
</tr>
<tr>
<td>-d</td>
<td>需要备份的数据库实例，例如：test</td>
</tr>
<tr>
<td>-o</td>
<td>备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</td>
</tr>
<tr>
<td>-u</td>
<td>用户名</td>
</tr>
<tr>
<td>-p</td>
<td>密码</td>
</tr>
<tr>
<td>-port</td>
<td>端口号</td>
</tr>
</tbody>
</table>
<h3 id="mongorestore工具"><a href="/2016/11/15/玩转MongoDB之备份与恢复/#mongorestore工具" class="headerlink" title="mongorestore工具"></a>mongorestore工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongorestore backupPath -u username -p password -h host <span class="_">-d</span> database</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-h</td>
<td>MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</td>
</tr>
<tr>
<td>-d</td>
<td>需要备份的数据库实例，例如：test</td>
</tr>
<tr>
<td>-u</td>
<td>用户名</td>
</tr>
<tr>
<td>-p</td>
<td>密码</td>
</tr>
<tr>
<td>-port</td>
<td>端口号</td>
</tr>
<tr>
<td>–drop</td>
<td>先删除原有数据，然后在导入备份的数据</td>
</tr>
<tr>
<td>–directoryperdb</td>
<td>MongoDB 3.x版本不再支持该参数</td>
</tr>
</tbody>
</table>
<h3 id="mongoexport工具"><a href="/2016/11/15/玩转MongoDB之备份与恢复/#mongoexport工具" class="headerlink" title="mongoexport工具"></a>mongoexport工具</h3><p>mongoexport工具只是导出数据，不会导出相应的索引信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoexport <span class="_">-d</span> database -c collections -o outputPath -u username -p password</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>库名</td>
</tr>
<tr>
<td>-c</td>
<td>表名</td>
</tr>
<tr>
<td>-f</td>
<td>field1,field2…列名</td>
</tr>
<tr>
<td>-q</td>
<td>查询条件</td>
</tr>
<tr>
<td>-o</td>
<td>导出的文件名</td>
</tr>
<tr>
<td>–type=csv</td>
<td>导出csv格式(便于和传统数据库交换数据)</td>
</tr>
</tbody>
</table>
<h3 id="mongoimport工具"><a href="/2016/11/15/玩转MongoDB之备份与恢复/#mongoimport工具" class="headerlink" title="mongoimport工具"></a>mongoimport工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongoimport <span class="_">-d</span> <span class="built_in">test</span> -c goods_csv --type csv <span class="_">-f</span> goods_id,goods_name --file ./goodsall.csv</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>库名</td>
</tr>
<tr>
<td>-c</td>
<td>表名</td>
</tr>
<tr>
<td>–type</td>
<td>csv/json(不存在自己创建)</td>
</tr>
<tr>
<td>-file</td>
<td>备份路径</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[玩转MongoDB之权限控制]]></title>
      <url>/2016/11/15/%E7%8E%A9%E8%BD%ACMongoDB%E4%B9%8B%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>在MongoDB中，刚开始安装时是不存在任何用户的，也就是说，是不需要进行安全验证就可以操作数据库中的所有操作。很明显存在一些安全问题，所以需要在安装完成后为MongoDB添加安全验证。MongoDB的权限控制是跟着数据库走的，在创建了一个全局管理员后启用验证模式，然后在各个指定的数据库下创建相应的用户即可。</p>
<a id="more"></a>
<h3 id="权限初始化设置"><a href="/2016/11/15/玩转MongoDB之权限控制/#权限初始化设置" class="headerlink" title="权限初始化设置"></a>权限初始化设置</h3><p>(1)在初始情况下访问数据库，启动数据库</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --dbpath yourDbPath</div></pre></td></tr></table></figure>
<p>(2)连接到MongoDB，创建系统管理员账号</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mongo</div><div class="line">use admin</div><div class="line">db.createUser(&#123;<span class="string">"user"</span>:<span class="string">"root"</span>,<span class="string">"pwd"</span>:<span class="string">"123456"</span>,<span class="string">"roles"</span>:[<span class="string">"root"</span>]&#125;);</div></pre></td></tr></table></figure>
<p>(3)重启数据库，加入安全验证参数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --dbpath yourDbPath --auth</div></pre></td></tr></table></figure>
<p>(4)验证权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.auth(<span class="string">"username"</span>,<span class="string">"password"</span>);</div></pre></td></tr></table></figure>
<h3 id="添加用户"><a href="/2016/11/15/玩转MongoDB之权限控制/#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>MongoDB3.0之前版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.addUser(username,password,isReadOnly);</div></pre></td></tr></table></figure>
<p>MongoDB3.0+</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.createUser(&#123;<span class="string">"user"</span>:<span class="string">"username"</span>,<span class="string">"pwd"</span>:<span class="string">"password"</span>,<span class="string">"roles"</span>:[<span class="string">"readWrite"</span>,<span class="string">"dbAdmin"</span>]&#125;)</div></pre></td></tr></table></figure>
<p>关于角色字段，可以用一个空数组给新用户设定空角色，也可以指定内置角色和用户定义的角色。</p>
<table>
<thead>
<tr>
<th>角色名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Read</td>
<td>允许用户读取指定的数据库</td>
</tr>
<tr>
<td>readWrite</td>
<td>允许用户读写指定的数据库</td>
</tr>
<tr>
<td>dbAdmin</td>
<td>允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</td>
</tr>
<tr>
<td>userAdmin</td>
<td>允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</td>
</tr>
<tr>
<td>clusterAdmin</td>
<td>只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限</td>
</tr>
<tr>
<td>readAnyDatabase</td>
<td>只在admin数据库中可用，赋予用户所有数据库的读权限</td>
</tr>
<tr>
<td>readWriteAnyDatabase</td>
<td>只在admin数据库中可用，赋予用户所有数据库的读写权限</td>
</tr>
<tr>
<td>userAdminAnyDatabase</td>
<td>只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</td>
</tr>
<tr>
<td>dbAdminAnyDatabase</td>
<td>只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限</td>
</tr>
<tr>
<td>root</td>
<td>只在admin数据库中可用。超级账号，超级权限</td>
</tr>
</tbody>
</table>
<h3 id="为指定数据库添加指定管理用户"><a href="/2016/11/15/玩转MongoDB之权限控制/#为指定数据库添加指定管理用户" class="headerlink" title="为指定数据库添加指定管理用户"></a>为指定数据库添加指定管理用户</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">use testUser</div><div class="line">db.createUser(&#123;</div><div class="line">  "user":"testUser",</div><div class="line">  "pwd":"123456",</div><div class="line">  "roles":[</div><div class="line">    &#123;</div><div class="line">      "user":"testUser",</div><div class="line">      "db":"testUser"</div><div class="line">    &#125;</div><div class="line">  ]  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[玩转MongoDB之安装与配置]]></title>
      <url>/2016/11/15/%E7%8E%A9%E8%BD%ACMongoDB%E4%B9%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>本篇文章介绍了如何在Windows上安装并配置MongoDB。MongoDB主要提供了MSI安装包和编译好的二进制文件，对于MSI安装包，只是通过安装程序将对应的数据拷贝到响应的目录，而对于二进制文件，则需要手动解压到安装目录。</p>
<a id="more"></a>
<h3 id="Step01-安装包的下载"><a href="/2016/11/15/玩转MongoDB之安装与配置/#Step01-安装包的下载" class="headerlink" title="Step01:安装包的下载"></a>Step01:安装包的下载</h3><p>MongoDB的安装包可以通过<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="external">官网</a>进行下载。MongoDB在Windows中提供msi和binary两种方式。本文介绍如果通过二进制文件方式进行安装与配置。<br>在这里选择对应的数据库版本并下载。</p>
<h3 id="Step02-解压到安装目录"><a href="/2016/11/15/玩转MongoDB之安装与配置/#Step02-解压到安装目录" class="headerlink" title="Step02:解压到安装目录"></a>Step02:解压到安装目录</h3><p>将刚下载后的安装包解压到需要的安装目录即可。对于下载MSI安装包来说，只需要选择对应的安装路径即可。</p>
<h3 id="Step03-设置系统环境变量"><a href="/2016/11/15/玩转MongoDB之安装与配置/#Step03-设置系统环境变量" class="headerlink" title="Step03:设置系统环境变量"></a>Step03:设置系统环境变量</h3><p>为了方便以后在CMD中能在任意目录下管理使用MongDB的工具集，需要在系统环境变量Path中添加安装目录中的bin目录，设置后后在新的CMD实例中进行验证。</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo <span class="comment">--version</span></div></pre></td></tr></table></figure>
<h3 id="Step03-创建数据库存储目录"><a href="/2016/11/15/玩转MongoDB之安装与配置/#Step03-创建数据库存储目录" class="headerlink" title="Step03:创建数据库存储目录"></a>Step03:创建数据库存储目录</h3><p>对于新安装的MongoDB，需要创建一个目录来存储数据。</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">md D:<span class="symbol">\D</span>atabase<span class="symbol">\M</span>ongoData</div></pre></td></tr></table></figure>
<h3 id="Step04-创建数据库日志目录"><a href="/2016/11/15/玩转MongoDB之安装与配置/#Step04-创建数据库日志目录" class="headerlink" title="Step04:创建数据库日志目录"></a>Step04:创建数据库日志目录</h3><p>需要指定一个目录作为MongoDB的日志存放目录</p>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">md D:<span class="symbol">\D</span>atabase<span class="symbol">\M</span>ongoLog</div></pre></td></tr></table></figure>
<h3 id="Step05-创建配置文件"><a href="/2016/11/15/玩转MongoDB之安装与配置/#Step05-创建配置文件" class="headerlink" title="Step05:创建配置文件"></a>Step05:创建配置文件</h3><p>为了避免每次启动的时候都需要指定对应的数据库存储目录、数据库日志目录，我们可以将这些信息写入到配置文件中，方便以后的管理。</p>
<p>在MongoDB2.6以上的版本，配置文件的语法为YML格式，基本的配置如下：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">systemLog:</span></div><div class="line"><span class="attr">  destination:</span> file</div><div class="line"><span class="attr">  path:</span> d:\Database\MongoLog\mongo.log</div><div class="line"><span class="attr">storage:</span></div><div class="line"><span class="attr">  dbPath:</span> d:\Database\MongoData</div></pre></td></tr></table></figure>
<p>将文件保存为config.conf</p>
<h3 id="Step06-安装MongoDB服务"><a href="/2016/11/15/玩转MongoDB之安装与配置/#Step06-安装MongoDB服务" class="headerlink" title="Step06:安装MongoDB服务"></a>Step06:安装MongoDB服务</h3><p>在Windows中，通过使用MongoDB提供的mongod工具来安装MongoDB服务。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --config D:\Database\MongoConfig\config.conf --install</div></pre></td></tr></table></figure>
<h3 id="Step07-启动MongDB服务"><a href="/2016/11/15/玩转MongoDB之安装与配置/#Step07-启动MongDB服务" class="headerlink" title="Step07:启动MongDB服务"></a>Step07:启动MongDB服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net start MongoDB</div></pre></td></tr></table></figure>
<h3 id="Step08-测试数据库连接"><a href="/2016/11/15/玩转MongoDB之安装与配置/#Step08-测试数据库连接" class="headerlink" title="Step08: 测试数据库连接"></a>Step08: 测试数据库连接</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo</div></pre></td></tr></table></figure>
<h3 id="MongoDB的Windows服务安装和卸载"><a href="/2016/11/15/玩转MongoDB之安装与配置/#MongoDB的Windows服务安装和卸载" class="headerlink" title="MongoDB的Windows服务安装和卸载"></a>MongoDB的Windows服务安装和卸载</h3><p><strong>指定具体参数创建服务</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod -dbpath yourPath -logpath yourPath --install --serviceName yourServiceName --auth</div></pre></td></tr></table></figure>
<p><strong>指定服务名删除服务</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --remove --serviceName yourServiceName</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IIS .woff字体文件404的解决方法]]></title>
      <url>/2016/11/14/IIS-woff%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6404%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>最近在开发中遇到了一个很奇妙的问题。项目前端使用的框架中包含了一些字体文件，这些字体文件在浏览器中的GET请求返回了404错误。404是Http状态码中最常见的一个，代表着无法找到对应的资源。但是，请求的链接是正确的，在F12调试中也可以连接到对应的文件，那么，IIS为什么会返回404呢?</p>
<a id="more"></a>
<p>经过一番探索，发现在IIS中，默认中是没有配置woff字体文件的相关静态资源的。也就是说，.woff文件是没有MIME-TYPE的，所以导致无法将对应的静态资源映射到对应的资源目录。<br>在这里给大家分享一个快速的解决方式，就是为对应的字体文件添加MIME-Type。</p>
<figure class="highlight xml"><figcaption><span>web.config</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">remove</span> <span class="attr">fileExtension</span>=<span class="string">".woff"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">".woff"</span> <span class="attr">mimeType</span>=<span class="string">"application/x-font-woff"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个解决方法是从<a href="http://ideasof.andersaberg.com/development/quick-fix-iis-woff-font-file-404-not-found-in-aspnet-mvc" target="_blank" rel="external">这里</a>发现的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[菜鸟玩Git之SSH公钥]]></title>
      <url>/2016/11/04/%E8%8F%9C%E9%B8%9F%E7%8E%A9Git%E4%B9%8BSSH%E5%85%AC%E9%92%A5/</url>
      <content type="html"><![CDATA[<p>菜鸟在玩GIT的时候，最开始纠结的就是需要在命令行下，像在LINUX中敲打代码进行提交等操作。这对于熟悉WINDOWS的小伙伴来说，是需要一段时间来适应的。本篇文章，从菜鸟的角度对GIT仓库权限进行配置SSH公钥进行介绍。</p>
<a id="more"></a>
<h4 id="首先，什么是SSH协议"><a href="/2016/11/04/菜鸟玩Git之SSH公钥/#首先，什么是SSH协议" class="headerlink" title="首先，什么是SSH协议"></a>首先，什么是SSH协议</h4><p>SSH是Secure Shell的缩写，由IETF(Network Working Group)制定。SSH是一种作用在应用层和传输层上的安全协议，为计算机上的Shell提供安全的传输和使用环境。<br>SSH专门为远程登录会话和其他网络服务提供安全性的协议。</p>
<h4 id="SSH的安全验证"><a href="/2016/11/04/菜鸟玩Git之SSH公钥/#SSH的安全验证" class="headerlink" title="SSH的安全验证"></a>SSH的安全验证</h4><p>1、对于客户端来说，SSH有两种级别的安全验证。</p>
<h5 id="1-基于密码的安全验证"><a href="/2016/11/04/菜鸟玩Git之SSH公钥/#1-基于密码的安全验证" class="headerlink" title="(1)基于密码的安全验证"></a>(1)基于密码的安全验证</h5><p>使用账号和密码登录到远程主机，传输数据被加密，但是，可能有别的服务器冒充真正的服务器，存在安全隐患。</p>
<h5 id="2-基于密钥的安全验证"><a href="/2016/11/04/菜鸟玩Git之SSH公钥/#2-基于密钥的安全验证" class="headerlink" title="(2)基于密钥的安全验证"></a>(2)基于密钥的安全验证</h5><p>本地创建一对密钥，把公钥放在服务器上。客户端向服务端发送请求时，使用本地的密钥进行验证。服务器接收到请求时，在服务器上用户根目录下寻找公钥，将客户端发送过来的公钥进行比较。如果一致，则通过验证。</p>
<h4 id="Git生成公钥"><a href="/2016/11/04/菜鸟玩Git之SSH公钥/#Git生成公钥" class="headerlink" title="Git生成公钥"></a>Git生成公钥</h4><h5 id="Step-1-检查本地是否有公钥："><a href="/2016/11/04/菜鸟玩Git之SSH公钥/#Step-1-检查本地是否有公钥：" class="headerlink" title="Step 1: 检查本地是否有公钥："></a>Step 1: 检查本地是否有公钥：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.ssh</div><div class="line">$ ls</div></pre></td></tr></table></figure>
<p>如果上述目录下没有文件，则表明这台机器上还没有存储过任何SSH密钥。在Windows中，密钥的存放目录在系统盘的用户目录下。</p>
<h5 id="Step-2：创建SSH密钥"><a href="/2016/11/04/菜鸟玩Git之SSH公钥/#Step-2：创建SSH密钥" class="headerlink" title="Step 2：创建SSH密钥"></a>Step 2：创建SSH密钥</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen</div><div class="line"></div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/schacon/.ssh/id_rsa):</div><div class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</div><div class="line">Enter same passphrase again:</div><div class="line">Your identification has been saved <span class="keyword">in</span> /Users/schacon/.ssh/id_rsa.</div><div class="line">Your public key has been saved <span class="keyword">in</span> /Users/schacon/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local</div></pre></td></tr></table></figure>
<p>这个过程会提示你要保存的密钥文件名，可选，默认在根目录下.ssh文件夹下。同时提示是否输入验证密码，输入后，在连接的时候需要输入设定好的密码。</p>
<h5 id="Step-3：将生成的公钥文件存储在服务器上。"><a href="/2016/11/04/菜鸟玩Git之SSH公钥/#Step-3：将生成的公钥文件存储在服务器上。" class="headerlink" title="Step 3：将生成的公钥文件存储在服务器上。"></a>Step 3：将生成的公钥文件存储在服务器上。</h5><p>在github上，则可以通过添加仓库的<strong>Deploy keys</strong>来验证提交权限。</p>
<p>参考连接：<a href="https://git-scm.com/" target="_blank" rel="external">https://git-scm.com/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[REST API拾荒记（一）]]></title>
      <url>/2016/11/02/RESTful-Web-APIs-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<style>
#banner{
   width:100%;
   height:30px;
   background: #666666;
   color:white;
   font-family: "微软雅黑","黑体",serif;
   line-height:30px;
   text-align:center;
   font-size:20px;
   border-radius:5px;
}
</style>

<p>“You Type It, We Post It.”，这句广告牌的标志是我在阅读《RESTful Web APIs》看到的第一个场景，自然而然地展开了对服务端和客户端的通信方式的阐述。这本书很好，很多之前觉得似懂非懂的概念在阅读完后都有了新的理解。在此，一边阅读，一边总结，也不失为一件趣事…</p>
<a id="more"></a>
<h4 id="服务器上的资源（Resource）"><a href="/2016/11/02/RESTful-Web-APIs-学习总结/#服务器上的资源（Resource）" class="headerlink" title="服务器上的资源（Resource）"></a>服务器上的资源（Resource）</h4><p>浏览器向服务端发送的请求都是通过URL传递的。每一个URL更像是一个唯一标识的“地址”。通过这个“地址”找到相应的服务器，由服务器进行处理。在服务器处理完成后都会返回一个HTML文档、或者JSON数据等等其他格式的数据。我们将这些数据定义为资源的描述（Representation of resource）。而通过URL定位的事物，即是资源。</p>
<h4 id="无状态性（Statelessness）"><a href="/2016/11/02/RESTful-Web-APIs-学习总结/#无状态性（Statelessness）" class="headerlink" title="无状态性（Statelessness）"></a>无状态性（Statelessness）</h4><p>服务器端不关心客户端的状态。在一次HTTP会话中，服务端只处理客户端发送过来的单次请求，而在空闲时服务端并不清楚客户端的状态。有时为了表述登录状态，则需在每次会话中都携带cookie信息，或者直接在服务端保存状态(Session)。</p>
<h4 id="客户端操作资源的方法"><a href="/2016/11/02/RESTful-Web-APIs-学习总结/#客户端操作资源的方法" class="headerlink" title="客户端操作资源的方法"></a>客户端操作资源的方法</h4><p>HTTP标准（RFC 2016）定义了8种客户端操作资源的方法。他们分别是：GET，POST，PUT，DISPATCH，DELETE，HEAD，OPTIONS。</p>
<h4 id="HTTP状态码"><a href="/2016/11/02/RESTful-Web-APIs-学习总结/#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h4><p>详见本博客中的HTTP标签下的相关文章</p>
<h4 id="HTTP响应内容（Http-Response）"><a href="/2016/11/02/RESTful-Web-APIs-学习总结/#HTTP响应内容（Http-Response）" class="headerlink" title="HTTP响应内容（Http Response）"></a>HTTP响应内容（Http Response）</h4><p>一个HTTP请求响应后可以得到下面这三个部分的内容：</p>
<table>
<thead>
<tr>
<th>响应内容</th>
<th>术语</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>状态码(响应码)</td>
<td>Status Code</td>
<td>简要说明了请求的进展情况</td>
</tr>
<tr>
<td>实体消息</td>
<td>Entity Body</td>
<td>采用某种数据格式书写的文档，并且预期是可以被客户端所理解的</td>
</tr>
<tr>
<td>响应头</td>
<td>Content Type</td>
<td>向客户端说明如何去解析实体消息</td>
</tr>
</tbody>
</table>
<p>看到这里，让我很自然地想起，平时发出一个异步的post请求，总是要以某个格式来解析得到的内容。比如在JQuery的AJAX请求中，只有状态码为200的时候才会进入到success方法，否则进入到error方法。在后端中，我们有时会设置HTTP Response的Content-Type属性，这样，客户端只有按照这个指定的属性解析内容，才能正确地获取服务端返还的数据。也就是说，服务端设置了响应格式，比如JSON，那么客户端就必须以JSON格式去解析响应实体。</p>
<h4 id="REST"><a href="/2016/11/02/RESTful-Web-APIs-学习总结/#REST" class="headerlink" title="REST"></a>REST</h4><p>Represantation State Transfer 表现层状态转换。REST不是一种具体的协议、框架。它仅仅只是一种约束，一种风格或者说是一种设计的架构。</p>
<h4 id="HTTP协议语义（Protocol-Semantics）"><a href="/2016/11/02/RESTful-Web-APIs-学习总结/#HTTP协议语义（Protocol-Semantics）" class="headerlink" title="HTTP协议语义（Protocol Semantics）"></a>HTTP协议语义（Protocol Semantics）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>获取某个资源</td>
</tr>
<tr>
<td>DELETE</td>
<td>销毁一个资源</td>
</tr>
<tr>
<td>POST</td>
<td>在当前资源的下一级创建新的资源</td>
</tr>
<tr>
<td>PUT</td>
<td>替换当前的状态</td>
</tr>
<tr>
<td>HEAD</td>
<td>获取服务器发送过来的报头信息</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>获取这个资源所能响应的HTTP方法列表</td>
</tr>
<tr>
<td>PATCH</td>
<td>修改资源的部分状态</td>
</tr>
<tr>
<td>LINK</td>
<td>将其他资源连接到当前资源</td>
</tr>
<tr>
<td>UNLINK</td>
<td>销毁当前资源和其他资源的连接关系</td>
</tr>
</tbody>
</table>
<ul>
<li>GET方法只用于获取数据，不能更改资源的状态。</li>
<li>DELETE方法用于删除某个资源。</li>
<li>PUT方法用于更新一整个资源。</li>
<li>PATCH方法用于只更新资源的部分状态。在数据量比较大，而更改部分比较少的时候适用。</li>
</ul>
<h4 id="幂等性（Idempotence）"><a href="/2016/11/02/RESTful-Web-APIs-学习总结/#幂等性（Idempotence）" class="headerlink" title="幂等性（Idempotence）"></a>幂等性（Idempotence）</h4><p>发送多次请求对资源状态的影响和只发送一次请求的影响是一样的。</p>
<h4 id="POST重载（Overloaded-Post）"><a href="/2016/11/02/RESTful-Web-APIs-学习总结/#POST重载（Overloaded-Post）" class="headerlink" title="POST重载（Overloaded Post）"></a>POST重载（Overloaded Post）</h4><p>在实际的项目中很少看见GET,POST之外的HTTP动词语义。因为很大程度上适用POST解决了各式各样的语义需求。在POST中，应用程序自己设定语义，进行各种资源的增删改工作。一个重载后的POST请求不再具有协议上的语义，而只能从应用程序的层面上去了解其语义。所以，协议语义不是必须的，得根据自己的实际情况而定。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Summary For The Mythical Man-Month]]></title>
      <url>/2016/10/31/Summary-For-The-Mythical-Man-Month/</url>
      <content type="html"><![CDATA[<p>You can see the results clearly in many object-oriented modeling description. Often they are accompanied by fine wolds about modeling the real world. But when you look closely you can see that they are really descriptions of programming objects, pure and simple. Any similarity to real-world objects, living or dead, is purely coincidental…</p>
<a id="more"></a>
<h4 id="Two-ways-for-turnning-Program-into-Programming-Product"><a href="/2016/10/31/Summary-For-The-Mythical-Man-Month/#Two-ways-for-turnning-Program-into-Programming-Product" class="headerlink" title="Two ways for turnning Program into Programming Product"></a>Two ways for turnning Program into Programming Product</h4><p>There are two ways to turn Program into Programing Produce. One is by Interface &amp; system integration and the other one is by writing documents, testing, and maintenance. But both of them cost at least 3 times then the program cost.</p>
<h4 id="Why-programmers-feel-that-programming-is-interesting"><a href="/2016/10/31/Summary-For-The-Mythical-Man-Month/#Why-programmers-feel-that-programming-is-interesting" class="headerlink" title="Why programmers feel that programming is interesting"></a>Why programmers feel that programming is interesting</h4><ul>
<li>It’s interesting to create new thing. All your codes is new and it’s exciting.</li>
<li>Programmers are creating something useful    for others.</li>
<li>Can ontinuous learing of knowledge in programming.</li>
</ul>
<h4 id="Why-programmers-feel-sad-sometimes"><a href="/2016/10/31/Summary-For-The-Mythical-Man-Month/#Why-programmers-feel-sad-sometimes" class="headerlink" title="Why programmers feel sad sometimes"></a>Why programmers feel sad sometimes</h4><ul>
<li>Have the perfect goal, but can’t reach it.</li>
<li>Developing plans are designed by others and they can’t controll it.</li>
<li>Too many bugs to fix. And may feel tired sometimes.</li>
<li>Bad code, bad thrid-part system and bad architetues.</li>
</ul>
<blockquote>
<p>Good cooking takes time. If you are made to wait, it is to serve you better, and to please you.</p>
</blockquote>
<p>It means we need more time to finish our job.</p>
<h4 id="Why-the-project-was-delayed"><a href="/2016/10/31/Summary-For-The-Mythical-Man-Month/#Why-the-project-was-delayed" class="headerlink" title="Why the project was delayed"></a>Why the project was delayed</h4><ul>
<li>We assume that everything works well. So no bugs delay our job. But it’s wrong.</li>
<li>We confuse progress and work wrongly.</li>
<li>Lack of confidence in their estimates.</li>
<li>Lack of progress tracking.</li>
</ul>
<h4 id="Man-Month"><a href="/2016/10/31/Summary-For-The-Mythical-Man-Month/#Man-Month" class="headerlink" title="Man-Month"></a>Man-Month</h4><p>One person’s working time for a month, or the equivalent, used as a measure of how much work or labor is required or consumed to perform some task.</p>
<p>For simple works, it’s possible to arrange linearly. But for complex business logic, even if more people join the team, can not develope in parallel.</p>
<h4 id="The-law-of-Brooks"><a href="/2016/10/31/Summary-For-The-Mythical-Man-Month/#The-law-of-Brooks" class="headerlink" title="The law of Brooks"></a>The law of Brooks</h4><blockquote>
<p>Adding manpower to a late software project makes it later.</p>
</blockquote>
<h4 id="About-efficiency-amp-manpower"><a href="/2016/10/31/Summary-For-The-Mythical-Man-Month/#About-efficiency-amp-manpower" class="headerlink" title="About efficiency &amp; manpower"></a>About efficiency &amp; manpower</h4><p>Both of manpower and efficiency are required when developing a large software system.</p>
<h4 id="Three-Phases"><a href="/2016/10/31/Summary-For-The-Mythical-Man-Month/#Three-Phases" class="headerlink" title="Three Phases"></a>Three Phases</h4><p>There are three distinct phases: architecture, implementation and realization.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[The Hexo Guide For Hummingbird]]></title>
      <url>/2016/10/30/The-Hexo-Guide-For-Hummingbird/</url>
      <content type="html"><![CDATA[<p>This article describes how I created this site step by step. It’s fun to customize your own UI styles &amp; features. For a good visual experience, you must have sufficient knowledge of frontend, such as CSS, JS and so on. So now let’s begin.</p>
<a id="more"></a>
<h4 id="Step-1-Prepare-the-environment"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#Step-1-Prepare-the-environment" class="headerlink" title="Step 1: Prepare the environment"></a>Step 1: Prepare the environment</h4><p>Hexo is a static blog framework based on Node. So we must install <strong>node.js</strong> first. Click <a href="https://nodejs.org/en/download/" target="_blank" rel="external">this link</a> to download Node.js.<br>For windows:</p>
<figure class="highlight bash"><figcaption><span>windows bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node --version</div></pre></td></tr></table></figure>
<p>For Ubuntu:</p>
<figure class="highlight bash"><figcaption><span>ubuntu shell</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ sudo git <span class="built_in">clone</span> https://github.com/nodejs/node.git</div><div class="line">$ sudo chmod -R 755 node</div><div class="line">$ <span class="built_in">cd</span> node</div><div class="line">$ sudo ./configure</div><div class="line">$ sudo make</div><div class="line">$ sudo make install</div><div class="line">$ node --version</div></pre></td></tr></table></figure>
<p>Usually we use git to build and deploy our Hexo blog. So it’s nessesary to install git in your computer. Click <a href="http://git-scm.com/download/" target="_blank" rel="external">this link</a> to download.<br>For windows:</p>
<figure class="highlight bash"><figcaption><span>windows bash</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#125;</div><div class="line">git --version</div></pre></td></tr></table></figure>
<p>For Unbuntu:</p>
<figure class="highlight bash"><figcaption><span>unbuntu shell</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#125;</div><div class="line">$ sudo yum install git</div><div class="line">$ sudo apt-get install git</div></pre></td></tr></table></figure>
<h4 id="Step-2-Install-Hexo-amp-Maupassant"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#Step-2-Install-Hexo-amp-Maupassant" class="headerlink" title="Step 2: Install Hexo &amp; Maupassant"></a>Step 2: Install Hexo &amp; Maupassant</h4><p>Run the following command in Git CMD or Git Bash.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>Run the following command to install <a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="external">Maupassant</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</div><div class="line">$ npm install hexo-renderer-jade --save</div><div class="line">$ npm install hexo-renderer-sass --save</div></pre></td></tr></table></figure>
<h4 id="Step-3-Init-your-blog"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#Step-3-Init-your-blog" class="headerlink" title="Step 3: Init your blog"></a>Step 3: Init your blog</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hexo init         # Init hexo blog.</div><div class="line">hexo new page     # Create a new page.</div><div class="line">hexo new post     # Create a new post.</div><div class="line">hexo g            # Generate the blog.</div><div class="line">hexo d            # Deploy your blog.</div><div class="line">hexo s            # Debug your blog locally.</div></pre></td></tr></table></figure>
<p>Now you have a small demo and can preview your blog via typing <code>localhost:4000</code> in your browser.</p>
<h4 id="Step-4-Setup-your-site-configuration"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#Step-4-Setup-your-site-configuration" class="headerlink" title="Step 4: Setup your site configuration."></a>Step 4: Setup your site configuration.</h4><p>Edit <code>_config.yml</code> under your hexo theme path.</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="attr">fancybox:</span> <span class="literal">true</span> <span class="comment">## If you want to use fancybox please set the value to true.</span></div><div class="line"><span class="attr">duoshuo:</span> <span class="comment">## Your duoshuo_shortname, e.g. username</span></div><div class="line"><span class="attr">disqus:</span> <span class="comment">## Your disqus_shortname, e.g. username</span></div><div class="line"><span class="attr">google_search:</span> <span class="literal">false</span> <span class="comment">## Use Google search, true/false.</span></div><div class="line"><span class="attr">baidu_search:</span> <span class="literal">false</span> <span class="comment">## Use Baidu search, true/false.</span></div><div class="line"><span class="attr">swiftype:</span> <span class="comment">## Your swiftype_key, e.g. m7b11ZrsT8Me7gzApciT</span></div><div class="line"><span class="attr">tinysou:</span> <span class="comment">## Your tinysou_key, e.g. 4ac092ad8d749fdc6293</span></div><div class="line"><span class="attr">self_search:</span> <span class="literal">true</span> <span class="comment">## Use a jQuery-based local search engine, true/false.</span></div><div class="line"><span class="attr">google_analytics:</span> <span class="comment">## Your Google Analytics tracking id, e.g. UA-42425684-2</span></div><div class="line"><span class="attr">baidu_analytics:</span> <span class="comment">## Your Baidu Analytics tracking id, e.g. 8006843039519956000</span></div><div class="line"><span class="attr">show_category_count:</span> <span class="literal">true</span> <span class="comment">## If you want to show the count of categories in the sidebar widget please set the value to true.</span></div><div class="line"><span class="attr">shareto:</span> <span class="literal">true</span> <span class="comment">## If you want to use the share button please set the value to true.</span></div><div class="line"><span class="attr">busuanzi:</span> <span class="literal">true</span> <span class="comment">## If you want to use Busuanzi page views please set the value to true.</span></div><div class="line"><span class="attr">widgets_on_small_screens:</span> <span class="literal">false</span> <span class="comment">## Set to true to enable widgets on small screens.</span></div><div class="line"></div><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  - page:</span> Home</div><div class="line"><span class="attr">    directory:</span> .</div><div class="line"><span class="attr">    icon:</span> fa-home</div><div class="line"><span class="attr">  - page:</span> View</div><div class="line"><span class="attr">    directory:</span> archives/</div><div class="line"><span class="attr">    icon:</span> fa-send</div><div class="line"><span class="attr">  - page:</span> Log  </div><div class="line"><span class="attr">    directory:</span> timeline/</div><div class="line"><span class="attr">    icon:</span> fa-history</div><div class="line"><span class="attr">  - page:</span> About</div><div class="line"><span class="attr">    directory:</span> about/</div><div class="line"><span class="attr">    icon:</span> fa-user</div><div class="line">    </div><div class="line"><span class="attr">widgets:</span> <span class="comment">## Six widgets in sidebar provided: search, category, tag, recent_posts, rencent_comments and links.</span></div><div class="line"><span class="bullet">  -</span> search        </div><div class="line"><span class="bullet">  -</span> category</div><div class="line"><span class="bullet">  -</span> tag</div><div class="line"><span class="bullet">  -</span> recent_posts</div><div class="line"><span class="comment"># - recent_comments</span></div><div class="line"><span class="bullet">  -</span> links  </div><div class="line"> </div><div class="line"></div><div class="line"><span class="attr">links:</span></div><div class="line"><span class="attr">  - title:</span> &lt;Hexo&gt; Official Hexo Guide</div><div class="line"><span class="attr">    url:</span> https://hexo.io/zh-cn/docs/asset-folders.html</div><div class="line"></div><div class="line"><span class="attr">timeline:</span></div><div class="line"><span class="attr">  - num:</span> <span class="number">1</span></div><div class="line"><span class="attr">    word:</span> <span class="number">2016</span><span class="bullet">-10</span><span class="bullet">-30</span> <span class="number">17</span>:<span class="number">03</span> The first version of a HummingBird </div><div class="line"></div><div class="line"><span class="comment"># Static files</span></div><div class="line"><span class="attr">js:</span> js</div><div class="line"><span class="attr">css:</span> css</div><div class="line"></div><div class="line"><span class="comment"># Theme version</span></div><div class="line"><span class="attr">version:</span> <span class="number">0.0</span><span class="number">.0</span></div><div class="line"></div><div class="line"><span class="comment"># Search insite</span></div><div class="line"><span class="attr">search:</span> </div><div class="line"><span class="attr"> - path:</span> search.xml</div><div class="line"><span class="attr"> - field:</span> post</div></pre></td></tr></table></figure>
<p>Please read the following description and finish the configuration.</p>
<table>
<thead>
<tr>
<th>Options</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>fancybox</td>
<td>Enable <a href="http://fancyapps.com/fancybox/" target="_blank" rel="external">Fancybox</a></td>
</tr>
<tr>
<td>duoshuo</td>
<td><a href="http://duoshuo.com" target="_blank" rel="external">Duoshuo</a> shortname</td>
</tr>
<tr>
<td>disqus</td>
<td><a href="https://disqus.com" target="_blank" rel="external">Disqus</a> shortname</td>
</tr>
<tr>
<td>google_search</td>
<td>Default search engine</td>
</tr>
<tr>
<td>baidu_search</td>
<td>Search engine for users in China</td>
</tr>
<tr>
<td>swiftype</td>
<td><a href="https://swiftype.com" target="_blank" rel="external">Swiftype Search</a> key</td>
</tr>
<tr>
<td>tinysou</td>
<td><a href="http://tinysou.com" target="_blank" rel="external">Tiny Search</a> key</td>
</tr>
<tr>
<td>self_search</td>
<td>A jQuery-based <a href="http://hahack.com/codes/local-search-engine-for-hexo" target="_blank" rel="external">local search engine</a>, with the dependency on the plugin <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="external">hexo-generator-search</a>.</td>
</tr>
<tr>
<td>google_analytics</td>
<td><a href="https://www.google.com/analytics/" target="_blank" rel="external">Google Analytics</a> tracking id</td>
</tr>
<tr>
<td>baidu_analytics</td>
<td><a href="http://tongji.baidu.com" target="_blank" rel="external">Baidu Analytics</a> tracking id</td>
</tr>
<tr>
<td>show_category_count</td>
<td>Show the count of categories in the sidebar widget.</td>
</tr>
<tr>
<td>shareto</td>
<td>Enable share button</td>
</tr>
<tr>
<td>busuanzi</td>
<td>Enable <a href="http://busuanzi.ibruce.info" target="_blank" rel="external">Busuanzi</a> page views</td>
</tr>
<tr>
<td>widgets_on_small_screens</td>
<td>Show the widgets at the bottom of small screens.</td>
</tr>
<tr>
<td>menu</td>
<td>Customize your menu of pages here, just follow the format of existied items. Don’t forget to create corresponding folders inlcuding <code>index.md</code> in <code>source</code> folder to ensure the pages will correctly display. <a href="http://fontawesome.io" target="_blank" rel="external">FontAwesome</a> icon fonts have been integrated, and you can choose other icons which you like <a href="http://fontawesome.io/icons/" target="_blank" rel="external">here</a> and use them according to the instruction.</td>
</tr>
<tr>
<td>widgets</td>
<td>Choose and arrange the widgets in sidebar here.</td>
</tr>
<tr>
<td>links</td>
<td>Edit your blogroll here.</td>
</tr>
<tr>
<td>timeline</td>
<td>Show a timeline of the website by setting <code>layout: timeline</code> of a page.</td>
</tr>
<tr>
<td>Static files</td>
<td>Static files directory, for convenience of CDN usage.</td>
</tr>
<tr>
<td>Theme version</td>
<td>For automatic refresh of static files on CDN.</td>
</tr>
</tbody>
</table>
<p>Now all the work has been basically completed.</p>
<hr>
<h4 id="Enable-Timeline-Page"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#Enable-Timeline-Page" class="headerlink" title="Enable Timeline Page"></a>Enable Timeline Page</h4><p>This operation will achieve this effect:</p>
<p><img src="http://i1.piimg.com/577934/f0cd11fb0ca4d04ds.png" alt="Timeline"></p>
<p>So first we need setup this feature in site config file(_config.yml), fill the content you want.</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">timeline:</span></div><div class="line"><span class="attr">  - num:</span> <span class="number">1</span></div><div class="line"><span class="attr">    word:</span> <span class="number">2016</span><span class="bullet">-10</span><span class="bullet">-30</span> <span class="number">17</span>:<span class="number">03</span> The first version of a HummingBird</div></pre></td></tr></table></figure>
<p>Then, create a new page and point out the layout property.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page timeline</div></pre></td></tr></table></figure>
<p>Under timeline folder, edit index.md like this:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">date: 2016-10-30 16:54:26</div><div class="line"><span class="section">layout: timeline</span></div><div class="line">---</div></pre></td></tr></table></figure>
<p>Done, now you can see your customize timeline feature. Enjoy it!</p>
<h4 id="Customize-your-own-icons"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#Customize-your-own-icons" class="headerlink" title="Customize your own icons"></a>Customize your own icons</h4><p>In hexo, all the icons are from <a href="http://fontawesome.io/icon/home/" target="_blank" rel="external">http://fontawesome.io/icon/home/</a>, it means that we can customize the icons by changing some worlds. Every icon can be replaced as you want. So look at the example following:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  - page:</span> Home</div><div class="line"><span class="attr">    directory:</span> .</div><div class="line"><span class="attr">    icon:</span> fa-home    <span class="comment"># fa-home is one of  fontawesome.io and you just need to find another one and replace it.</span></div></pre></td></tr></table></figure>
<h4 id="Enable-Searching-In-site"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#Enable-Searching-In-site" class="headerlink" title="Enable Searching In-site"></a>Enable Searching In-site</h4><p>For this theme, it’s easy to implement this feature. Edit your theme config file, and set the following property to true:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">self_search:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/577934/20415a26f1d3ac5d.png" alt="Searching insite"></p>
<h4 id="Enable-Google-Search-amp-Baidu-Search"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#Enable-Google-Search-amp-Baidu-Search" class="headerlink" title="Enable Google Search &amp; Baidu Search"></a>Enable Google Search &amp; Baidu Search</h4><p>Same as above, just set them to true:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">google_search:</span> <span class="literal">true</span></div><div class="line"><span class="attr">baidu_search:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h4 id="Enable-Reading-Quantity-Statistical"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#Enable-Reading-Quantity-Statistical" class="headerlink" title="Enable Reading Quantity Statistical"></a>Enable Reading Quantity Statistical</h4><p>It’s easy. Edit theme config file and set the following property to true.</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">busuanzi:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h4 id="Setup-your-blogroll-in-sidebar"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#Setup-your-blogroll-in-sidebar" class="headerlink" title="Setup your blogroll in sidebar"></a>Setup your blogroll in sidebar</h4><p>Open theme config file and add some content like this:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">links:</span></div><div class="line"><span class="attr">  - title:</span> &lt;Hexo&gt; Official Hexo Guide</div><div class="line"><span class="attr">    url:</span> https://hexo.io/zh-cn/docs/asset-folders.html</div><div class="line"><span class="attr">  - title:</span> &lt;Hexo&gt; Maupassant Guide</div><div class="line"><span class="attr">    url:</span> https://github.com/tufu9441/maupassant-hexo</div></pre></td></tr></table></figure>
<h4 id="Enable-Math-Editor"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#Enable-Math-Editor" class="headerlink" title="Enable Math Editor"></a>Enable Math Editor</h4><p>Add the following property to your theme config file.</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>If you want to display math equation, you need to setup in your post like this:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">title:</span> Demo</div><div class="line"><span class="attr">date:</span> <span class="number">2016</span><span class="bullet">-10</span><span class="bullet">-31</span> <span class="number">19</span>:<span class="number">27</span>:<span class="number">12</span></div><div class="line"><span class="attr">categories:</span> math</div><div class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure>
<p>For block displayed mathematics, use this:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$$...$$</div><div class="line">\\[...\\]</div></pre></td></tr></table></figure>
<p>For example: <code>$$ h=2*3**$$</code></p>
<p>$$ h=2*3 $$</p>
<p>For inline mathematics, use this:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$...$</div></pre></td></tr></table></figure>
<p>For example: <code>$ h=2*3 $</code> :&nbsp;&nbsp; $ h=2*3 $</p>
<p>More examples:</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$a + b^2$</div><div class="line">$x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;$</div><div class="line">$$\Delta_A(\lambda)=\det(\lambda I-A)$$</div><div class="line">\begin&#123;equation&#125;</div><div class="line">\Delta_A(\lambda)=\det(\lambda I-A),</div><div class="line">\end&#123;equation&#125;</div><div class="line">\begin&#123;equation&#125;</div><div class="line">[a, b, c]=\left|</div><div class="line">\begin&#123;array&#125;&#123;ccc&#125;</div><div class="line">  a<span class="emphasis">_1&amp; a_</span>2  &amp; a_3  \\\</div><div class="line"> b<span class="emphasis">_1 &amp;b_</span>2   &amp; b_3  \\\</div><div class="line"> c<span class="emphasis">_1 &amp;c_</span>2   &amp;c_3   </div><div class="line">\end&#123;array&#125;</div><div class="line">\right|</div><div class="line">\end&#123;equation&#125;</div></pre></td></tr></table></figure>
<p>$$a + b^2$$<br>$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}$$<br>$$\Delta_A(\lambda)=\det(\lambda I-A)$$<br>\begin{equation}<br>\Delta_A(\lambda)=\det(\lambda I-A),<br>\end{equation}<br>\begin{equation}<br>[a, b, c]=\left|<br>\begin{array}{ccc}<br>  a_1&amp; a_2  &amp; a_3  \\<br> b_1 &amp;b_2   &amp; b_3  \\<br> c_1 &amp;c_2   &amp;c_3<br>\end{array}<br>\right|<br>\end{equation}</p>
<p>Docs for <strong>MathJax</strong> : <a href="http://docs.mathjax.org/en/latest/start.html" target="_blank" rel="external">http://docs.mathjax.org/en/latest/start.html</a></p>
<h4 id="Code-Block"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#Code-Block" class="headerlink" title="Code Block"></a>Code Block</h4><p>using this format to customize your own code block style:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</div><div class="line">code snippet</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<h4 id="Enable-different-pagenation-in-different-page"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#Enable-different-pagenation-in-different-page" class="headerlink" title="Enable different pagenation in different page"></a>Enable different pagenation in different page</h4><p>First, you need to install the following plugins as need:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-index --save</div><div class="line">$ npm install hexo-generator-archive --save</div><div class="line">$ npm install hexo-generator-tag --save</div></pre></td></tr></table></figure>
<p>Then, Adding the following config as need:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">archive_generator:</span></div><div class="line"><span class="attr">  per_page:</span> <span class="number">40</span></div><div class="line"><span class="attr">  yearly:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  monthly:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  daily:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>Done! And now you can have a try.<br><a href="https://github.com/iissnan/hexo-theme-next/issues/30" target="_blank" rel="external">More Details Please Click Here</a></p>
<h4 id="DNS-Mapping"><a href="/2016/10/30/The-Hexo-Guide-For-Hummingbird/#DNS-Mapping" class="headerlink" title="DNS Mapping"></a>DNS Mapping</h4><ul>
<li>CNAME<br>Map one host name to another host name.</li>
<li>A<br>Map one host name to another specific IP address.</li>
<li>URL Mapping<br>Map one url to another specific url.</li>
</ul>
<hr>
<p>For more help, please read the help doc manually. You can find the document under your theme folder.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[手把手教你设计REST API]]></title>
      <url>/2016/10/08/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E8%AE%BE%E8%AE%A1REST-API/</url>
      <content type="html"><![CDATA[<p>API？API是哪厮？可以吃吗？对于开发者行，永远避免不了对API的开发与维护，并根据API写好对应的接口文档。这个时候freshmans就会站出来说话了：只要前端拿到后端传递的数据就好了，何必这么浪费时间、浪费精力呢？曾几何时，我也这样想过，只是在企业中打滚了几个月之后，我再也不这么想，反而对这种想法深恶痛绝。</p>
<a id="more"></a>
<p>假设你看到这样的APIs：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[post] http://www.testapi.com/getApis</div><div class="line">[post] http://www.testapi.com/get_apis</div><div class="line">[post] http://www.testapi.com/GetApis</div><div class="line">[post] http://www.testapi.com/getapis</div><div class="line">[post] http://www.testapi.com/apis</div><div class="line">[post] http://www.testapi.com/getallapis</div><div class="line">...</div></pre></td></tr></table></figure>
<p>很明显在一个团队中，不同的人写出的代码可以说是千差万别。最痛苦的时刻莫过于阅读别人杂乱无章、充满各种无厘头的代码，这种煎熬，相信作为程序猿和攻城狮的你们一定深有感触吧。</p>
<p>有一次，我写了一个获取全部数据记录的接口，取名为<code>getAllData</code>。后来业务更改，需要对数据进行分页，于是，我又写了一个新的接口，取名为<code>getDataByPage</code>,接收两个参数，一个是<code>page_size</code>，一个是<code>page_index</code>。后来由于业务需要，需要进行对某些数据进行排序，于是，我又写了一个新的接口，取名为<code>getSortedDataByPage</code>,这次又接收了另外一个排序参数<code>sort_by</code>，我去，这不是坑爹么，这么写下去，到底还要多少个接口，还要多少个一大堆copy的代码堆？</p>
<table>
<thead>
<tr>
<th>接口</th>
<th>参数</th>
</tr>
</thead>
<tbody>
<tr>
<td>getAllData</td>
<td>获取所有记录</td>
</tr>
<tr>
<td>getDataByPage</td>
<td>分页获取数据</td>
</tr>
<tr>
<td>getSortedDataByPage</td>
<td>获取排好序的数据</td>
</tr>
</tbody>
</table>
<p>仔细发现之后，我果断的将其归纳为一个接口，这个接口提供可选的参数选项，包括分页，排序。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[post] https://www.testapi.com/api/data</div><div class="line"></div><div class="line">//获取所有记录</div><div class="line">[post] https://www.testapi.com/api/data</div><div class="line"></div><div class="line">//获取部分记录</div><div class="line">[post] https://www.testapi.com/api/data?page_index=1&amp;page_size=2&amp;limit=2&amp;offet=1</div><div class="line"></div><div class="line">//获取排序记录</div><div class="line">[post] https://www.testapi.com/api/data?sort_by=col</div></pre></td></tr></table></figure>
<h4 id="REST原则一：API提供可扩展参数，用于数据的过滤。"><a href="/2016/10/08/手把手教你设计REST-API/#REST原则一：API提供可扩展参数，用于数据的过滤。" class="headerlink" title="REST原则一：API提供可扩展参数，用于数据的过滤。"></a>REST原则一：API提供可扩展参数，用于数据的过滤。</h4><table>
<thead>
<tr>
<th>参数</th>
<th>意义</th>
<th>是否可选</th>
</tr>
</thead>
<tbody>
<tr>
<td>page_size</td>
<td>记录条数</td>
<td>可选</td>
</tr>
<tr>
<td>page_index</td>
<td>记录页数</td>
<td>可选</td>
</tr>
<tr>
<td>offset</td>
<td>忽略条数</td>
<td>可选</td>
</tr>
<tr>
<td>limit</td>
<td>最大条数</td>
<td>可选</td>
</tr>
<tr>
<td>sort_by</td>
<td>排序规则</td>
<td>可选</td>
</tr>
</tbody>
</table>
<p>除此之外，你是否发现在最开始列出的几个API，各种命名方式混在一个，搞了个全家桶。看着实在令人发狂，好吧，原谅我强迫症。但是，一个良好的代码生态应当有统一的代码规范，在RESTful中，也是一样。</p>
<h4 id="REST原则二：-API命名全部使用名词。"><a href="/2016/10/08/手把手教你设计REST-API/#REST原则二：-API命名全部使用名词。" class="headerlink" title="REST原则二： API命名全部使用名词。"></a>REST原则二： API命名全部使用名词。</h4><p>网络中的数据交互其实都是通过资源定位实现的，我们熟悉的URI（Unique Resource Identifier），表示网络上的一个实体，这个实体是一个资源，这个资源通过统一资源定位符来标记。比方说，一张图片，一个视频，都是网络上的一个资源(Resource),获取前后端交互中最熟悉的JSON，也可以看做是一个资源。所以，在API设计中，所有的数据交互都是基于资源的，即API的URL只存在名词。对于上述的接口例子，则可描述为：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>www.testapi.com<span class="regexp">/api/</span>data</div></pre></td></tr></table></figure>
<p><strong>OK，说了这么多，那么，什么是REST？说了半天，却怎么听不懂REST API?</strong></p>
<h4 id="REST-扫盲知识"><a href="/2016/10/08/手把手教你设计REST-API/#REST-扫盲知识" class="headerlink" title="REST 扫盲知识"></a>REST 扫盲知识</h4><p><strong>小红</strong>：什么是REST啊？<br><strong>小明</strong> : REST 是Representation Statue Transfer的英文缩写， 翻译为中文称之为表现层状态转换。</p>
<p><strong>小红</strong>：那什么是表现层啊？<br><strong>小明</strong>：表现层类似于MVC中视图层的概念。所有的网络资源都是基于视图这个层进行表现的。通俗地说，就是所有的数据交互都是发生在视图层上的。</p>
<p><strong>小红</strong>：好像有点明白了，那什么是状态转换啊？<br><strong>小明</strong> ： 我们知道，所有的HTTP协议族都是无状态的，但是，我们页面上的数据交互，比如增删改，涉及到了数据的变化，或者说是资源的变化，这种变化是在服务端进行的，数据交互后造成的变化可以笼统地成为状态转化。</p>
<p><strong>小红</strong>：你说的是什么鬼？我怎么听不懂<br><strong>小明</strong>：听不懂很正常，说明你的还没悟出来其中的精华。</p>
<p><strong>小红</strong>：那什么是资源啊？<br><strong>小明</strong>：资源就是网络上的一个实体，比如一张图片啊，一个文件啊等等都是一个资源，英文就是Resource啦。</p>
<p><strong>小红</strong>：那表现层、状态转换、资源都是什么鬼？有啥关系吗？<br><strong>小明</strong>：表现层是资源的载体，状态转换时资源的作用方式，表现层负责状态转换过程中资源的展示。</p>
<p><strong>小红</strong>：哦哦，小明，你好帅！<br><strong>小明</strong>：谢谢，我知道我很帅啦！</p>
<p>这样大家应该都知道什么是REST API了吧！</p>
<h4 id="REST原则三：版本控制"><a href="/2016/10/08/手把手教你设计REST-API/#REST原则三：版本控制" class="headerlink" title="REST原则三：版本控制"></a>REST原则三：版本控制</h4><p>每个API都有相应的版本，一般来说，我们可以将版本号固定在URL中，这样是很直观的。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https:<span class="regexp">//</span>www.testapi.com<span class="regexp">/api/</span>v1_0_1_2<span class="regexp">/data</span></div></pre></td></tr></table></figure>
<p>当然，还有另外一种比较推荐的方式，就是将版本信息写入在HTTP头信息中。还有，我们熟悉的Github也是采用这种方式的哦。</p>
<h4 id="REST原则四：状态反馈"><a href="/2016/10/08/手把手教你设计REST-API/#REST原则四：状态反馈" class="headerlink" title="REST原则四：状态反馈"></a>REST原则四：状态反馈</h4><p>状态反馈这个词虽然是我自己说的，但是理解起来简单、易懂（突然有点佩服我的聪明才智了，别骂我臭不要脸）。意思就是说，每个API都应该对处理结果进行处理，在HTTP规范中，如下：</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1xx</td>
<td>请求已经被接收</td>
</tr>
<tr>
<td>2xx</td>
<td>请求已经成功被服务器接收、理解并接受</td>
</tr>
<tr>
<td>3xx</td>
<td>请求重定向</td>
</tr>
<tr>
<td>4xx</td>
<td>客户端错误</td>
</tr>
<tr>
<td>5xx</td>
<td>服务器错误</td>
</tr>
</tbody>
</table>
<p>也就是说，在客户端错误中，REST需要将错误信息返还给客户端。对于服务端而言，我们需要向客户端开发4xx的错误，隐藏其他的错误。在返还错误中，我们可以向API中提供error属性。如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">     <span class="attr">"error"</span>:<span class="string">"找不到资源"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，这次关于REST的学习总结到这里就结束了。有什么错误的地方记得提出来啊！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[阅读笔记:《疯狂的程序员》]]></title>
      <url>/2016/10/07/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-%E3%80%8A%E7%96%AF%E7%8B%82%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E3%80%8B/</url>
      <content type="html"><![CDATA[<p>本篇文章摘录了绝影的书籍《疯狂的程序员》中的一些个人觉得不错的一些段子。虽然绝影因为游戏外挂的事情弄了一个蓝瘦的下场，但是他的编程经历却也是值得学习的。这本书描述得很接地气，有很多共鸣的地方。非常适合程序猿们阅读。</p>
<a id="more"></a>
<blockquote>
<p>没条件，只好纸上谈兵，他对土匪说：“知道什么是‘DOS’吗？‘DOS’就是‘DiskOperationSystem’，磁盘操作系统。”有时候，你跟别人讲出一个英文简写的全称，会让人对你刮目相看。比如大家都在说“TMD”，“NMD”，你跟他们说：“‘TMD’是‘战区导弹防御系统’，‘NMD’是‘国家导弹防御系统’。”这样保证引起别人的注意。现在的社会就是，谁吸引了眼球，谁就吸引了Money。</p>
</blockquote>
<hr>
<blockquote>
<p>《数据库原理与应用》实际就是《数据库应用》，像“原理”这么高深的东西，不能说，不能说，说了你们也无法理解。这话是宴斌自己说的。</p>
</blockquote>
<hr>
<blockquote>
<p>要么你做第一个，要么你做最好的一个，其他的都没啥大意思。</p>
</blockquote>
<hr>
<blockquote>
<p>人无非有两种方法提高自己，一是真的提高自己，二是打击别人提高自己。</p>
</blockquote>
<hr>
<blockquote>
<p>据说《相对论》刚刚出来的时候世界上只有三个人能看懂它。人生最大的痛苦莫过于没人理解你。绝影没法跟他们讲“技术”，因为他们根本就不懂“技术”。比如你跟猪讲《普通物理学》，要是猪能成功计算出杀猪刀进入身体时力量有多大，压强有多大，能够通过给定的猪皮的厚度和强度计算出自己应该以多大速度向后缓冲才能成功让杀猪刀无法穿透猪皮，那么你就可以跟土匪和王江讲什么是汇编语言，为什么要学汇编语言了。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[入职三月]]></title>
      <url>/2016/09/28/%E5%85%A5%E8%81%8C%E4%B8%89%E6%9C%88/</url>
      <content type="html"><![CDATA[<p>早晨，开始觉得有那么一丁点凉了。说来也奇怪，宿舍一直开着空调，也一直保持着26℃的高温，可就在八点睁开疲惫双眼的瞬间，居然会感受到这细微的变化。原来，不知不觉中，已经临近国庆，而我，也已经工作了三个月了！</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/1784374-5de88d68a992d0ce.gif?imageMogr2/auto-orient/strip" alt="请盯着这张图，你会发现有趣的现象"></p>
<p>三个月的时间似乎消逝得极快，仿佛一瞬便溜过了今天。是的，有种忙透了的感觉。还好，作息规律却正常多了，只是每天周而复始的生活节奏很容易使人陷入这种可以导致麻木的安逸中。每天，八点十五起床，八点四十五搭公司的班车去公司，九点在公司餐厅吃早餐，吃完饭回到自己的工位，开始新的一天的工作。公司的餐饮很好，一种自助式的餐厅，号称八菜一汤，所以每顿饭总可以吃得不错，只是吃多了喜欢的鸡翅、田鸡、牛排、牛腩等肉居然有种腻腻的感觉，以至于到后来总吃剩很多饭菜。中午有一个半钟的休息时间，大部分同事用来休息，有些同事则和我一样，用来玩玩游戏，或者是看看书，刷刷朋友圈。我是一个向来不习惯中午休息的人，因为我中午一觉醒来会更加疲惫。到了晚上六点，伸个懒腰，打个哈欠，又到了吃饭的时间。项目很赶的时候，一般会在十一点后乘坐公司的班车回宿舍，闲暇时则会在十一点前回到宿舍。于是，一天就这样过去了，在短短的睡梦后有开始了几乎一模一样的一天。</p>
<p>工作是需要激情和动力的。这种激情和动力可以抵消掉一些那些令人麻木的安逸，而如果失去了对工作的激情，丧失了动力，则会显得被动无聊。来到公司，第一个负责的项目是一个CRM项目，项目挺小，但是很赶，而且是Web/Android/IOS同步开发。第二个负责的项目，也是现在开发中的项目，是万恶的工作流项目，而且这个工作流本身不能进行任何的硬编码实现，全部逻辑采用配置式来实现。大三的时候，就曾经接触过市场上一些OA产品，当时就体会到了其业务逻辑上的复杂，现在居然也涉猎到这个区域了，而且作为项目的主程序员，实在是压力上大。工作是有压力的，一方面我觉得自己可以如期完成，一方面，又在为预计的时间内完不成相应的任务而郁郁寡欢。很多时候，总会碰到一些莫名其妙的BUG，这些BUG在你还没有从源头上理解其发生的机理之前你根本无法解决，这也是造成耗时较长的主要原因。都说有压力才有动力，只是有些时候，压力太大了也未必有动力，关键在于怎么维持动力、怎么坚持总结。现在回想起刚入职时给自己定的计划，才发现基本上没有时间完成。所以，奋斗的路是充满坎坷的，想要一片平路，也只有先踏过这篇荆棘。</p>
<p>转眼间又到九月，我们这一批的校招生试用才刚结束，公司又开始了新一轮的校园招聘了。三个月，认识了很多小伙伴，有广工的，有华师的、有深大、中大、华中大等等的，当然，还有广大的。在这个具有几百号人的大部门里，大家各司其职，相互合作。下班后，找几个小伙伴聊聊天，或者走二十分钟回宿舍，挺好。</p>
<p>这就是这三个月的生活了，单调而简单。好久没有像大三那会，可以疯狂地玩上一天的LOL了。本想入手一个单反玩玩摄影，而今一拖再拖，到现在也还没有落实。所以得赶紧丰富丰富自己的生活情趣了，因为工作之余，还有生活。转正面谈刚结束，写下此文，权当初入职场的阶段性总结。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 16.04 LTS 问题解决方案]]></title>
      <url>/2016/08/28/Ubuntu-16-04-LTS-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<p>有一段时间，心血来潮，想玩一把LINUX。于是，在我自己的笔记本上安装了Ubuntu 16.04，顺带学一学LINUX相关的知识。本篇文章收集了笔者在玩转Ubuntu过程中遇到的一些问题。<br><a id="more"></a></p>
<h4 id="20160828-无法连接WIFI，显示”设备为就绪”"><a href="/2016/08/28/Ubuntu-16-04-LTS-问题解决方案/#20160828-无法连接WIFI，显示”设备为就绪”" class="headerlink" title="20160828 - 无法连接WIFI，显示”设备为就绪”"></a>20160828 - 无法连接WIFI，显示”设备为就绪”</h4><hr>
<blockquote>
<p>1 打开更新管理器，选择附加驱动，选择使用Processor Microcode firmware for intel CPUs</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1784374-247c4668c65a14f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<blockquote>
<p>2 关机重启系统就可以了</p>
</blockquote>
<h4 id="20160828-无法直接安装搜狗输入法"><a href="/2016/08/28/Ubuntu-16-04-LTS-问题解决方案/#20160828-无法直接安装搜狗输入法" class="headerlink" title="20160828 - 无法直接安装搜狗输入法"></a>20160828 - 无法直接安装搜狗输入法</h4><blockquote>
<p>1 添加依赖包，执行一下命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get -f install</div></pre></td></tr></table></figure>
<blockquote>
<p>2 安装下载好的搜狗输入法安装程序</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i sogoupinyin_2.0.0.0078_amd64.deb</div></pre></td></tr></table></figure>
<blockquote>
<p>3 重启系统就可以了</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JSON基础知识总结]]></title>
      <url>/2016/07/17/JSON%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>已经有九天没有发表文章更新了，严重违反了自己定好的“每周至少发表一篇文章”的计划。因为是在太忙了，朝九晚九的，有时下班回家就直接睡觉（感觉给自己找了些许借口==||）。好了，废话不多说了，来看正文。</p>
<a id="more"></a>
<h4 id="1-什么是JSON？"><a href="/2016/07/17/JSON基础知识总结/#1-什么是JSON？" class="headerlink" title="1. 什么是JSON？"></a>1. 什么是JSON？</h4><p>什么是JSON？记得刚开始接触JSON这一概念的时候是在大三的时候，由于需要将数据从WEB服务器后台传递到页面中，比如，需要将一个名为name的属性值传递到页面，当然，这很平常、很简单。可是，如果我要传递很多数据，很多有组织性的数据，比如是一个实体类的数据，或者说是数据库中的一条记录，那要如何传递到前端页面呢？其实，在绝大所数的异步请求下，都会使用JSON这种数据格式来实现，对于一些比较单一的数据则可以采用框架自带的功能或者使用像EL/ONGL等类似的标记性语言。当然，这里还是强调一下JSON这种数据格式。</p>
<p>JSON(Javascript Object Notation)是一种轻量级的数据格式，完全独立于语言的文本格式，也就是说整个JSON文档就是一个文本文档，所以JSON是一种理想的数据交换格式。在非关系型数据库中，也能见到JSON的身影，比如在MongoDB中，也采用了一种类似JSON的数据格式，不过它叫BSON。JSON在Javascript中处理是不需要额外的API或者工具包的，所以效率非常高。</p>
<h4 id="2-JSON数据格式"><a href="/2016/07/17/JSON基础知识总结/#2-JSON数据格式" class="headerlink" title="2. JSON数据格式"></a>2. JSON数据格式</h4><p>(1)记住，JSON不是一种语言，只是一种数据格式。这种格式在存储的时候最多算是一个字符串数据而已。<br>(2)下面简要介绍一下JSON的数据格式规范</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">demo1 = &#123;&#125;                          //空数据</div><div class="line">demo2 = &#123;"key":"value"&#125;             //JSON是一种键值对的集合格式，每个键对应一个值</div><div class="line">demo3 = &#123;"key":[1,2,3]&#125;             //JSON中可以存储数组元素</div><div class="line">demo4 = &#123;                           //JSON中可以存储无限个键值对数据 </div><div class="line">            "key1":"value1",</div><div class="line">            "key2","value2"</div><div class="line">         &#125;</div><div class="line">demo5 = &#123;                           //理论上，JSON可以进行无限次的嵌套</div><div class="line">           "key1":"value1",</div><div class="line">           "key2":&#123;</div><div class="line">                     "key3":"value3",</div><div class="line">                     "key4":"value4"</div><div class="line">                  &#125;</div><div class="line">         &#125;</div></pre></td></tr></table></figure>
<h4 id="3-JSON在Javascript中的解析方法"><a href="/2016/07/17/JSON基础知识总结/#3-JSON在Javascript中的解析方法" class="headerlink" title="3. JSON在Javascript中的解析方法"></a>3. JSON在Javascript中的解析方法</h4><p>在Javascript中，主要采用以下两个方法来解析JSON数据：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span>() 和 <span class="built_in">JSON</span>.parse()</div></pre></td></tr></table></figure>
<p>基本的使用方式如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jsonstr = <span class="string">'&#123;"name":"jifeng","company":"taobao"&#125;'</span>;</div><div class="line"></div><div class="line"><span class="comment">//eval function</span></div><div class="line"><span class="keyword">var</span> evalJson = <span class="built_in">eval</span>(<span class="string">'('</span> + jsonstr + <span class="string">')'</span>);</div><div class="line"></div><div class="line"><span class="comment">//json.parse function</span></div><div class="line"><span class="keyword">var</span> jsonParseJson = <span class="built_in">JSON</span>.parse(evalJson);</div></pre></td></tr></table></figure>
<h4 id="4-JSON-parse-和-eval-的区别"><a href="/2016/07/17/JSON基础知识总结/#4-JSON-parse-和-eval-的区别" class="headerlink" title="4. JSON.parse() 和 eval()的区别"></a>4. JSON.parse() 和 eval()的区别</h4><p>在代码中使用eval()是非常危险的，因为eval()在解析字符串时，会执行该字符串中的代码，特别是用它执行第三方JSON字符串时，可能包含有恶意代码。而JSON.parse()方法解析字符串本身。使用JSON.parse()可以捕捉JSON中的语法错误。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> jsonStr = &#123;<span class="string">"key"</span>:<span class="string">"demo"</span>,<span class="string">"key2"</span>:<span class="string">"demo"</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> jsonObj1 = <span class="built_in">JSON</span>.parse(jsonStr);            <span class="comment">//使用JSON.parse()解析JSON，不会执行jsonStr中的代码</span></div><div class="line"><span class="keyword">var</span> jsonObj2 = <span class="built_in">eval</span>(<span class="string">'('</span>+jsonStr+<span class="string">')'</span>);          <span class="comment">//会执行jsonStr中的代码，非常不安全</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> errJson = &#123;<span class="string">'error json format example'</span>&#125;    <span class="comment">//这是一段错误的JSON格式的数据</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> jsonObj3 = <span class="built_in">JSON</span>.parse(errJson);            <span class="comment">//控制台下会报错并显示堆栈信息</span></div><div class="line"><span class="keyword">var</span> jsonObj4 = <span class="built_in">eval</span>(<span class="string">'('</span>+errJson+<span class="string">')'</span>);          <span class="comment">//控制台下不会报错，jsonObj4 = undefined</span></div></pre></td></tr></table></figure>
<h4 id="5-谈谈Javascript在解析JSON时存在的坑"><a href="/2016/07/17/JSON基础知识总结/#5-谈谈Javascript在解析JSON时存在的坑" class="headerlink" title="5. 谈谈Javascript在解析JSON时存在的坑"></a>5. 谈谈Javascript在解析JSON时存在的坑</h4><p><strong>(1)转义字符：数据本身存在需要使用转义字符才能表示的字符</strong></p>
<p>在Javascript中，有一个转义字符就是\,可以说对于没有深入接触过JSON的新手来说，很大概率上会踩这个坑。比如你的JSON数据是这个样子的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"key1"</span>:<span class="string">"\"demo\""</span>&#125;</div></pre></td></tr></table></figure>
<p>就这个格式的数据，在服务端程序中表示的时候是没有问题的,数据本身就带有双引号，所以这里使用到了转义字符\，但是在Javascript中就不行了，Javascript是不允许出现任何转义字符的。那如果真的要存储需要转义字符才能实现的数据时，比如数据本身就带有双引号，那么这个时候真么解决呢？我想一个比较土的方法就是先替换掉JSON字符串中的所有需要使用转义字符表示的字符，然后再进行解析，解析完成后再将原来的字符替换回去。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var demo = "&#123;"key":"value\""&#125;";        //带有双引号的JSON数据</div><div class="line">var dealDemo = demo.replace('\\','-');      //将数据中的'\'转化为'-'</div><div class="line">var jsonDemo = JSON.parse(dealDemo);        //解析JSON数据</div><div class="line">var data = jsonDemo.key.replace('-','\\'); //将双引号替换回去</div></pre></td></tr></table></figure>
<p>当然，这种办法也不是有弊端的，那就是你的json数据本身不能出现-这个字符。</p>
<p><strong>(2)数字&amp;字符串</strong></p>
<p>这个问题我也是最近才发现的(笔者也是踩坑过来的=.=)。先来看个简单的例子：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">//假设某类型的数据有不同的值，可以单个值，也可以多个值，多个值是使用逗号隔开</div><div class="line">var json1 = &#123;"key":"tag","key1":1&#125; ;</div><div class="line">var json2 = &#123;"key":"tag","key1</div><div class="line">![257251_1455763624_2481.png](http://upload-images.jianshu.io/upload_images/1784374-bfb508453e93788b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line">":"1,2"&#125;</div><div class="line"></div><div class="line">//遍历JSON数据集合，同时解析其value值,将其分开</div><div class="line">var demo = JSON.parse(json1);</div><div class="line">var value = demo.tag;</div><div class="line">var values = value.split(',');</div><div class="line"></div><div class="line">//对于json2，是正常的，得到的values = [1,2]</div><div class="line">//对于json1，则报错了，原因是Javascript把'1'看成数字了，数字没有split这个方法</div><div class="line"></div><div class="line">//解决方式：</div><div class="line">//将value强制转化为字符串</div><div class="line">var str = new String(value);            //这样对于json1的数据就不会报错了</div></pre></td></tr></table></figure>
<p>所以，对于JSON，我觉得格式统一很重要，并且为其value全部加上引号，这样规范后，可以让前端少踩一些不必要的坑。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;"键名称有引号":"键值也有引号"&#125;</div><div class="line">&#123;"key":"value"&#125;</div><div class="line">&#123;"tag":"1"&#125;</div><div class="line"></div><div class="line">//不推荐这种：</div><div class="line">&#123;"tag":1&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[玩转MongoDB之基础杂萃]]></title>
      <url>/2016/07/08/%E7%8E%A9%E8%BD%ACMongoDB%E4%B9%8B%E5%9F%BA%E7%A1%80%E6%9D%82%E8%90%83/</url>
      <content type="html"><![CDATA[<p>由于工作需要，最近开始接触MongoDB，对于一个已经习惯了传统SQL的程序员来说，进入NoSQL可以说是需要莫大的勇气的。最大的不适应，是NoSQL和SQL的存储原理与思维方式的不一致。当然，笔者也是NoSQL中的菜鸟，在这里分享一下自己的一些学习总结与心得。</p>
<a id="more"></a>
<h4 id="1、数组"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#1、数组" class="headerlink" title="1、数组"></a>1、数组</h4><p>在MongoDB中，文档（Document）即表示数据库中的一个集合中的一条记录，相当于关系型数据库中的行（row）。在MongoDB中，数组是使用JSON语法表示的，在MongoDB中，也称为BSON格式。数组既可以作为有序对象来操作，也可以作为无序对象来操作。有序对象比如列表等，无序对象比如集合等等。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "a" : 0,               //这明显不是一个数组</div><div class="line">  "b" : [],              //定义一个空的数组 </div><div class="line">  "c" : [ "1","2","3"]   //包含3个元素的数组</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2、文档嵌套"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#2、文档嵌套" class="headerlink" title="2、文档嵌套"></a>2、文档嵌套</h4><p>在NoSQL中，文档与文档之间是可以随意嵌套的，比如某个字段的值为某个类型的对象。理论上，MongoDB支持无限级的自我嵌套，比如：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"a"</span>: &#123;<span class="attr">"b"</span>:<span class="number">1</span>,<span class="attr">"c"</span>:<span class="number">2</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3、文档标识"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#3、文档标识" class="headerlink" title="3、文档标识"></a>3、文档标识</h4><p>如果标记当前这个文档，按照关系型数据库的习惯，则可以说，如果保证一条记录在数据库里是唯一的，在传统SQL中，使用主键ID来标识记录的全局唯一性，而在MongoDB中，则使用ObjectId来确保文档的唯一标识，即_id的默认类型。<br>ObjectID是一个12字节的BSON数据类型，格式如下：</p>
<ul>
<li>前四个字节表示时间戳</li>
<li>接下来三个字节是机器标识码</li>
<li>紧接的两个字节由进程ID组成，即PID</li>
<li>最后三个字节是随机数</li>
</ul>
<p>MongoDB中的每个文档必须有一个名为_id的键，可以是任意类型，默认为ObjectID类型。</p>
<p>以下是在Shell中关于ObjectId的一些方法:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#生成一个新的ObjectId</div><div class="line">newObjectId = ObjectId()</div><div class="line"></div><div class="line">#返回的id为：ObjectId("5349b4ddd2781d08c09890f3")</div><div class="line"></div><div class="line">#获取文档</div><div class="line">ObjectId("5349b4ddd2781d08c09890f3").getTimestamp()</div><div class="line"></div><div class="line">#返回时间为：ISODate("2016-07-06T21:49:17Z")</div><div class="line"></div><div class="line">#将ObjectId转化为字符串</div><div class="line">new ObjectId().str</div><div class="line"></div><div class="line">#返回结果为：5349b4ddd2781d08c09890f3</div></pre></td></tr></table></figure>
<h4 id="3、添加文档"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#3、添加文档" class="headerlink" title="3、添加文档"></a>3、添加文档</h4><p>插入文档使用db.col.insert(document)。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.Collection_Name.insert(&#123;</div><div class="line">  <span class="string">"name"</span>:<span class="string">"demo"</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>如果文档不包含_id键，MongoDB会自动创建一个ObjectId类型的_id值</li>
<li>默认情况下插入操作时，MongoDB只检查传入数据是否包含_id以及数据大小是否超过16MB，所以可以得到更高的性能插入，但同时也可能录入无效数据。</li>
<li>因为在插入时是不执行任何代码的，所以与传统SQL相比，MongoDB不存在SQL注入风险。</li>
</ol>
<h4 id="4、删除文档"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#4、删除文档" class="headerlink" title="4、删除文档"></a>4、删除文档</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.Collection_Name.remove();   <span class="comment">//清空集合内的所有文档</span></div><div class="line">db.Collection_Name.remove(    <span class="comment">//清空指定文档</span></div><div class="line">  &#123;</div><div class="line">     <span class="string">"a"</span>：<span class="string">"a"</span></div><div class="line">  &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>当集合内数据过多时，可以考虑下面这个方法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.drop_collection(Collection_Name);  <span class="comment">//直接删除集合</span></div><div class="line">db.Collection_Name.ensureIndex();      <span class="comment">//重建索引</span></div></pre></td></tr></table></figure>
<h4 id="5、更新文档"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#5、更新文档" class="headerlink" title="5、更新文档"></a>5、更新文档</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//update语法定义</span></div><div class="line">db.Collection_Name.update(query,<span class="built_in">document</span>,upsert,multi);</div><div class="line"></div><div class="line"><span class="comment">//设定原文档为：</span></div><div class="line"><span class="keyword">var</span> data = &#123;<span class="attr">_id</span>:<span class="string">"xxxx"</span>,<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">//query 是指查询条件，相当于SQL中的where子句，比如:</span></div><div class="line">db.Collection_Name.update(</div><div class="line">  &#123;<span class="attr">_id</span>:<span class="string">"xxxx"</span>,<span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">2</span>&#125;,       <span class="comment">//定位条件，对符合_id=xxxx，a=1，b=2的文档进行更新</span></div><div class="line">  &#123;<span class="string">"a"</span>:<span class="number">2</span>&#125;,                        <span class="comment">//将a的值改为2，替换整个文档</span></div><div class="line">  <span class="literal">true</span>,                           <span class="comment">//若查询不到符合条件的文档，则新增一个文档</span></div><div class="line">  <span class="literal">true</span>                            <span class="comment">//允许更新多行</span></div><div class="line">);</div></pre></td></tr></table></figure>
<ul>
<li>update操作会替换整个匹配的文档。而不是进行某些特定字段的修改。如果需要更新某个特定字段值，则应当使用修改器。</li>
<li>upsert模式是一个布尔值选项，表示是否文档更新时，如果不存在，能够自动创建。</li>
<li>multi模式也是一个布尔值选项，默认情况下只更新匹配到的第一个文档，开启了multi模式后(即设置为true),则会更新所有匹配的文档。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//更新文档使用到的一些修改器，由$符号定义</span></div><div class="line"><span class="comment">//$inc 增加或减少数字的值，键不存在时自动创建</span></div><div class="line">db.Collection_Name.update(</div><div class="line">  &#123;<span class="string">"name"</span> : <span class="string">"翘着二郎腿打代码"</span>&#125;,</div><div class="line">  &#123;<span class="string">"$inc"</span> : &#123; <span class="string">"lover"</span> : <span class="number">1</span> &#125;&#125;               <span class="comment">//只将lover字段的值加1</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">//$set 设置某一项或者多个项目的值</span></div><div class="line">db.Collection_Name.update(</div><div class="line">  &#123;<span class="string">"name"</span> ： <span class="string">"翘着二郎腿打代码"</span>&#125;,</div><div class="line">  &#123;<span class="string">"$set"</span> : &#123;<span class="string">"name"</span> : <span class="string">"打代码"</span> &#125;&#125;</div><div class="line">);</div><div class="line">这里列举一些常用的修改器</div><div class="line">$inc      设置自增或者自减</div><div class="line">$set      设置指定键的值</div><div class="line">$unset    $set的反操作，会删除键及键值</div><div class="line">$push     将元素追加到数组末尾，数组不存在则自动创建</div><div class="line">$pushAll  $push的批量操作版本</div><div class="line">$addToSet 与$push一样，会自动过滤重复元素</div><div class="line">$pop      从数组中移除元素,<span class="number">1</span>代表从末尾移除，<span class="number">-1</span>代码从开头移除</div><div class="line">$pull     从数组中移除所有匹配的元素</div><div class="line">$pullAll  $pull的批量操作版本</div><div class="line">$rename   修改制定键的键名</div><div class="line">$bit      对整型键进行位操作</div><div class="line">另外，还有一种方式可以实现文档的更新：</div><div class="line"><span class="comment">//使用findAndModify()更新文档</span></div><div class="line">db.Collection_Name.findAndModify(</div><div class="line">  &#123;</div><div class="line">      <span class="string">'query'</span> : &#123;<span class="string">"name"</span> : <span class="string">"翘着二郎腿打代码"</span> &#125;,</div><div class="line">      <span class="string">'update'</span> : &#123;<span class="string">"$set"</span> : &#123; <span class="string">"favour"</span> : <span class="number">100</span> &#125; &#125;,</div><div class="line">      <span class="string">'new'</span> : <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">其中的参数如下：</div><div class="line"></div><div class="line">query   :  查询条件，用来定位到匹配的文档</div><div class="line">sort    :  如果匹配到多个文档，指定一个排序方式，-1降序，1升序</div><div class="line">remove  :  是否删除匹配的文档</div><div class="line">new     :  是否返回更新后的文档</div><div class="line">update  :  更新操作</div><div class="line">upsert  :  是否自动创建，如果匹配不到文档</div><div class="line"></div><div class="line">**/</div><div class="line">save()</div><div class="line"><span class="comment">//文档不存在时，执行insert操作，存在是执行update操作。</span></div><div class="line">db.demo.save(<span class="built_in">document</span>);</div></pre></td></tr></table></figure>
<h4 id="6、查询"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#6、查询" class="headerlink" title="6、查询"></a>6、查询</h4><p>我们先来举一些简单的例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//select * from demo;</span></div><div class="line">db.demo.find();</div><div class="line"></div><div class="line"><span class="comment">//select * from demo where a = 1;</span></div><div class="line">db.demo.find(&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">//select a,b from demo where a = 1;</span></div><div class="line">db.demo.find(&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">1</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">//select * from demo where a = 1 order by name asc;</span></div><div class="line">db.demo.find(&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;).sort(&#123;<span class="string">"name"</span>:<span class="number">1</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">//select * from demo where a &gt; 1;</span></div><div class="line">db.demo.find(&#123;<span class="string">"a"</span>:&#123;<span class="attr">$gt</span>:<span class="number">1</span>&#125;&#125;);</div><div class="line"></div><div class="line"><span class="comment">//select * from demo where a like 'eee';</span></div><div class="line">db.demo.find(&#123;<span class="string">"name"</span>:<span class="string">"/^eee/"</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">//select * from demo limit 10 skip 20;</span></div><div class="line">db.demo.find().limit(<span class="number">10</span>).skip(<span class="number">20</span>);</div></pre></td></tr></table></figure>
<p>当然还有很多其他的语法形式，这里不再一一列举。下面列举一些常见的查询条件操作符</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$lt    #小于</div><div class="line">$lte   #小于等于</div><div class="line">$gt    #大于</div><div class="line">$gte   #大于等于</div><div class="line">$all   #完全匹配</div><div class="line">$mod   #取模</div><div class="line">$ne    #不等于</div><div class="line">$in    #在...内</div><div class="line">$nin   #不在...内</div><div class="line">$nor   #既不...也不...</div><div class="line">$or    #或</div><div class="line">$size  #匹配数组长度</div><div class="line">$type  #匹配数据类型</div><div class="line">slice()函数用于数组的查询</div><div class="line">db.demo.find(&#123;&#125;,&#123;favours:&#123;'$slice':1&#125;&#125;);     //仅返回数组中的前1项</div><div class="line">db.demo.find(&#123;&#125;,&#123;favours:&#123;'$slice':-1&#125;&#125;);    //仅返回数组中的最后一项</div><div class="line">db.demo.find(&#123;&#125;,&#123;favours:&#123;'$slice':[1,2]&#125;&#125;); //跳过前1项，返回接下来的10项</div><div class="line">db.demo.find(&#123;&#125;,&#123;favours:&#123;'$slice':[-1,1]&#125;&#125;);//跳过最后一项，返回接下来的1项</div></pre></td></tr></table></figure>
<h4 id="7、游标"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#7、游标" class="headerlink" title="7、游标"></a>7、游标</h4><p>MongoDB中的游标已经在各个版本的驱动程序中封装好了，不需要像传统SQL那样使用PL/SQL结构化编程来声明游标，在Shell中，游标的使用方式与Java中的迭代器十分相似。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cursor = db.demo.find();  <span class="comment">//声明游标</span></div><div class="line"><span class="keyword">while</span>(cursor.hasNext())&#123;      <span class="comment">//遍历集合</span></div><div class="line">  <span class="keyword">var</span> element = cursor.next();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="8、-WHERE"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#8、-WHERE" class="headerlink" title="8、$WHERE"></a>8、$WHERE</h4><p>$where操作符也是用来定位查询的，这个SQL中的where非常类似，前面我们说过，匹配文档的时候可以使用各种查询条件操作符来实现，但是为什么还要有这个操作符呢？因为有些查询是无法通过之前讲过 的那些查询操作符来实现的。值得注意的是，$where操作符的性能低，没有使用也无法使用索引机制。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//传统SQL</div><div class="line">select * from demo where a &gt; 1;</div><div class="line"></div><div class="line">//使用查询操作符实现</div><div class="line">db.demo.find(&#123;a:&#123;"$gt":1&#125;&#125;);</div><div class="line"></div><div class="line">//使用$where实现</div><div class="line">db.demo.find(&#123;"$where":"this.a &gt; 1"&#125;);</div><div class="line">db.demo.find("this.a &gt; 1");</div><div class="line">db.demo.find(function()&#123;</div><div class="line">  return this.a &gt; 1;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="9、-排序-amp-分页"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#9、-排序-amp-分页" class="headerlink" title="9、 排序&amp;分页"></a>9、 排序&amp;分页</h4><p>MongoDB中提供了相关的方法进行排序和分页，主要有limit(),skip()和sort()</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//每页10条记录，略过前面10条记录，按a降序排序</span></div><div class="line">db.demo.find().limit(<span class="number">10</span>).skip(<span class="number">10</span>).sort(&#123;<span class="attr">a</span>:<span class="number">-1</span>&#125;);</div></pre></td></tr></table></figure>
<h4 id="10、索引"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#10、索引" class="headerlink" title="10、索引"></a>10、索引</h4><p>MongoDB的索引机制与传统SQL的索引基本上是一样的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建索引</span></div><div class="line">db.demo.ensureIndex(&#123;<span class="string">'a'</span>:<span class="number">1</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">//创建子文档索引</span></div><div class="line">db.demo.ensureIndex(&#123;<span class="string">'a.b'</span>:<span class="number">-1</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">//创建复合索引</span></div><div class="line">db.demo.ensureIndex(&#123;</div><div class="line">   <span class="string">"a"</span>:<span class="number">1</span>,<span class="string">"b"</span>:<span class="number">-1</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//在MongoDB中，1表示升序，-1表示降序</span></div><div class="line"></div><div class="line"><span class="comment">//重新索引，一般是修改索引后重新索引操作</span></div><div class="line">db.demo.reIndex();</div><div class="line"></div><div class="line"><span class="comment">//删除索引</span></div><div class="line">db.demo.dropIndexes();</div></pre></td></tr></table></figure>
<h4 id="11、聚合"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#11、聚合" class="headerlink" title="11、聚合"></a>11、聚合</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">count()</div><div class="line"><span class="comment">//select count(a) from demo where a = 1;</span></div><div class="line">db.demo.count(&#123;<span class="string">"a"</span>:<span class="number">1</span>&#125;);</div><div class="line">distinct()</div><div class="line">db.demo.distinct(<span class="string">"zip-code"</span>,&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;);</div><div class="line">group(key,cond,reduce,initial)</div></pre></td></tr></table></figure>
<p>其中，</p>
<ul>
<li>key ：分组依据</li>
<li>cond： 查询条件</li>
<li>reduce：聚合操作</li>
<li>initial ： 指定聚合计数器的初始对象</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//sql表示</div><div class="line"><span class="keyword">select</span> a,b,<span class="keyword">sum</span>(c) <span class="keyword">from</span> demo <span class="keyword">where</span> a = <span class="number">1</span> <span class="keyword">group</span> <span class="keyword">by</span> a,b;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MongoDB表示</span></div><div class="line">db.demo.gourp(&#123;</div><div class="line">  <span class="string">"key"</span>:&#123;</div><div class="line">     <span class="string">"a"</span>: <span class="literal">true</span>,</div><div class="line">     <span class="string">"b"</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"cond"</span>:&#123;</div><div class="line">     <span class="string">"a"</span>:<span class="number">1</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="12、归纳一下MongoDB中的一些Tips"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#12、归纳一下MongoDB中的一些Tips" class="headerlink" title="12、归纳一下MongoDB中的一些Tips"></a>12、归纳一下MongoDB中的一些Tips</h4><p><strong>1、MongoDB与传统SQL的显著区别</strong></p>
<table>
<thead>
<tr>
<th>SQL</th>
<th>MongoDB</th>
</tr>
</thead>
<tbody>
<tr>
<td>表(Table)</td>
<td>集合(Collection)</td>
</tr>
<tr>
<td>行(row)</td>
<td>文档(document)</td>
</tr>
</tbody>
</table>
<p><strong>2、集合不能以system.开头， 这是因为MongoDB中的系统集合保持的前缀。比如</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.system.update(<span class="built_in">document</span>);  <span class="comment">//错误</span></div></pre></td></tr></table></figure>
<p><strong>3、 ObjectId类型是_id的默认类型，也可以自己指定其数据类型。MongoDB的初衷是设计成一个分布式的数据库，所以不会自动实现_id的自增。插入文档时，如果没有指定_id的值，则系统自动创建一个ObjectId类型的值，一般在客户端的驱动程序中完成。</strong><br><strong>4、插入文档时，MongoDB会解析BSON数据，BSON数据格式与JSON基本一致，在MongoDB中称为BSON。插入时会检查是否包含_id以及检查文档数据是否超过16MB,其余全部不作检查，从而实现其高效率性。</strong><br><strong>5、MongoDB在插入数据时，不会执行插入数据的代码，而是将BSON数据直接写入，不作任何的数据验证，所以不存在类似于SQL中的注入风险。</strong></p>
<h4 id="说明"><a href="/2016/07/08/玩转MongoDB之基础杂萃/#说明" class="headerlink" title="说明"></a>说明</h4><p>本篇文章也是笔者自己在学习过后总结出来的。也是针对习惯于传统SQL的简友们写的，传统的SQL数据库与NoSQL个人感觉差别还算是挺大的。刚开始接触NoSQL的时候最大的不适应就是在MongoDB中是不需要设计表和表结构的，全是基于JSON的数据操作，所以其逻辑原理都在程序代码中实现，而MongoDB本身只负责分布式的数据存储。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二十分钟学会Javascript高级知识]]></title>
      <url>/2016/06/05/%E4%BA%8C%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9AJavascript%E9%AB%98%E7%BA%A7%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>Javascript是一种动态脚本语言，而且还是弱类型的语言。如果大家在之前学习过Java或者c#等面向对象的高级语言，然后再来学习Javascript，那么你们肯定会觉得很多地方都是与高级语言一致的，于是觉得只要花个半天时间就能“学完”所谓的Javascript了。但是，这样也遗留下了很多大家容易忽略的知识点，而这些知识点，个人觉得是Javascript的高级进阶知识点。本篇文章从小白的角度总结了一些在Javascript中容易掉下的坑。</p>
<a id="more"></a>
<h4 id="进阶一：能不能实现同方法名重载？"><a href="/2016/06/05/二十分钟学会Javascript高级知识/#进阶一：能不能实现同方法名重载？" class="headerlink" title="进阶一：能不能实现同方法名重载？"></a>进阶一：能不能实现同方法名重载？</h4><p>在高级语言中，方法的重载时很普遍的。那什么是重载？重载就是方法名相同，返回值和参数列表不完全相同的多个方法。以Java为例，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">demo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">demo</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span>;</div></pre></td></tr></table></figure>
<p>上面这些方法的重载是没有任何问题的，但是，在Javascript中，是不是也可以呢？比如下面这个例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">a,b</span>)</span>&#123;    <span class="built_in">console</span>.log(a+b);&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">a,b,c</span>)</span>&#123; <span class="built_in">console</span>.log(a+b+c);&#125;</div><div class="line"></div><div class="line">demo(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">demo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</div></pre></td></tr></table></figure>
<p>首先，Javascript的编译引擎是不会报错的。对于类似于函数重载的方法声明，Javascript会认为所有的方法名都是唯一的，每个方法名是每个方法的唯一标识，所以对于类似上面代码的这种重载是无效的，但是，编译器不会报错，而是会进行覆盖，先声明的方法会被后声明的同名方法所替代，也就是说，所有的demo方法都会指向demo(a,b,c)这个方法。所以输出结果，显而易见：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="literal">NaN</span>                  <span class="comment">//demo(1,2)的执行结果，因为 c == undefined</span></div><div class="line"><span class="number">6</span>                    <span class="comment">//demo(1,2,3)的执行结果，1+2+3 = 6</span></div></pre></td></tr></table></figure>
<p>所以，结论就是，Javascript中是无法实现类似于高级语言的方法重载的。但是，可以通过方法中的属性arguments来判断有多少个参数，从而实现方法的调用上重载，形式上非重载，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> length = <span class="built_in">arguments</span>.length;  <span class="comment">//判断参数个数</span></div><div class="line">    <span class="keyword">if</span>(length==<span class="number">2</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] + argument[<span class="number">1</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(length==<span class="number">3</span>)&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] + argument[<span class="number">1</span>] + <span class="built_in">arguments</span>[<span class="number">2</span>]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">demo(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">demo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</div></pre></td></tr></table></figure>
<p>则其输出结果如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure>
<h4 id="进阶二：-this指向问题"><a href="/2016/06/05/二十分钟学会Javascript高级知识/#进阶二：-this指向问题" class="headerlink" title="进阶二： this指向问题"></a>进阶二： this指向问题</h4><p>在Javascript中，一个隐藏着的比较大的坑莫过于this的指向问题了。如果没有仔细了解其中的原理，那么肯定会被指来指去的this所困扰，接下来主要通过一些小例子来阐述this的作用机制。</p>
<p><strong>指向浏览器全局对象:Window</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p>那么，上述这段代码的结果是什么呢?很明显，这里的this指向的是当前的窗体本身，打印出来的结果是object Window。所以，在这种情况下指向的就是当前浏览器窗体本身。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">demo();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码的结果，仍然是object Window,所以还是指向当前窗体本身。所以，我们可以通过this关键字来访问所有的全局变量，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码的结果为 1</p>
<p><strong>指向创建的对象本身:Object</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">a,b,c</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.a = a;</div><div class="line">    <span class="keyword">this</span>.b = b;</div><div class="line">    <span class="keyword">this</span>.c = c;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> demo(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</div><div class="line">alert(obj.a+<span class="string">" "</span>+obj.b+<span class="string">" "</span>+obj.c);</div></pre></td></tr></table></figure>
<p>在方法demo内部的this则指向了自己本身，这里的输出结果为1 2 3,在Javascript中，一个方法也是一个对象。<br>所以，总的来说，this关键字总的来说可以指向以下两种对象：<br>要么指向全局对象，要么指向对象自己本身。</p>
<h4 id="进阶三：-作用域问题"><a href="/2016/06/05/二十分钟学会Javascript高级知识/#进阶三：-作用域问题" class="headerlink" title="进阶三： 作用域问题"></a>进阶三： 作用域问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">0</span>;                            <span class="comment">//a 具有全局作用域</span></div><div class="line"><span class="keyword">var</span> b = <span class="number">0</span>;                        <span class="comment">//b 也具有全局作用域</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;                    <span class="comment">//这里的a和b只能在demo()内访问了，具有局域作用域</span></div><div class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">    alert(a+<span class="string">" "</span>+b);</div><div class="line">    alert(<span class="keyword">this</span>.a + <span class="string">" "</span>+ <span class="keyword">this</span>.b);  <span class="comment">//this指向的是全局对象Window</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">demo();</div></pre></td></tr></table></figure>
<p>1.未使用var关键字声明在全局作用域下不具备变量提升的性质。本质上，没有使用var声明的不是一个变量，只是不使用 var 关键字创建的只是全局对象的属性(全局执行上下文中的变量对象使用全局对象自身实现)，它并不是一个变量。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">alert(a);  <span class="comment">//undefined</span></div><div class="line">alert(b);  <span class="comment">//Can't find variable: b</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">b = <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">//此处修改由简友ssbunny提出，非常感谢（2016-07-05）</span></div></pre></td></tr></table></figure>
<p>2.在方法中使用var关键字声明的变量是局部变量<br>3.在全局区域使用var关键字声明的变量是全局变量<br>4.虽然作用域问题谈不上高级知识，但是很容易被理解错，所以让在这里复习以下</p>
<h4 id="进阶四：-闭包问题"><a href="/2016/06/05/二十分钟学会Javascript高级知识/#进阶四：-闭包问题" class="headerlink" title="进阶四： 闭包问题"></a>进阶四： 闭包问题</h4><p>在Javascript中，什么是闭包？<br>通俗一点地讲，闭包就是在函数内部声明函数，并且该函数中访问了方法内的局部变量的语法结构，这种语法结构和面向对象的思想其实本质上是一致的 (类似于将一个方法理解成一个类)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          a++;            </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种结构称之为闭包，那为什么要使用闭包?</p>
<ul>
<li>由于变量的作用域不同，外部无法访问内部区域的变量，而内部区域的变量可以访问外部区域的变量。如果要在方法外部访问方法的内部变量，就必须通过函数内部定义函数的方法来返回函数内部的变量。</li>
<li>理解起来和OO思想的对象是一致的。一般，我们无法直接访问类中的私有成员，但是，我们可以通过定义一些成员方法来访问。所以个人觉得闭包的思想其实和面向对象的思想是差不多的。</li>
<li>那好，为什么要使用闭包？首先，使用闭包可以减少不必要的全局变量，比如一个计数器变量，在脚本中有多个地方需要使用到，那么如果不想使用全局变量进行声明，则可以使用闭包。</li>
<li>闭包也是有不好的地方滴！如果使用了闭包，那么该方法内的局部变量（闭包中访问到的那些）会一直驻留在内存中，如果闭包使用不当，会降低整个应用程序的性能。</li>
</ul>
<p>请大家阅读以下的例子加以理解：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;            </div><div class="line">        <span class="keyword">return</span> ++count;           <span class="comment">// 注意：count 变量一直驻留在内存中</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cal = demo();</div><div class="line"><span class="keyword">var</span> count1 = cal();                    <span class="comment">//count == 1</span></div><div class="line"><span class="keyword">var</span> count2 = cal();                    <span class="comment">//count == 2</span></div></pre></td></tr></table></figure>
<p>那么，如何释放在闭包中使用到的变量的内存呢？其实Javascript中支持直接通过赋空值来释放垃圾的，就上述代码，只需要将方法的引用赋值为空就可以了:cal=null</p>
<h4 id="进阶五：-如何复制一个对象"><a href="/2016/06/05/二十分钟学会Javascript高级知识/#进阶五：-如何复制一个对象" class="headerlink" title="进阶五： 如何复制一个对象"></a>进阶五： 如何复制一个对象</h4><p>在Javascript中，有一种可以遍历对象属性的方法，那就是for…in…结构，同时我们可以借助这种结构来实现一个对象的复制，这里指的是深度复制，不是浅复制！</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">       <span class="keyword">var</span> newObject = &#123;&#125;;                                <span class="comment">//创建一个新的空对象</span></div><div class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> attribute <span class="keyword">in</span> o)&#123;</div><div class="line">             newObject[attribute] = o[attribute];          <span class="comment">//拷贝对象中的每一个属性</span></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> newObject;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> copyObject = copy(oldObject);</div></pre></td></tr></table></figure>
<h4 id="进阶六：-原型问题"><a href="/2016/06/05/二十分钟学会Javascript高级知识/#进阶六：-原型问题" class="headerlink" title="进阶六： 原型问题"></a>进阶六： 原型问题</h4><p>在需要访问对象的内部属性，或者说是方法的局部变量的时候，我们可以通过闭包的形式来访问。如果我们需要在对象内定义一些方法供外部调用，就需要使用到原型和原型链。<br>在Javascript中，是不支持继承的，但是可以通过原型实现一些继承的功能。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>)</span>&#123;&#125;;          <span class="comment">//声明一个对象类型(类似于高级语言中的类)</span></div><div class="line"></div><div class="line">Demo.prototype = &#123;          <span class="comment">//定义对象类型中的方法，使用到的是原型模型</span></div><div class="line">    gt : <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;     <span class="comment">//定义一个比较a和b的值得方法，如果a&gt;b返回true</span></div><div class="line">        <span class="keyword">return</span> (a&gt;b);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">add</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;       <span class="comment">//定义一个不限定参数个数的加法运算</span></div><div class="line">        <span class="keyword">var</span> length = <span class="built_in">arguments</span>.length;</div><div class="line">        alert(length);</div><div class="line">        <span class="keyword">var</span> result = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</div><div class="line">            result += <span class="built_in">arguments</span>[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Demo();             <span class="comment">//声明一个对象</span></div><div class="line"><span class="keyword">var</span> isGt = demo.gt(<span class="number">3</span>,<span class="number">2</span>);           <span class="comment">//3&gt;2 true</span></div><div class="line"><span class="keyword">var</span> add1 = demo.add(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>);        <span class="comment">//1+3+4 = 8</span></div><div class="line"><span class="keyword">var</span> add2 = demo.add(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);      <span class="comment">//1+3+4+5 = 13</span></div></pre></td></tr></table></figure>
<p>个人感觉这个原型模式与高级语言中的类的成员方法是很类似的。通过定义Javascript中的原型方法，从而实现一个对象中的多个方法的效果。除了上面这种定义方式之外，还有下面的这种定义方式。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"></div><div class="line"> Demo.prototype = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       gt = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">             <span class="keyword">return</span> a + b;</div><div class="line">       &#125;;</div><div class="line">       add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> length = <span class="built_in">arguments</span>.length; </div><div class="line">            <span class="keyword">var</span> result = <span class="number">0</span>; </div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;length;i++)&#123; </div><div class="line">                 result += <span class="built_in">arguments</span>[i];</div><div class="line">            &#125; </div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">             <span class="attr">gt</span> : gt,                       <span class="comment">//返回方法的映射</span></div><div class="line">             add : add</div><div class="line">      &#125;</div><div class="line">&#125;(); </div><div class="line"></div><div class="line"><span class="comment">//或者，直接在function中定义原型方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a+b;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>值得注意的是，如果同时在函数内和方法的prototype属性同时声明了同一个方法，那么Javascript会从下往上寻找最顶层的那个方法作为有效方法，如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      add = <span class="function"><span class="keyword">function</span>(<span class="params">a+b</span>)</span>&#123;<span class="keyword">return</span> a+b;&#125;;                <span class="comment">//直接在方法内定义add方法，在最顶层定义</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"> Demo.prototype = &#123;                                    <span class="comment">//通过prototype属性定义add方法</span></div><div class="line">    add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a+b+c;</div><div class="line">    &#125;;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Demo();  <span class="comment">//最顶层的方法add(a,b)是有效的，而add(a,b,c)是无效的</span></div><div class="line">demo.add(<span class="number">1</span>,<span class="number">2</span>);          <span class="comment">//1+2 = 3</span></div><div class="line">demo.add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);        <span class="comment">//1+2+undefined = NaN</span></div></pre></td></tr></table></figure>
<h4 id="进阶七：-等于与绝对等于问题"><a href="/2016/06/05/二十分钟学会Javascript高级知识/#进阶七：-等于与绝对等于问题" class="headerlink" title="进阶七： 等于与绝对等于问题"></a>进阶七： 等于与绝对等于问题</h4><p>在Javascript中，有两种数据类型，一种是基本数据类型，一种是引用数据类型，即常说的对象类型。而基本数据类型中又包含有string、boolean、number、null和undefined五种基本数据类型。如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>String</td>
<td>字符串，具有无限个值</td>
</tr>
<tr>
<td>Boolean</td>
<td>布尔值，具有ture或者false</td>
</tr>
<tr>
<td>Number</td>
<td>数字，具有无限个值</td>
</tr>
<tr>
<td>Null</td>
<td>空类型，具有一个值null</td>
</tr>
<tr>
<td>Undefined</td>
<td>未定义类型，具有一个值undefined</td>
</tr>
</tbody>
</table>
<p>需要注意的是，typeof null == object，而typeof undefined == undefined。举个例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">"123"</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">123</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(a==b);    <span class="comment">//返回true</span></div><div class="line"><span class="built_in">console</span>.log(a===b);   <span class="comment">//返回false，因为类型不同</span></div></pre></td></tr></table></figure>
<p>好了，由于时间关系，本篇关于对Javascript高级进阶的总结比较仓促，还有很多额外的知识点还没有添加进来。其他的高阶内容将会在日后陆续更新进来，欢迎大家阅读。</p>
<p>还有，就是，你在这二十分钟内学会了吗？</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二十分钟学会Javascript初级知识]]></title>
      <url>/2016/06/05/%E4%BA%8C%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9AJavascript%E5%88%9D%E7%BA%A7%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>本篇文章主要介绍了Javascript的一些初级的知识。</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/1784374-19c91d87d8923fa2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="二十分钟学会Javascript初级语法，图片来自网络"></p>
<h6 id="Javascript基本用法"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript基本用法" class="headerlink" title="Javascript基本用法"></a>Javascript基本用法</h6><ol>
<li><p>Javascript代码写在<code>&lt;script&gt;</code>标签内</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="comment">//Javascript代码写在这里</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Javascript代码可以写在<code>body</code>标签内</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></div><div class="line">    <span class="comment">//Javascript代码写在这里</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/body&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Javascript代码可以写在<code>&lt;head&gt;</code>标签内</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></div><div class="line">    <span class="comment">//Javascript代码写在这里</span></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/head&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>Javascript代码可以写在外部的独立js文件内</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"xxx.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/head&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>在<code>&lt;body&gt;</code>和<code>&lt;head&gt;</code>标签内的Javascript代码是不同的，在<code>&lt;head&gt;</code>标签内的JS代码在页面加载的时候就会运行，而在<code>&lt;body&gt;</code>内的JS代码只有在需要的时候才会执行。一般会把多个页面都是用到的JS代码放到独立的js文件中。</p>
</blockquote>
<h6 id="Javascript显示数据的方法"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript显示数据的方法" class="headerlink" title="Javascript显示数据的方法"></a>Javascript显示数据的方法</h6><ol>
<li>使用弹出框<code>window.alert()</code>或者<code>alert()</code>方法。其中，<code>window</code>是Javascript的一个内置对象，可省略不写。</li>
<li>使用<code>document.write()</code>方法直接写入html源码。</li>
<li>使用<code>console.log()</code>方法将调试信息打印到浏览器控制台。</li>
</ol>
<h6 id="Javascript字面量"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript字面量" class="headerlink" title="Javascript字面量"></a>Javascript字面量</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数字字面量（Number）</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">3.14</span>;           <span class="comment">//浮点数</span></div><div class="line"><span class="keyword">var</span> b = <span class="number">1</span>;              <span class="comment">//整数</span></div><div class="line"><span class="keyword">var</span> c = <span class="number">13e5</span>;           <span class="comment">//科学计数法</span></div><div class="line"></div><div class="line"><span class="comment">//字符串字面量（String）</span></div><div class="line"><span class="keyword">var</span> d = <span class="string">'string'</span>;       <span class="comment">//字符串</span></div><div class="line"><span class="keyword">var</span> e = <span class="string">"string"</span>;       <span class="comment">//字符串</span></div><div class="line"></div><div class="line"><span class="comment">//数组和对象字面量（Array &amp; Object）</span></div><div class="line"><span class="keyword">var</span> f = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];        <span class="comment">//数组</span></div><div class="line"><span class="keyword">var</span> g = &#123;<span class="attr">a</span>:<span class="string">"a"</span>,<span class="attr">b</span>:<span class="string">"b"</span>&#125;   <span class="comment">//对象</span></div><div class="line"></div><div class="line"><span class="comment">//函数字面量（Function）</span></div><div class="line"><span class="keyword">var</span> h = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;   <span class="comment">//函数</span></div></pre></td></tr></table></figure>
<h6 id="Javascript变量"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript变量" class="headerlink" title="Javascript变量"></a>Javascript变量</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">   <span class="keyword">var</span> a = <span class="number">1</span>;          <span class="comment">//这是一个全局变量</span></div><div class="line">   b = <span class="number">2</span>;              <span class="comment">//这是一个全局变量</span></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> c = <span class="number">3</span>;       <span class="comment">//这是一个局部变量</span></div><div class="line">      d = <span class="number">4</span>;           <span class="comment">//这是一个全局变量</span></div><div class="line">   &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意，没有使用<code>var</code>关键字标识的字段都是全局变量，使用了<code>var</code>关键字标识的变量如果在方法内声明，则为局部变量，否则也为全局变量，主要观测其所在的作用域。</p>
</blockquote>
<h6 id="Javascript语句标识符"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript语句标识符" class="headerlink" title="Javascript语句标识符"></a>Javascript语句标识符</h6><blockquote>
<p>在Javascript中，也有类似于Java和C#等高级面向对象语法的语句标识符，主要有break/try…catch/continue/do…while/for/for..in/function/if…else/return/switch/throw/while/var</p>
</blockquote>
<h6 id="Javascript代码折行"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript代码折行" class="headerlink" title="Javascript代码折行"></a>Javascript代码折行</h6><p>使用<code>\\</code>可以对JS代码进行折行处理:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">'hello \</span></div><div class="line">world');</div></pre></td></tr></table></figure>
<h6 id="Javascript注释语法"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript注释语法" class="headerlink" title="Javascript注释语法"></a>Javascript注释语法</h6><ol>
<li>使用<code>//</code>进行单行注释</li>
<li>使用<code>/* ... */</code>进行多行注释</li>
</ol>
<h6 id="Javascript数据类型"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript数据类型" class="headerlink" title="Javascript数据类型"></a>Javascript数据类型</h6><ol>
<li>字符串（String）类型</li>
<li>数字（Number）类型</li>
<li>布尔（Boolean）类型</li>
<li>数组（Array）类型</li>
<li>对象（Object）类型</li>
<li>空（Null）类型</li>
<li>未定义（Undefined）类型</li>
</ol>
<h6 id="Javascript对象"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript对象" class="headerlink" title="Javascript对象"></a>Javascript对象</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;         <span class="comment">//创建对象</span></div><div class="line">	a:<span class="string">"a"</span>,</div><div class="line">    <span class="attr">b</span>:<span class="string">"b"</span>,</div><div class="line">    <span class="attr">c</span>:<span class="number">2</span>,</div><div class="line">    <span class="attr">method</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> d = obj.a;          <span class="comment">//访问对象属性</span></div><div class="line"><span class="keyword">var</span> e = obj.b;</div><div class="line"><span class="keyword">var</span> f = obj.method;     <span class="comment">//访问对象方法</span></div></pre></td></tr></table></figure>
<h6 id="Javascript函数"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript函数" class="headerlink" title="Javascript函数"></a>Javascript函数</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//无返回值函数</span></div><div class="line">	<span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;   <span class="comment">//有返回值的函数</span></div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = b();    <span class="comment">//调用函数</span></div></pre></td></tr></table></figure>
<h6 id="Javascript作用域"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript作用域" class="headerlink" title="Javascript作用域"></a>Javascript作用域</h6><ol>
<li>在Javascript中，对象和函数也是一种变量。</li>
<li>作用域是可访问变量、对象和函数的集合。</li>
<li>函数作用域：作用域在函数内修改。</li>
<li>变量在函数内声明，则其作用域为局部作用域。</li>
<li>全局变量有全局作用域，网页中所有的脚本和网页都可以使用。</li>
</ol>
<h6 id="Javascript事件"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript事件" class="headerlink" title="Javascript事件"></a>Javascript事件</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">some-HTML-element</span> <span class="attr">some-event</span>=<span class="string">'some JavaScript'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">some-HTML-element</span> <span class="attr">some-event</span>=<span class="string">"some JavaScript"</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>常用的HTML事件有：onchange/onclick/onmouseover/onmouseout/onkeydown/onload</p>
</blockquote>
<h6 id="绝对等于和绝对不等于"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#绝对等于和绝对不等于" class="headerlink" title="绝对等于和绝对不等于"></a>绝对等于和绝对不等于</h6><ol>
<li><code>===</code>表示绝对等于（值和类型都相等）</li>
<li><code>!==</code>表示绝对不等于(值或类型不相等)</li>
</ol>
<h6 id="遍历对象的属性"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#遍历对象的属性" class="headerlink" title="遍历对象的属性"></a>遍历对象的属性</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>:<span class="string">"Anderson"</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;</div><div class="line"><span class="keyword">for</span>(x <span class="keyword">in</span> person)&#123;</div><div class="line">   txt = txt + person[x];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="Javascript-typeof操作符"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript-typeof操作符" class="headerlink" title="Javascript typeof操作符"></a>Javascript typeof操作符</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="string">"Anderson"</span>    <span class="comment">//返回string</span></div><div class="line">   <span class="keyword">typeof</span> <span class="number">3.14</span>          <span class="comment">//返回number</span></div><div class="line">   <span class="keyword">typeof</span> <span class="literal">false</span>         <span class="comment">//返回boolean</span></div><div class="line">   <span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]     <span class="comment">//返回object</span></div><div class="line"></div><div class="line">   <span class="keyword">var</span> a;</div><div class="line">   <span class="keyword">typeof</span> a             <span class="comment">//返回undefined</span></div><div class="line"></div><div class="line">   a = <span class="literal">null</span>;</div><div class="line">   <span class="keyword">typeof</span> a             <span class="comment">//返回null</span></div><div class="line"></div><div class="line">   <span class="keyword">typeof</span> <span class="literal">undefined</span>             <span class="comment">// undefined</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">null</span>                  <span class="comment">// object</span></div></pre></td></tr></table></figure>
<h6 id="Javascript-构造器属性"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#Javascript-构造器属性" class="headerlink" title="Javascript 构造器属性"></a>Javascript 构造器属性</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">    <span class="string">"John"</span>.constructor                 <span class="comment">// 返回函数 String()  &#123; [native code] &#125;</span></div><div class="line">    (<span class="number">3.14</span>).constructor                 <span class="comment">// 返回函数 Number()  &#123; [native code] &#125;</span></div><div class="line">    <span class="literal">false</span>.constructor                  <span class="comment">// 返回函数 Boolean() &#123; [native code] &#125;</span></div><div class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].constructor              <span class="comment">// 返回函数 Array()   &#123; [native code] &#125;</span></div><div class="line">    &#123;<span class="attr">name</span>:<span class="string">'John'</span>, <span class="attr">age</span>:<span class="number">34</span>&#125;.constructor  <span class="comment">// 返回函数 Object()  &#123; [native code] &#125;</span></div><div class="line">    <span class="keyword">new</span> <span class="built_in">Date</span>().constructor             <span class="comment">// 返回函数 Date()    &#123; [native code] &#125;</span></div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;.constructor         <span class="comment">// 返回函数 Function()&#123; [native code] &#125;</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">myArray</span>) </span>&#123;</div><div class="line">    	<span class="keyword">return</span> myArray.constructor.toString().indexOf(<span class="string">"Array"</span>) &gt; <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isDate</span>(<span class="params">myDate</span>) </span>&#123;</div><div class="line">    	<span class="keyword">return</span> myDate.constructor.toString().indexOf(<span class="string">"Date"</span>) &gt; <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="JavaScript-变量提升"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#JavaScript-变量提升" class="headerlink" title="JavaScript 变量提升"></a>JavaScript 变量提升</h6><ol>
<li>JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。变量可以在使用后声明，也就是变量可以先使用再声明</li>
<li>JavaScript 初始化不会提升</li>
</ol>
<h6 id="函数提升（Hoisting）"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#函数提升（Hoisting）" class="headerlink" title="函数提升（Hoisting）"></a>函数提升（Hoisting）</h6><ol>
<li>提升（Hoisting）是 JavaScript 默认将当前作用域提升到前面去的的行为。</li>
<li>提升（Hoisting）应用在变量的声明与函数的声明。</li>
</ol>
<h6 id="JavaScript-严格模式-use-strict"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#JavaScript-严格模式-use-strict" class="headerlink" title="JavaScript 严格模式(use strict)"></a>JavaScript 严格模式(use strict)</h6><ol>
<li>“use strict” 指令在 JavaScript 1.8.5 (ECMAScript5) 中新增</li>
<li>它不是一条语句，但是是一个字面量表达式，在 JavaScript 旧版本中会被忽略</li>
<li>“use strict” 的目的是指定代码在严格条件下执行。严格模式下你不能使用未声明的变量。</li>
</ol>
<h6 id="href-”-”与href-”javascript-void-0-”的区别"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#href-”-”与href-”javascript-void-0-”的区别" class="headerlink" title="href=”#”与href=”javascript:void(0)”的区别"></a>href=”#”与href=”javascript:void(0)”的区别</h6><ol>
<li><code>#</code> 包含了一个位置信息，默认的锚是<code>#top</code> 也就是网页的上端。</li>
<li>而<code>javascript:void(0)</code>, 仅仅表示一个死链接。</li>
<li>在页面很长的时候会使用 <code>#</code> 来定位页面的具体位置，格式为：<code># + id</code>。</li>
<li>如果你要定义一个死链接请使用 <code>javascript:void(0)</code> 。</li>
</ol>
<h6 id="附录-文章更新日志"><a href="/2016/06/05/二十分钟学会Javascript初级知识/#附录-文章更新日志" class="headerlink" title="附录 文章更新日志"></a>附录 文章更新日志</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2016-06-03 初稿</div><div class="line">2016-06-06 修正文章中的错别字</div><div class="line">2016-06-22 修正文章中的一处笔误</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二十分钟学会Javascript中级知识]]></title>
      <url>/2016/06/04/%E4%BA%8C%E5%8D%81%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9AJavascript%E4%B8%AD%E7%BA%A7%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>本篇文章，是一篇关于Javascript的中级进阶总结。笔者希望大家能够在30分钟之内阅读完并认真体会，多敲代码，多总结，毕竟Javascript本身并不难。</p>
<a id="more"></a>
<h4 id="谈谈Javascript的对象"><a href="/2016/06/04/二十分钟学会Javascript中级知识/#谈谈Javascript的对象" class="headerlink" title="谈谈Javascript的对象"></a>谈谈Javascript的对象</h4><p>Javascript作为一种弱语言类型的语言，同时也是一种动态类型的语言。在使用Javascript的过程中，也常常需要用到Javascript的内置对象以及自定义的对象。</p>
<h4 id="如何创建对象"><a href="/2016/06/04/二十分钟学会Javascript中级知识/#如何创建对象" class="headerlink" title="如何创建对象"></a>如何创建对象</h4><p>Javascript是一种弱语言类型的语言，不必像Java、C#等高级语言那样必须通过构造函数的方法来创建对象，在Javascript中，主要有两种创建对象的方法，一种是直接通过new关键字定义，一种是通过函数来定义。如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种方式，直接通过new创建对象；</span></div><div class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">demo.name = <span class="string">"Anderson"</span>;</div><div class="line">demo.sex = <span class="string">"male"</span>;</div><div class="line">demo.age = <span class="number">23</span>;</div><div class="line"></div><div class="line"><span class="comment">//第二种格式，直接实例化,基本上和Json语法是一致的，一般作为第一种方式的替代语法。</span></div><div class="line"><span class="keyword">var</span> demo = &#123;<span class="attr">name</span>:<span class="string">"Anderson"</span>,<span class="attr">sex</span>:<span class="string">"male"</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">//第三种格式，通过构造器来创建对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params">name,sex,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.sex = sex;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Demo(<span class="string">"Andeson"</span>,<span class="string">"male"</span>,<span class="number">25</span>);</div></pre></td></tr></table></figure>
<h4 id="如何修改对象"><a href="/2016/06/04/二十分钟学会Javascript中级知识/#如何修改对象" class="headerlink" title="如何修改对象"></a>如何修改对象</h4><p>Javascript和高级语言的对象语法是不一样的，总的来说，其限制比较少，当创建完对象后，可以对对象的属性、方法等进行动态的修改，比如添加一个新的属性，添加一个新的方法等。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demo = &#123;<span class="attr">Name</span>:<span class="string">"Anderson"</span>&#125;；</div><div class="line">demo.Sex = <span class="string">"male"</span>;</div></pre></td></tr></table></figure>
<h4 id="理解Javascript中的数字对象"><a href="/2016/06/04/二十分钟学会Javascript中级知识/#理解Javascript中的数字对象" class="headerlink" title="理解Javascript中的数字对象"></a>理解Javascript中的数字对象</h4><p>在Javascript中，所有的数字都是64位，所有数字均由浮点类型组成。Javascript中采用的是IEEE754标准定义的64位浮点数格式表示数字，它能表示最大值为±1.7976931348623157 x 10308，最小值为±5 x 10 -324。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demo1 = <span class="number">7</span>;       <span class="comment">//十进制表示法</span></div><div class="line"><span class="keyword">var</span> demo2 = <span class="number">07</span>;      <span class="comment">//八进制表示法</span></div><div class="line"><span class="keyword">var</span> demo3 = <span class="number">0x12</span>;    <span class="comment">//十六进制表示法</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> demo4 = <span class="number">12e12</span>;   <span class="comment">//科学计数法表示法</span></div><div class="line"><span class="keyword">var</span> demo5 = <span class="number">12e-12</span>;  <span class="comment">//科学计数法表示法</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> demo7 = <span class="number">128</span>;</div><div class="line"><span class="keyword">var</span> demo8 = demo7.toString(<span class="number">16</span>);  <span class="comment">//转化为十六进制</span></div><div class="line"><span class="keyword">var</span> demo9 = demo7.toString(<span class="number">8</span>);   <span class="comment">//转化为八进制</span></div><div class="line"><span class="keyword">var</span> demo10= demo7.toString(<span class="number">2</span>);   <span class="comment">//转化为二进制</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> demo11= <span class="literal">Infinity</span>;      <span class="comment">//无穷大表示法</span></div><div class="line"><span class="keyword">var</span> demo12= <span class="built_in">isNaN</span>(<span class="number">100</span>);    <span class="comment">//非数字值表示法</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> demo13= <span class="keyword">typeof</span>(<span class="number">12</span>);              <span class="comment">//数字的类型为 Number</span></div><div class="line"><span class="keyword">var</span> demo14= <span class="keyword">typeof</span>(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">12</span>));  <span class="comment">//Number的类型为Object</span></div><div class="line"><span class="keyword">var</span> demo15 = (demo13 == demo14);     <span class="comment">//两者相等</span></div><div class="line"><span class="keyword">var</span> demo16 = (demo13=== demo14);     <span class="comment">//两者不相等</span></div></pre></td></tr></table></figure>
<h4 id="理解Javascript中的字符串对象"><a href="/2016/06/04/二十分钟学会Javascript中级知识/#理解Javascript中的字符串对象" class="headerlink" title="理解Javascript中的字符串对象"></a>理解Javascript中的字符串对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">"Hello,Anderson"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> demo1 = str[<span class="number">0</span>];               <span class="comment">//通过索引，获取字符串中的字符,超出最大值则返回undefined</span></div><div class="line"><span class="keyword">var</span> demo2 = str.indexOf(<span class="string">"H"</span>);     <span class="comment">//获取目标字符串在源字符串中的位置，找不到则返回 -1</span></div><div class="line"><span class="keyword">var</span> demo3 = str.length;           <span class="comment">//获取字符串的长度</span></div><div class="line"><span class="keyword">var</span> demo4 = str.lastIndexOf(<span class="string">"H"</span>); <span class="comment">//获取目标字符串在源字符串中的位置，从串尾开始找，找不到返回-1</span></div><div class="line"><span class="keyword">var</span> demo5 = str.match(<span class="string">"Anderson"</span>);<span class="comment">//从源串中匹配目标串，若有，则返回目标串，否则，返回返回 null</span></div><div class="line"><span class="keyword">var</span> demo8 = str.replace(<span class="string">"A"</span>,<span class="string">"d"</span>); <span class="comment">//将源串中的目标串替换为替换串</span></div><div class="line"><span class="keyword">var</span> demo9 = str.toUpperCase();    <span class="comment">//转换为大写</span></div><div class="line"><span class="keyword">var</span> demo10= str.toLowerCase();    <span class="comment">//转换为小写</span></div><div class="line"><span class="keyword">var</span> demo11= str.split(<span class="string">"d"</span>);       <span class="comment">//转化为数组</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> demo12= <span class="string">"\'"</span>;       <span class="comment">//表示单引号</span></div><div class="line"><span class="keyword">var</span> demo13= <span class="string">"\""</span>;       <span class="comment">//表示双引号</span></div><div class="line"><span class="keyword">var</span> demo14= <span class="string">"\\"</span>;       <span class="comment">//表示斜杠</span></div><div class="line"><span class="keyword">var</span> demo15= <span class="string">"\n"</span>;       <span class="comment">//表示换行</span></div><div class="line"><span class="keyword">var</span> demo16= <span class="string">"\r"</span>;       <span class="comment">//表示回车</span></div><div class="line"><span class="keyword">var</span> demo17= <span class="string">"\t"</span>;       <span class="comment">//表示制表符</span></div><div class="line"><span class="keyword">var</span> demo18= <span class="string">"\b"</span>;       <span class="comment">//表示空格</span></div><div class="line"><span class="keyword">var</span> demo19= <span class="string">"\f"</span>;       <span class="comment">//表示换页</span></div></pre></td></tr></table></figure>
<h4 id="理解Javascript中的日期对象"><a href="/2016/06/04/二十分钟学会Javascript中级知识/#理解Javascript中的日期对象" class="headerlink" title="理解Javascript中的日期对象"></a>理解Javascript中的日期对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demo1 = <span class="keyword">new</span> <span class="built_in">Date</span>();            <span class="comment">//创建对象，当前日期</span></div><div class="line"><span class="keyword">var</span> demo2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">22e9</span>);        <span class="comment">//创建对象，毫秒数</span></div><div class="line"><span class="keyword">var</span> demo3 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2016-06-04"</span>);<span class="comment">//创建对象，日期字符串</span></div><div class="line"><span class="keyword">var</span> demo4 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>,<span class="number">5</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">12</span>,<span class="number">12</span>); <span class="comment">//创建对象，年月日时分秒</span></div><div class="line"><span class="keyword">var</span> demo5 = (demo1 &gt; demo2);        <span class="comment">//比较日期</span></div></pre></td></tr></table></figure>
<h4 id="理解Javascript中的数组对象"><a href="/2016/06/04/二十分钟学会Javascript中级知识/#理解Javascript中的数组对象" class="headerlink" title="理解Javascript中的数组对象"></a>理解Javascript中的数组对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> demo1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);       <span class="comment">//创建数组</span></div><div class="line"><span class="keyword">var</span> demo2 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];                <span class="comment">//创建数组</span></div><div class="line"><span class="keyword">var</span> demo3 = demo1.concat(demo2);      <span class="comment">//合并数组</span></div><div class="line"><span class="keyword">var</span> demo5 = demo1.concat(demo2,demo3);<span class="comment">//合并数组</span></div></pre></td></tr></table></figure>
<h4 id="理解Javascript中的正则对象RegExp"><a href="/2016/06/04/二十分钟学会Javascript中级知识/#理解Javascript中的正则对象RegExp" class="headerlink" title="理解Javascript中的正则对象RegExp"></a>理解Javascript中的正则对象RegExp</h4><p>RegExp是正则表达式(Regular Expression)的缩写。正则表达式主要用于文本的检索。其基本的语法形式如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern,modifiers);  <span class="comment">//通过构造方法创建正则对象</span></div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/pattern/m</span>odifiers;             <span class="comment">//直接声明正则对象</span></div><div class="line"></div><div class="line"><span class="comment">//其中，修饰符modifiers有两种，i和g，i表示不区分大小写，g表示全文检索</span></div><div class="line"><span class="comment">//pattern表示检索模型</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">"Hello, Anderson Lu"</span>；</div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/llo/gi</span>;</div><div class="line"><span class="keyword">var</span> demo1 = str.match(pattern);  <span class="comment">//使用实例</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> pattern2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"\\Lu\\gi"</span>);</div><div class="line"><span class="keyword">var</span> demo2 = pattern2.test(str);  <span class="comment">//判断str中是否有符合模式pattern2的串，返回true或者false</span></div><div class="line"><span class="keyword">var</span> demo3 = pattern2.exec(str);  <span class="comment">//返回匹配的字符串</span></div></pre></td></tr></table></figure>
<p>除此之外，还有一些其他的对象，比如Math算术和布尔等等。大家可以通过W3CSchool进行学习。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[程序员成长记]]></title>
      <url>/2016/05/09/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%88%90%E9%95%BF%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>我很羡慕那些很小就学会编程的人，这些人经常在童年或者初中开始就精通各种编程语言，大学之前就把所有该学的东西都学完了。也许是对于技术的痴迷，总觉得代码与我相见恨晚。和许许多多的在应试教育下的人一样，我也是在高考后才算真正的接触到电脑，接触到编程，那是在四年前。</p>
<p>我很清楚的记得当时学院的一门课程叫做《面向对象程序设计基础》，学的是C++的语法，对于刚接触编程的人来说，语法并不是最难的。让我最不适应的，是写代码的那种思维，或者说编程思想。我还记得学校机房里的ⅤC6.0那个丑陋的界面，但不可否认的是，我用那个丑陋的编译器写了一学期的代码，心潮澎湃。很多地方不理解，我就找着课本一个一个字符的敲上去。</p>
<p>于是，语法学习得差不多了，我就开始搞起其他的东西了。比如具有UI界面的基于C++的MFC应用程序，当时我搞了个计算器的小程序，心里乐开了花，满满的成就感。成就感是一件很奇葩的东西，能让你产生兴奋，还能激发你的兴趣。之后，又陆陆续续学了C#和Java。也许是太过痴迷，也许是太过迷恋那种编程带来的成就与自豪，我记得有段时间我的QQ空间中一大段的说说，日志，相册全都是关于自己开发出来的小东西。时间久了，我渐渐的发觉自己这样的生活未免太过单调，太过无知了，那些东西在现在看来简直一点技术难度都没有。</p>
<p>没错，有个词说得挺准，那就是装逼。不是本专业的人看了自己搞的那些东西，就会觉得特牛逼，而本专业的人看了，若是不懂，就会觉得特装逼，若懂，就会觉得这些个东西，人人都会。很奇怪的是，我个人认为，装逼是程序员成长路上的必经之路。比如你说你做过一个项目，会什么框架，会什么语言，但是只要稍微问问具体框架是怎么实现的或一些其他稍微深层次一点的问题，要么立马答不上来了，要么就不懂装懂地胡乱说一通来提高自己的逼格。装逼，想想也就是说，学的东西很多，知道怎么用，但只知道其中的一些皮毛，其余的啥都不懂。我曾看过一篇文章，管这样的人叫劣质程序员。这样的程序员永远只能在软件行业的最底层生存，因为他学会的那些，永远只是最基础的。所以我们经历了这个时期后，就要努力地摆脱劣质的本质。</p>
<p>我算是幸运的，我觉得我在Java方向上已经不再是劣质程序员了。我有自己的目标：全栈。何谓全栈？就是从前端到后台，从数据库到维护部署，样样精通的。显然，距离这个目标还差很远。脱离了装逼时期的我对技术的求知欲进一步提高了。现在我所认为的，所确信的就是那些你能后轻易实现出来的东西根本就没有任何难度，是不具备牛逼资格的。好在从两次企业实习中见识到了很多牛逼的人，从他们之中，我领悟到了修正后的学习方法。所以，在这个阶段的程序员已经具备了开发的能力，比如在一个星期内学习并使用之前完全没接触过的东西来开发项目，这是一种学习能力。如果你没用过Groovy，那你是否能在几天之内掌握构建工具Gradle并集成各种尚未使用过的Springboot，你能否在很短的时间内掌握Ruby，Lua，Python，Scala等等。所以在这个阶段，学习能力是你能否在软件生存下来的最大因素。当然，我还处在这个阶段中。</p>
<p>接下来的阶段，就是真正的牛逼阶段了。要么当上管理层，比如项目经理之类的，要么就以技术为线，要么专家，要么全栈。我很崇拜张小龙这样的人，为人低调，但是实打实的技术大牛。而现在回想以前的自己，或是当前周围的人，该装逼的还在装逼，只是阶段不同，心态也不同了。</p>
<p>好了，很久没有在简书上写心得了，今天赶了半天毕业论文突然心血来潮，索性就手抖笔滑写下了本文。但愿没有能力装逼的你学会装逼，有装逼能力的你学会摆脱装逼。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JQuery showLoading Plugin]]></title>
      <url>/2016/05/05/JQuery-showLoading-Plugin/</url>
      <content type="html"><![CDATA[<p>最近搞了一个Spring MVC的网站，使用的是JSP页面，在前端页面上，我希望做到，提交一个表单的同时不让用户点击其他的按钮，我希望能在提交数据的同时给出一个遮罩的loading动画，于是，上网找了很多插件，最后觉得找到了一个不错的，就是JQuery的showLoading插件。</p>
<a id="more"></a>
<p><strong>先来一个效果图</strong></p>
<p><img src="http://7xsegt.com1.z0.glb.clouddn.com/showLoading-1.png" alt="菊花效果"></p>
<p><strong>使用方法</strong></p>
<p>1) <a href="http://codepen.io/jasondavis/pen/fAzcI" target="_blank" rel="external">官网下载</a><br>2) 在你的项目中引入对应的资源，主要有以下两个文件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">showLoading.css 和 jquery.showLoading.min.js</div></pre></td></tr></table></figure>
<p>3) 在页面中引入上面两个文件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/css/showLoading.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">media</span>=<span class="string">"screen"</span> /&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/jquery/jquery.showLoading.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>4) 在你的页面中声明一个想要用来遮罩的容器，比如自己的一个div，如果需要全屏的话，推荐直接选择body标签即可。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">"loading"</span>&gt;</span></div><div class="line"> ...</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>5) 在JS中调用showLoading()和hideLoading()方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="string">'#loading'</span>).showLoading();</div><div class="line">jQuery(<span class="string">'#loading'</span>).hideLoading();</div></pre></td></tr></table></figure>
<p>6) 修改Loading的动画图标，可以修改为自己的gif动画。在showLoading.css中修改样式中的路径即可</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.loading-indicator &#123;</div><div class="line">	height: 80px;</div><div class="line">	width: 80px;</div><div class="line">	background: url( '/img/loading.gif' );  //修改此处即可。</div><div class="line">	background-repeat: no-repeat;</div><div class="line">	background-position: center center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL排忧解难之错误码1045]]></title>
      <url>/2016/04/19/MySQL%E6%8E%92%E5%BF%A7%E8%A7%A3%E9%9A%BE%E4%B9%8B%E9%94%99%E8%AF%AF%E7%A0%811045/</url>
      <content type="html"><![CDATA[<p>Access denied for user ‘root’@’localhost’ (using password:YES)</p>
<a id="more"></a>
<h3 id="解决方式：重设登录密码"><a href="/2016/04/19/MySQL排忧解难之错误码1045/#解决方式：重设登录密码" class="headerlink" title="解决方式：重设登录密码"></a>解决方式：重设登录密码</h3><p><strong>1 停止MYSQL服务。</strong><br><strong>2 重启MYSQL服务，前提是加入启动选项： <code>mysqld_safe --skip-grant-tables</code> 关闭权限检查</strong><br>在CMD下使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqld --skip-grant-tables</div></pre></td></tr></table></figure></p>
<p><strong>3 重设密码</strong></p>
<p>(1) 登录到root用户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root</div></pre></td></tr></table></figure></p>
<p>(2) 重设密码:</p>
<h6 id="MySQL-5-6及以下版本："><a href="/2016/04/19/MySQL排忧解难之错误码1045/#MySQL-5-6及以下版本：" class="headerlink" title="MySQL 5.6及以下版本："></a>MySQL 5.6及以下版本：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE mysql.user SET Password=PASSWORD(&apos;password&apos;) WHERE User=&apos;root&apos;;</div></pre></td></tr></table></figure>
<h6 id="MySQL-5-7及以上版本："><a href="/2016/04/19/MySQL排忧解难之错误码1045/#MySQL-5-7及以上版本：" class="headerlink" title="MySQL 5.7及以上版本："></a>MySQL 5.7及以上版本：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">UPDATE mysql.user SET authentication_string=PASSWORD(&apos;password&apos;)  WHERE  User=&apos;root&apos;;</div></pre></td></tr></table></figure>
<p><strong>4 刷新，运行命令</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>
<p><strong>5 重启MYSQL服务</strong></p>
<p><img src="http://i1.piimg.com/577934/f44cee24a83d6c7f.png" alt="结果"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[调试工具之Fidder4]]></title>
      <url>/2016/04/18/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%B9%8BFidder4/</url>
      <content type="html"><![CDATA[<p>Fidder是一款WEB调试程序，提供http协议调试代理工具，它能够记录并检查所有你的电脑和互联网之间的http通讯，设置断点，查看所有的“进出”Fiddler的数据（指cookie,html,js,css等文件，这些都可以让你胡乱修改的意思）。 Fiddler 要比其他的网络调试器要更加简单，因为它不仅仅暴露http通讯还提供了一个用户友好的格式。</p>
<a id="more"></a>
<h3 id="模拟文件上传"><a href="/2016/04/18/调试工具之Fidder4/#模拟文件上传" class="headerlink" title="模拟文件上传"></a>模拟文件上传</h3><p><img src="http://i1.piimg.com/577934/f1507e662f61a1fc.png" alt=""></p>
<p>同时携带其他参数：</p>
<p><img src="http://i1.piimg.com/577934/55de3a19da8b07a8.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL排忧解难之错误码1175]]></title>
      <url>/2016/04/18/MySQL%E6%8E%92%E5%BF%A7%E8%A7%A3%E9%9A%BE%E4%B9%8B%E9%94%99%E8%AF%AF%E7%A0%811175/</url>
      <content type="html"><![CDATA[<p>Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column To disable safe mode, toggle the option in Preferences -&gt; SQL Editor and reconnect. 0.000 sec</p>
<a id="more"></a>
<h3 id="解决方法："><a href="/2016/04/18/MySQL排忧解难之错误码1175/#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>1 设置Mysql属性  SET SQL_SAFE_UPDATES = 0; （可以在IDE上直接输入，比如Workbench或者Navicat等等）<br>2 或通过IDE界面UI设置，以Mysql Workbench为例：</p>
<p><img src="http://i1.piimg.com/577934/deb3875302320d65.png" alt="ID设置方法"></p>
<p>(在菜单：编辑&gt;IDE偏好设置里边找到”Safe Updates”选项，并将其勾选去掉)</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo FAQ]]></title>
      <url>/2016/04/15/Hexo-FAQ/</url>
      <content type="html"><![CDATA[<p>本篇文章主要收集了个人从玩Hexo至今，遇到的一些问题及其解决方式。</p>
<a id="more"></a>
<h4 id="Q1：部署错误：Error-spawn-git-ENOENT"><a href="/2016/04/15/Hexo-FAQ/#Q1：部署错误：Error-spawn-git-ENOENT" class="headerlink" title="Q1：部署错误：Error: spawn git ENOENT"></a>Q1：部署错误：Error: spawn git ENOENT</h4><p><strong>报错原因：</strong> 没有使用 git bash 或者 git shell来部署。<br><strong>解决方式：</strong><br>1) 将git的安装路径加入到环境变量中(windows下)。<br>2) 使用git提供的命令行工具(shell &amp; bash)来提交。</p>
<h4 id="Q2：部署错误：Deployer-not-found-github"><a href="/2016/04/15/Hexo-FAQ/#Q2：部署错误：Deployer-not-found-github" class="headerlink" title="Q2：部署错误：Deployer not found: github"></a>Q2：部署错误：Deployer not found: github</h4><p><strong>遇错情景：</strong> 最近从next主题切换到新主题的时候部署时遇到这个问题。<br><strong>报错原因：</strong> 没有hexo-deployer-git这个东西，所以需要重新安装一次。<br><strong>注意事项：</strong> Hexo 3.0以前是使用的是hexo-deployer-github，3.0之后官方更改为hexo-deployer-git<br><strong>解决方法：</strong> 重新安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git –save</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo NexT主题优化]]></title>
      <url>/2016/03/31/Hexo-NexT%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>玩转了几天Hexo静态博客之后，发现可配置的东西基本上都已经配置过了，那还有什么地方可以优化呢？突然之间，灵机一动，发现了另一个可以高度定制与优化Hexo主题的方法：从源码级别优化。</p>
<a id="more"></a>
<h4 id="Hexo-NexT主题的文档结构"><a href="/2016/03/31/Hexo-NexT主题优化/#Hexo-NexT主题的文档结构" class="headerlink" title="Hexo NexT主题的文档结构"></a>Hexo NexT主题的文档结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/languages   <span class="comment">#用来配置国际化语言版本，里边包含各种个配置像的文本翻译。</span></div><div class="line">/layout      <span class="comment">#以swig文件来定义各种含有配置信息调用的布局</span></div><div class="line">/scripts     <span class="comment">#一些JS脚本</span></div><div class="line">/<span class="built_in">source</span>    </div><div class="line">   /css      <span class="comment">#用来修改自定义样式，需要掌握一定的css语法。</span></div><div class="line">   /fonts    <span class="comment">#定义字体文件，可以修改博客字体</span></div><div class="line">   /images   <span class="comment">#一些svg图片</span></div><div class="line">   /js       <span class="comment">#一些js脚本</span></div><div class="line">   /vendors  </div><div class="line">   /404.html <span class="comment">#自定义的公益404页面</span></div><div class="line">/<span class="built_in">test</span>        <span class="comment">#用于测试</span></div></pre></td></tr></table></figure>
<h4 id="CSS级别优化"><a href="/2016/03/31/Hexo-NexT主题优化/#CSS级别优化" class="headerlink" title="CSS级别优化"></a>CSS级别优化</h4><p>通过修改主题中的CSS样式来进行优化，以下列出一些举例：</p>
<p><strong>1.改变主页中博文标题的对齐方式</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//themes/next/<span class="built_in">source</span>/css/_variables/Mist.styl</div><div class="line">//default is left,改变主页博文标题的对齐方式</div><div class="line"><span class="variable">$site</span>-meta-text-align    = left</div></pre></td></tr></table></figure>
<p><strong>2.显示配置过的网站副标题（针对Mist模式）</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//themes/next/<span class="built_in">source</span>/css/_schemes/Mist/_logo.styl</div><div class="line">.site-subtitle &#123; display: none; &#125;  //改变none为自己想要的值</div></pre></td></tr></table></figure>
<p><strong>3.改变菜单按钮的样式</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//themes/next/<span class="built_in">source</span>/css/_schemes/Mist/_menu.styl</div><div class="line">  .menu-item a &#123;</div><div class="line">    //...</div><div class="line">    &amp;:hover &#123; </div><div class="line">		background: <span class="comment">#003366; </span></div><div class="line">		color: white;</div><div class="line">		border-radius: 2px;</div><div class="line">	&#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><strong>4.改变网站头部样式</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//themes/next/<span class="built_in">source</span>/css/_schemes/Mist/_header.styl</div></pre></td></tr></table></figure>
<h4 id="Swig级别优化"><a href="/2016/03/31/Hexo-NexT主题优化/#Swig级别优化" class="headerlink" title="Swig级别优化"></a>Swig级别优化</h4><p><strong>1.改变底部Footer相关描述</strong><br>修改布局 ： themes/next/layout/_partials/footer.swig</p>
<h6 id="如果你想问一些基本的配置，请访问Next-主题-Github-仓库。如果你更牛逼，可以直接自定义新的或者修改原有的JS特效。"><a href="/2016/03/31/Hexo-NexT主题优化/#如果你想问一些基本的配置，请访问Next-主题-Github-仓库。如果你更牛逼，可以直接自定义新的或者修改原有的JS特效。" class="headerlink" title="如果你想问一些基本的配置，请访问Next 主题 Github 仓库。如果你更牛逼，可以直接自定义新的或者修改原有的JS特效。"></a>如果你想问一些基本的配置，请访问Next 主题 Github 仓库。如果你更牛逼，可以直接自定义新的或者修改原有的JS特效。</h6>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[校招那些事]]></title>
      <url>/2016/03/29/%E6%A0%A1%E6%8B%9B%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<h4 id="实习"><a href="/2016/03/29/校招那些事/#实习" class="headerlink" title="实习"></a>实习</h4><p>因为在某外资知名企业实习了半年，没有去参加各种校园招聘而错过了秋招的机会，有时候心里想想还真是可惜啊，但是却不后悔。实习之于我是一个提升自己能力的好机会，很荣幸，能够在半年中提升了自己的视野，思考能力和专业技术水准，以及认识一些人，学会一些事。也许很多人会说：”你这是在浪费时间，既然你实习完后不在原公司待下来，又何必白白耗费大半年的时间呢？”，他们说的，有些地方确实是对的，对于很多人来说，也许早早就开溜了。然而我想得更多的，一是在这半年光景里努力提升自己的能力，二是我并不想半途而废或者知难而进，很多时候我想退出，然而每次出现这样的思绪时，我就反问自己：“难道是因为自己的能力不行而退出吗？”，“不，我不认为”，“难道要在这半途中放弃这个实习的机会吗？”，“不，我不想”，于是在无限的挣扎过后，我顺利地坚持到了最后，当然，最后依旧没有留在某企业。</p>
<a id="more"></a>
<h4 id="春招-amp-宣讲会"><a href="/2016/03/29/校招那些事/#春招-amp-宣讲会" class="headerlink" title="春招 &amp; 宣讲会"></a>春招 &amp; 宣讲会</h4><p>2016年的三月，都说阳春三月，然而在祖国的南方沿海省份并没有，我依旧记得那十多天的回南天外出计划增添了多少阻碍，忽冷忽热，还夹杂着90%以上的空气湿度，这是多么影响心情的天气！然而春招依然在这段糟糕的时间开始了。<br>我面试过的企业并不算太多，确切地说是很少，每次我在中山大学的就业指导中心查看宣讲会信息，会把非互联网企业排除，会把初创公司排除，加上像BAT这种程序员所羡慕的国内大企早就在秋招中招满结束了，于是留下来的看得顺眼的企业就很少很少了。总的来说，到目前为止，参加了三次宣讲会。</p>
<h5 id="面试一：广州某通信公司"><a href="/2016/03/29/校招那些事/#面试一：广州某通信公司" class="headerlink" title="面试一：广州某通信公司"></a>面试一：广州某通信公司</h5><p>记得这是在广工参加的宣讲会，主要介绍了什么大致已经忘光了，很快在宣讲会结束之后便进行笔试。当时看到笔试题(笔试题是关于JAVA的)，我嘴角微微上扬，成了全场第二个交卷的人。一是感觉题目简单得离谱，而且全部是关于编程语言的，连算法和数据结构这样的专业题都没有。很快，我就收到了面试通知，这场面试，三个面试官，一个是HR，一个是老总，一个应该是高技术的，让你自我介绍，然后问了一堆乱七八糟的问题，索性我都答完了，答得还算不错。于是乎就这样通过了面试，公司向我的邮箱发放了Offer。</p>
<h5 id="面试二：深圳某软件企业"><a href="/2016/03/29/校招那些事/#面试二：深圳某软件企业" class="headerlink" title="面试二：深圳某软件企业"></a>面试二：深圳某软件企业</h5><p>我还清楚地记得这是在三月份进行的，阴雨天气，当时中午在网上逛了一圈，发现有个宣讲会，于是立即去了华工参加宣讲会，宣讲会的前段时间都在播放一段关于公司的大事记和工作环境，然后在大屏幕中出现了一个QR码，让你根据此前播放的内容回答问题，全答对了就有红包拿，好吧，我没认真看，一定答错了一些题目。<br>这次还是一样，宣讲会后直接进行笔试，不同的是，前面来了一套测试IQ的题目，看起来像考研或者考公务员里边的申论的题目，哎，虽然不喜欢这种题目，还是随便填填吧。之后又给了一套专业笔试题，这回有数据结构和算法的题目了，很明显，难度相对上一次宣讲会难了不少。不过很幸运，我还是很快就交卷走人了。就在回到学校吃饭的时候，哇靠，居然叫我回去参加面试，无奈之下，还向舍友借了一把伞，又回去参加面试了。<br>这次面试分为两轮，一轮HR面试，一轮技术面试。HR面试好像还挺专业，问了你一些发散思维，注意力以及团队协作的一些问题，但技术面挺水，面试的人看起来像老总，而且还问你是不是独生子女等奇葩的问题。很顺利面完了，到了晚上九点多，回校。<br>几天之后，我在参加第三个宣讲会结束后我接到了该公司的通知，我又拿到Offer了。</p>
<h5 id="面试三：广州某网络集团"><a href="/2016/03/29/校招那些事/#面试三：广州某网络集团" class="headerlink" title="面试三：广州某网络集团"></a>面试三：广州某网络集团</h5><p>这次去中大参加了宣讲会，出乎意料的是还挺多人参加的，目测估计不下六七百号人参加了宣讲会。给我的第一个感觉就是排场大，于是上知乎搜了搜关于这个公司的评价，有好的，有不好的，当然还是不好的居多。宣讲会持续了挺长的时间，然后按照两笔一面的形式进行。<br>一笔的题目着实让我大吃一惊，考得全是些数学上的东西，我想啊，高数学的这么烂的我如何在这么多竞争者中脱颖而出呢？我绞尽脑汁，会的先做，不会的后做，实在不会的就凭直觉做。这让我想起参加宣讲会的时候旁边坐着的一个中大的学生，一个笔记本，满满的都是手写的面试题，我就想，这学霸真TM有耐心和毅力啊，而我居然在裸考！最后还是不管三七二十一，早早交卷走人了。<br>就在我以为没有机会的时候，公司发来了短信，叫我参加二笔，我有些闷了，额，居然过了一笔。好吧，那就去参加二笔，二笔中的人数比一笔的人数缩了至少八分之七，只剩下三四十个人了。签到的时候发现名单上全是中大、华工和暨大的，好吧，本校的就我一个，想想运气还是挺好的呢。二笔考的居然，居然全是C++的题目！我想做JAVA的，结果遇到了一份全是C++的卷子，好吧，我做就是了。但是后面几道关于算法的题目个人觉得还算不错。交卷，走人。<br>接下来的几天就是在等待中度过了，等了三天，然后又收到通知叫我去参加笔试了。哈哈，还是挺幸运地，顺利完成了面试。等待几天后，很幸运，又收到了Offer，这个Offer提供了一线互联网企业的薪水，好像挺诱人。</p>
<h5 id="其他网申：无反应"><a href="/2016/03/29/校招那些事/#其他网申：无反应" class="headerlink" title="其他网申：无反应"></a>其他网申：无反应</h5><p>一个让我很懊恼的就是我往一些企业投递了简历，就像石沉大海，音信全无。想想也是无奈，我知道像某易这种公司会按学校来筛人，既然如此也只能另觅有缘的企业了。还有一个是某一家工资开的挺高的公司，网上笔试就被刷了，想想真是心酸，对于我这种从未复习过的裸考的人也只能如此了。</p>
<h5 id="选择-amp-犹豫从症患者-amp-面试就是为了拒绝"><a href="/2016/03/29/校招那些事/#选择-amp-犹豫从症患者-amp-面试就是为了拒绝" class="headerlink" title="选择 &amp; 犹豫从症患者 &amp; 面试就是为了拒绝"></a>选择 &amp; 犹豫从症患者 &amp; 面试就是为了拒绝</h5><p>我想我还是比较幸运地，应聘的胜率比我的排位胜率(LOL排位赛的胜率)还要高。拿到第一个Offer的时候，我还在某公司实习，他们给出7K的月薪，最后还是拒绝了。第二个Offer开出的条件比第一个好一些，犹豫了两天之后又发了封邮件拒绝了。于是就有舍友说我面试就是为了拒绝，想想也只能呵呵一下了。然后是第三个Offer，又犹豫了几天，最后想想还是接受试试。</p>
<h5 id="反思：为何不满足"><a href="/2016/03/29/校招那些事/#反思：为何不满足" class="headerlink" title="反思：为何不满足"></a>反思：为何不满足</h5><p>每次拒绝后我总在想，既然不想去，又何必参加他们的笔试和面试呢？<br>经过多次的思考，总结了几点原因：</p>
<ul>
<li>薪酬不符合要求</li>
<li>地点不符合要求</li>
<li>认为能找到更好的。</li>
</ul>
<p>说到底，就是自己的要求太高了。其实作为应届生来说，薪水真的很重要吗？我理想中的企业是BAT，然而好像目前而言不太可能了，退而求其次，前几年先攒攒工作经验，学习专业技能，拓宽职场上的人脉也就够了。至于福利方面，工作时长方面，我觉得就是自己的态度问题，很多企业你去百度一下，基本上没有好的评论，只要态度够好就不用在乎这些。我们身处在即将步入职场的阶段，不拼一把，怎么对得起自己？</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo vs JekyII]]></title>
      <url>/2016/03/28/Hexo-vs-JekyII/</url>
      <content type="html"><![CDATA[<p>之所以接触到Hexo以及Jekyll框架是因为之前一直有在写些博客，比如通过Github Pages直接写的HTML静态博客,但这种博客维护起来相当麻烦，有如下一些问题：</p>
<a id="more"></a>
<ol>
<li>维护繁杂，加一篇日志链接往往需要改动很多HTML页面中的链接。</li>
<li>设计困难，非前端设计人员的通病，往往在界面设计以及效果实现上浪费很多时间。</li>
<li>不支持MD语法，写一篇博客相当于写一个HTML页面，相当累人。</li>
</ol>
<h4 id="选择Hexo还是Jekyll"><a href="/2016/03/28/Hexo-vs-JekyII/#选择Hexo还是Jekyll" class="headerlink" title="选择Hexo还是Jekyll"></a>选择Hexo还是Jekyll</h4><p>于是开始接触比较流行的一些静态博客框架，比较流行的有Jekyll，Hexo，Simple，Octopress，Pelican以及Logecho等等。这些静态程序可以说都有各自的好处，但最后我选择了Hexo来搭建自己的博客，和Jekyll相比，选择Hexo主要原因是：</p>
<ol>
<li>Jeky基于Ruby实现，安装Jeky需要搭建Ruby环境，在Windows搭建Ruby环境并不是被推荐的，而 Hexo基于NodeJs实现，在Windows上安装NodeJs开发环境简单。</li>
<li>Jekyll没有本地服务器，无法实现本地博文预览功能，需要上传到WEB容器中才能预览功能，而Hexo可以通过简单的命令实现本地的预览，并直接发布到WEB容器中实现同步。</li>
<li>比较直接的另一个原因是在网上查找了很多博客的主题，发现Jekyll官网提供的主题都不怎么好看(可能是个人原因)，而Hexo的主题看的比较顺眼。</li>
<li>两者都支持Markdown语法，这点我非常喜欢。</li>
</ol>
<h4 id="Hexo博客开发过程"><a href="/2016/03/28/Hexo-vs-JekyII/#Hexo博客开发过程" class="headerlink" title="Hexo博客开发过程"></a>Hexo博客开发过程</h4><p>接下来简单阐述一下一个之前从未接触过Hexo的折腾党是如何在两天内搭建并部署的：</p>
<ol>
<li>NodeJs环境搭建，其实只要下载并安装NodeJs就OK了。</li>
<li>Hexo环境搭建，其实只需要在Git Bash或者Power shell使用npm进行安装即可。</li>
<li>使用自己喜欢的Hexo主题，可以从官网下，或者其他地方。</li>
<li>配置Hexo，这里不详细介绍了，有兴趣的可以从网上搜索或者直接看我此分类下的博文。</li>
<li>部署到Gihub上。</li>
<li>注册并绑定自己的域名。</li>
</ol>
<p>当然，在这个过程中也碰到过许多的小问题，稍后会将其总结出来并发布。</p>
<h6 id="（本博文，已从旧版博客迁移过来，旧版博客不再维护）"><a href="/2016/03/28/Hexo-vs-JekyII/#（本博文，已从旧版博客迁移过来，旧版博客不再维护）" class="headerlink" title="（本博文，已从旧版博客迁移过来，旧版博客不再维护）"></a>（本博文，已从旧版博客迁移过来，旧版博客不再维护）</h6>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GWT项目创建教程]]></title>
      <url>/2015/12/04/GWT%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>GWT(Google Web Toolkit),是google公司推出的一款基于JAVA的WEB应用开发工具包。通过GWT可以迅速实现基于RPC的业务处理…</p>
<a id="more"></a>
<h4 id="GWT主要提供了四种创建GWT项目的命令行工具。分别是："><a href="/2015/12/04/GWT项目创建教程/#GWT主要提供了四种创建GWT项目的命令行工具。分别是：" class="headerlink" title="GWT主要提供了四种创建GWT项目的命令行工具。分别是："></a>GWT主要提供了四种创建GWT项目的命令行工具。分别是：</h4><table>
<thead>
<tr>
<th>Creator</th>
</tr>
</thead>
<tbody>
<tr>
<td>projectCreator</td>
</tr>
<tr>
<td>applicationCreator</td>
</tr>
<tr>
<td>i18nCreator</td>
</tr>
<tr>
<td>junitCreator</td>
</tr>
</tbody>
</table>
<h4 id="projectCreator"><a href="/2015/12/04/GWT项目创建教程/#projectCreator" class="headerlink" title="projectCreator"></a>projectCreator</h4><ul>
<li>支持Eclipse IDE </li>
<li>会生成·.class和.project文件，生成后直接导入到Eclipse项目。</li>
<li>支持的参数:</li>
</ul>
<table>
<thead>
<tr>
<th>Arguments</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>-eclipse</td>
<td>生成支持Eclipse的文档项目结构</td>
</tr>
<tr>
<td>-ant</td>
<td>生成支持Ant的Ant构建脚本</td>
</tr>
<tr>
<td>-out</td>
<td>指定项目生成的路径</td>
</tr>
<tr>
<td>-overwrite</td>
<td>在编译过程中覆盖原有的文件</td>
</tr>
<tr>
<td>-ignore</td>
<td>在编译过程中忽略原有的文件和路径，不进行覆盖</td>
</tr>
</tbody>
</table>
<h4 id="Demo"><a href="/2015/12/04/GWT项目创建教程/#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">projectCreator -eclipse ProjectName -out ProjectDir</div></pre></td></tr></table></figure>
<h4 id="applicationCreator"><a href="/2015/12/04/GWT项目创建教程/#applicationCreator" class="headerlink" title="applicationCreator"></a>applicationCreator</h4><ul>
<li>用于生成应用程序功能的项目结构，可以通过launch脚本启动项目。</li>
<li>会创建Java的项目结构，包含HTML页面以及Module文件。</li>
<li>会创建命令行脚本文件，即.launch文件。</li>
<li>参数列表与projectCreator一致。</li>
</ul>
<h4 id="i18nCreator"><a href="/2015/12/04/GWT项目创建教程/#i18nCreator" class="headerlink" title="i18nCreator"></a>i18nCreator</h4><ul>
<li>支持语言国际化。</li>
<li>会创建Java的项目结构，包含HTML页面以及Module文件。</li>
<li>会创建基于键值对的语言配置文件。</li>
<li>参数列表与projectCreator一致。</li>
</ul>
<h4 id="junitCreator"><a href="/2015/12/04/GWT项目创建教程/#junitCreator" class="headerlink" title="junitCreator"></a>junitCreator</h4><ul>
<li>集成Junit测试框架。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java ConcurrentModificationException]]></title>
      <url>/2015/11/01/Java-ConcurrentModificationException/</url>
      <content type="html"><![CDATA[<p>我们查看JAVA API的时候就可以了解到，ConcurrentModificationException是继承了RuntimeException的一个异常，所以它是一个运行时的异常类。通常发生在并发操作’时错误的读写导致的异常错误。这个异常可以通过方法抛出，当探测到对一个对象进行并发修改，然而这个并发修改操作不被允许的时候。</p>
<a id="more"></a>
<p>比如说，当一个集合对象是不允许多个线程同时对其进行修改的，当有一个迭代器正在迭代遍历这个集合的时候，如果还有额外的迭代器进行修改操作，这个时候就会报ConcurrentModificationException这个异常。在JDK1.2以及1.2之后就新增了这个异常，至于具体的原因机制可以查看JDK的API文档。点击这里查看1.7版本的JDK。</p>
<p><strong>该异常出现的一般情况：在遍历中对集合中的对象元素进行修改操作</strong></p>
<p>注意：使用迭代器进行遍历，只能通过迭代器进行删除操作，否则则报这个异常，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateConcurrentModificationException</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ArrayList&lt;String&gt; testList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">            testList.add(<span class="keyword">new</span> String(<span class="string">"One"</span>));</div><div class="line">            testList.add(<span class="keyword">new</span> String(<span class="string">"Two"</span>));</div><div class="line">            testList.add(<span class="keyword">new</span> String(<span class="string">"Three"</span>));</div><div class="line">            Iterator&lt;String&gt; iter1 = testList.iterator();</div><div class="line">            <span class="keyword">for</span> (String str = <span class="string">""</span>; iter1.hasNext();) &#123;</div><div class="line">                str = iter1.next();</div><div class="line">                testList.remove(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (ConcurrentModificationException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>此时，绝对爆出异常：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">java.util.ConcurrentModificationException</div><div class="line">    at java.util.ArrayList$Itr.checkForComodification(Unknown Source)</div><div class="line">    at java.util.ArrayList$Itr.next(Unknown Source)</div><div class="line">    ...</div></pre></td></tr></table></figure>
<p><strong>该异常的原理解析：遍历计数器的不均等导致</strong></p>
<p>如示例代码1所示，这里使用的是testList.remove(0);，直接使用原集合对象进行删除操作，这样为什么不行呢，原因很简单，我们不妨看一下ArrayList的源码中的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> cursor != size();</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line"> checkForComodification();</div><div class="line"> <span class="keyword">try</span> &#123;</div><div class="line">        E next = get(cursor);</div><div class="line">        lastRet = cursor++;</div><div class="line">        <span class="keyword">return</span> next;</div><div class="line">  &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</div><div class="line">        checkForComodification();</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以说，在使用迭代器的时候，next()中调用的checkForComodification(), 在remove方法中也调用了checkForComodification()当进行删除操作的时候，==modCount != expectedModCount，此时绝对会抛出应有这个异常。总而言之一句话，就是使用那个迭代器时会初始化一个迭代器，使用集合对象本身的add或者remove操作的时候也会在内部产生一个迭代器，当在迭代器遍历中使用集合对象删除的时候，里边的modCount会减少，而当使用迭代器的next()方法是，其检测到的modCount和期待的count已经不等了==，于是报出这个异常。</p>
<p><strong>该异常的解决方法：在迭代器内部使用迭代器本身进行删除和修改操作</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iterator.remove();</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合对象的深复制与浅复制]]></title>
      <url>/2015/10/30/Java%E9%9B%86%E5%90%88%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%B1%E5%A4%8D%E5%88%B6%E4%B8%8E%E6%B5%85%E5%A4%8D%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>最近在开发中遇到了一些关于集合复制的一些问题，普通的集合复制只是将内存中栈的地址快拷贝一份，使得一个新的集合对象指向这个地址块，但是集合中的对象变量却是指向堆中的同一块区域。</p>
<a id="more"></a>
<p>所以当拷贝的集合修改了集合对象内的数据，那么源集合对象也就随之改变了，这样的效果我们称之为Java集合对象的浅复制，即只是在栈中拷贝了，而堆中的数据并没有拷贝。以下是Wiki上关于浅复制的定义： </p>
<blockquote>
<p>One method of copying an object is the shallow copy. In that case a new object B is created, and the fields values of A are copied over to B. If the field value is a reference to an object (e.g., a memory address) it copies the reference, hence referring to the same object as A does, and if the field value is a primitive type it copies the value of the primitive type. In languages without primitive types (where everything is an object), all fields of the copy B are references to the same objects as the fields of original A. The referenced objects are thus shared, so if one of these objects is modified (from A or B), the change is visible in the other. Shallow copies are simple and typically cheap, as they can be usually implemented by simply copying the bits exactly.  </p>
</blockquote>
<p>而深度复制则是同时在栈中和堆中的数据进行拷贝，这样，其拷贝的集合和被拷贝的集合已经没有任何关系了。同样，在Wiki上的定义如下：</p>
<blockquote>
<p>An alternative is a deep copy, meaning that fields are dereferenced: rather than references to objects being copied, new copy objects are created for any referenced objects, and references to these placed in B. The result is different from the result a shallow copy gives in that the objects referenced by the copy B are distinct from those referenced by A, and independent. Deep copies are more expensive, due to needing to create additional objects, and can be substantially more complicated, due to references possibly forming a complicated graph.</p>
</blockquote>
<h4 id="一个简单的例子"><a href="/2015/10/30/Java集合对象的深复制与浅复制/#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h4><p><strong>如下，建立一个Demo类：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;  </div><div class="line">          </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>  demoValue;  </div><div class="line">          </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDemoValue</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.demoValue = value;  </div><div class="line">    &#125;  </div><div class="line">          </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDemoValue</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.demoValue;  </div><div class="line">    &#125;  </div><div class="line">          </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span></span>&#123;  </div><div class="line">              </div><div class="line">    &#125;  </div><div class="line">          </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">(<span class="keyword">int</span> demoValue)</span></span>&#123;  </div><div class="line">        <span class="keyword">this</span>.demoValue = demoValue;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>接下来，我们试验一下浅复制：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCommonCopy</span><span class="params">()</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="comment">// Here I create a source collection.  </span></div><div class="line">    ArrayList&lt;Demo&gt; sourceCollection = <span class="keyword">new</span> ArrayList&lt;Demo&gt;();  </div><div class="line">  </div><div class="line">    <span class="comment">// Here I add some objects to sourceCollection.  </span></div><div class="line">    sourceCollection.add(<span class="keyword">new</span> Demo(<span class="number">1</span>));  </div><div class="line">    sourceCollection.add(<span class="keyword">new</span> Demo(<span class="number">2</span>));  </div><div class="line">  </div><div class="line">    <span class="comment">// Here I create a new empty collection.  </span></div><div class="line">    ArrayList&lt;Demo&gt; newCollection = <span class="keyword">new</span> ArrayList&lt;Demo&gt;();  </div><div class="line">    newCollection.addAll(sourceCollection);  </div><div class="line">  </div><div class="line">    <span class="comment">// Now I modify some objects in new collection.  </span></div><div class="line">    newCollection.get(<span class="number">0</span>).setDemoValue(<span class="number">3</span>);  </div><div class="line">      </div><div class="line">    <span class="comment">// Now We verify what it is inside the source collection.  </span></div><div class="line">    <span class="keyword">for</span>(Demo demo : sourceCollection)&#123;  </div><div class="line">        System.out.println(demo.getDemoValue());  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="comment">// Now I verify if the source Collection is modified.  </span></div><div class="line">    Assert.assertEquals(sourceCollection.get(<span class="number">0</span>).getDemoValue(),<span class="number">1</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://p1.bqimg.com/577934/10a8c49f1aa0ffab.png" alt="若加载不了，请自行意会"></p>
<p>对其的执行结果，很明显，newCollection中改变的Demo对象在SourceCollection中也跟着改变了，这说明两个集合中的Demo对象是同一个对象。这也是浅复制所存在的弊端。那么如何将两个集合独立开来呢，即如何进行深度复制，我们不妨继续往下阅读：</p>
<p><strong>首先我们先对Demo类作一下处理，使其实现Cloneable接口，并重写它的clone方法：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span>  </div><div class="line"><span class="function"><span class="keyword">protected</span> Demo <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;             </div><div class="line">	<span class="keyword">return</span> (Demo)<span class="keyword">super</span>.clone(); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>然后我们来进行深度复制：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCopyDeep</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;  </div><div class="line">    ArrayList&lt;Demo&gt; sourceCollection = <span class="keyword">new</span> ArrayList&lt;Demo&gt;();  </div><div class="line">    sourceCollection.add(<span class="keyword">new</span> Demo(<span class="number">1</span>));  </div><div class="line">    sourceCollection.add(<span class="keyword">new</span> Demo(<span class="number">2</span>));    </div><div class="line">      </div><div class="line">    ArrayList&lt;Demo&gt; newCollection = <span class="keyword">new</span> ArrayList&lt;Demo&gt;();  </div><div class="line">    <span class="keyword">for</span>(Demo demo : sourceCollection)&#123;  </div><div class="line">        newCollection.add(demo.clone());  </div><div class="line">    &#125;  </div><div class="line">    newCollection.get(<span class="number">0</span>).setDemoValue(<span class="number">3</span>);  </div><div class="line">    <span class="keyword">for</span>(Demo demo : sourceCollection)&#123;  </div><div class="line">        System.out.println(demo.getDemoValue());  </div><div class="line">    &#125;  </div><div class="line">    Assert.assertEquals(sourceCollection.get(<span class="number">0</span>).getDemoValue(),<span class="number">1</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们来观察一下结果：搞定</p>
<p><img src="http://p1.bqimg.com/577934/056713396d470fb5.png" alt="若加载不了，请自行意会"></p>
<p><strong>接下来我们来分析一下出现这个现象的原因：</strong></p>
<p><strong>深度复制：</strong> 如图：A中具有X1,X2,X3…Xn的数据，深度复制则对其每个堆和栈中的数据都进行一次拷贝，生成对应的Y1,Y2,Y3以及B对象。此时，A与B已经分别存放在不同的地址单元，所以A中改了数据，B中的数据不变，反之亦然。<br><strong>浅复制：</strong> 如图：A复制成B，但是A和B中的数据均指向同一个X1,X2,X3…Xn，所以当A通过某种方法改变了数据，对于B来说，其中的数据也改变了。</p>
<p>最后，给大家推荐一下Wiki上的关于对象复制的文章，<a href="https://en.wikipedia.org/wiki/Object_copying。" target="_blank" rel="external">https://en.wikipedia.org/wiki/Object_copying。</a><br>也给大家推荐一下我的个人博客，虽然已经好久没有更新了。<a href="http://andersonlu.github.io/ALBOG/" target="_blank" rel="external">http://andersonlu.github.io/ALBOG/</a><br>同时也希望大家能够在本篇文章中收益，感谢大家的阅读。记得点赞哦！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[菜鸟学Linux之基本命令]]></title>
      <url>/2015/10/06/%E8%8F%9C%E9%B8%9F%E5%AD%A6Linux%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h6 id="更新至2015-10-06"><a href="/2015/10/06/菜鸟学Linux之基本命令/#更新至2015-10-06" class="headerlink" title="(更新至2015-10-06)"></a>(更新至2015-10-06)</h6><h4 id="001、更换目录-cd"><a href="/2015/10/06/菜鸟学Linux之基本命令/#001、更换目录-cd" class="headerlink" title="001、更换目录(cd)"></a>001、更换目录(cd)</h4><p><strong>1、cd destination</strong></p>
<p>指定目录时转换到该目录，未指定参数时则回到主目录。</p>
<p><strong>2、destination的表示方式</strong></p>
<p>绝对文件路径 /（表示系统的根目录）<br>相对文件路径：.（表示当前目录），..（表示当前目录的父目录）</p>
<h4 id="002、文件和目录列表-ls"><a href="/2015/10/06/菜鸟学Linux之基本命令/#002、文件和目录列表-ls" class="headerlink" title="002、文件和目录列表(ls)"></a>002、文件和目录列表(ls)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ls <span class="comment">#按字母顺序列出文件。</span></div><div class="line">ls <span class="_">-a</span> <span class="comment">#查看包含隐藏文件在内的文件，隐藏文件以.开头</span></div><div class="line">ls -A <span class="comment">#不要列出.和..文件</span></div><div class="line">ls -b <span class="comment">#打印不可打印字符的八进制值</span></div><div class="line">ls -B <span class="comment">#不要打印带波浪线的条目（波浪线表示备份文件）</span></div><div class="line">ls -c <span class="comment">#根据修改时间排序</span></div><div class="line">ls -C <span class="comment">#按列列出条目</span></div><div class="line">ls -F <span class="comment">#区分文件和目录</span></div><div class="line">ls -R <span class="comment">#查看目录下的所有文件</span></div><div class="line">ls <span class="_">-l</span> <span class="comment">#显示文件的详细信息</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rw-r--r-- 1 anderson anderson 311 6月 17 10:09 1-1.c</div></pre></td></tr></table></figure>
<ul>
<li>文件类型：文件(-) 目录（d） 字符设备(c) 块设备(b)</li>
<li>文件权限：</li>
<li>指向文件的链接数量：</li>
<li>文件所有者：</li>
<li>文件所属的组名称：</li>
<li>文件的字节大小：</li>
<li>上次修改文件的时间：</li>
<li>文件或者目录的名称</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls filter <span class="comment">#过滤器，只把文件名或者目录名为filter的显示出来</span></div><div class="line">ls filter? <span class="comment"># (?)号表示一个字符</span></div><div class="line">ls filter* <span class="comment"># (*)号表示多个字符</span></div></pre></td></tr></table></figure>
<h4 id="003、创建文件（touch）"><a href="/2015/10/06/菜鸟学Linux之基本命令/#003、创建文件（touch）" class="headerlink" title="003、创建文件（touch）"></a>003、创建文件（touch）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">touch fileName <span class="comment">#创建一个空的文件,或者更新文件的修改时间</span></div><div class="line">touch <span class="_">-a</span> <span class="comment">#只更改访问时间</span></div><div class="line">touch -m <span class="comment">#只更改修改时间</span></div><div class="line">touch -t <span class="comment">#修改文件修改时间为 时间戳 指定的时间</span></div><div class="line">----------------------------------------------------------------</div><div class="line">anderson@anderson ~/桌面 $ touch -t 201509270000 <span class="built_in">test</span>TouchCmd</div><div class="line">anderson@anderson ~/桌面 $ ls -lh</div><div class="line">total 82M</div><div class="line">-rw-r--r-- 1 anderson anderson 311 6月 17 10:09 1-1.c</div><div class="line">drwxr-xr-x 2 anderson anderson 4.0K 6月 17 10:05 Linux </div><div class="line">drwxr-xr-x 22 anderson anderson 4.0K 9月 26 21:01 openssl-1.0.2</div><div class="line">-rwxrw-rw- 1 anderson anderson 5.1M 6月 17 10:18 openssl-1.0.2.tar.gz</div><div class="line">drwxr-xr-x 4 anderson anderson 4.0K 1月 20 2014 rjsupplicant</div><div class="line">drwxr-xr-x 5 anderson anderson 4.0K 6月 15 23:56 sogoupinyin_1.2.0.0056_amd64</div><div class="line">-rwxrw-rw- 1 anderson anderson 18M 6月 15 23:38 sogoupinyin_1.2.0.0056_amd64.deb</div><div class="line">-rw-r--r-- 1 anderson anderson 0 9月 27 00:00 <span class="built_in">test</span>TouchCmd</div><div class="line">-rw-r--r-- 1 anderson anderson 59M 3月 22 2014 VMwareTools-9.6.2-1688356.tar.gz</div><div class="line">anderson@anderson ~/桌面 $ </div><div class="line">-----------------------------------------------------------------</div></pre></td></tr></table></figure>
<h4 id="004、复制文件（cp）"><a href="/2015/10/06/菜鸟学Linux之基本命令/#004、复制文件（cp）" class="headerlink" title="004、复制文件（cp）"></a>004、复制文件（cp）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp <span class="built_in">source</span> destination <span class="comment">#将source文件复制到destination文件</span></div></pre></td></tr></table></figure>
<h4 id="005、移动文件-mv"><a href="/2015/10/06/菜鸟学Linux之基本命令/#005、移动文件-mv" class="headerlink" title="005、移动文件( mv )"></a>005、移动文件( mv )</h4><h4 id="006、删除文件-rm"><a href="/2015/10/06/菜鸟学Linux之基本命令/#006、删除文件-rm" class="headerlink" title="006、删除文件( rm)"></a>006、删除文件( rm)</h4><h4 id="007、创建目录（mkdir）"><a href="/2015/10/06/菜鸟学Linux之基本命令/#007、创建目录（mkdir）" class="headerlink" title="007、创建目录（mkdir）"></a>007、创建目录（mkdir）</h4><h4 id="008、查看文件-（stat-cat-more-less-tail）"><a href="/2015/10/06/菜鸟学Linux之基本命令/#008、查看文件-（stat-cat-more-less-tail）" class="headerlink" title="008、查看文件 （stat cat more less tail）"></a>008、查看文件 （stat cat more less tail）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">stat</span> <span class="comment">#查看文件摘要信息</span></div><div class="line">cat <span class="comment">#查看文件全文</span></div><div class="line">more <span class="comment">#查看文件全文，支持向后翻页、翻行</span></div><div class="line">less <span class="comment">#查看文件全文，支持向前向后翻页，翻行</span></div><div class="line">tail <span class="comment">#查看文件的最后一组</span></div></pre></td></tr></table></figure>
<h4 id="009、进程查看-（ps）"><a href="/2015/10/06/菜鸟学Linux之基本命令/#009、进程查看-（ps）" class="headerlink" title="009、进程查看 （ps）"></a>009、进程查看 （ps）</h4><p>ps #查看系统进程</p>
<p>注意：Linux系统中使用的GNU ps命令支持3种不同的命令行参：<br>Unix参数：以短划线为前缀(-)<br>BSD参数 ：没有短划线<br>GNU参数 ：以双短划线为前缀(–)</p>
<p>Unix参数部分举例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">ps <span class="_">-a</span> <span class="comment">#显示除去会话标题和无终端进程外的所有进程</span></div><div class="line">ps -A <span class="comment">#显示所有进程</span></div><div class="line">---------------------------------------------------------------</div><div class="line">PID TTY TIME CMD</div><div class="line">1 ? 00:00:02 init</div><div class="line">2 ? 00:00:00 kthreadd</div><div class="line">3 ? 00:00:00 ksoftirqd/0</div><div class="line">```bash</div><div class="line"></div><div class="line">其中PID是指进程ID，TTY表示运行的终端，TIME表示使用的CPU时间 </div><div class="line"></div><div class="line">```bash</div><div class="line">ps <span class="_">-e</span> <span class="comment">#显示所有进程</span></div><div class="line">ps <span class="_">-l</span> <span class="comment">#显示长列表</span></div><div class="line">ps -V <span class="comment">#显示ps的版本</span></div><div class="line">----------------------------------------------------------------</div><div class="line">anderson@anderson ~ $ ps -V</div><div class="line">procps-ng version 3.3.9</div><div class="line">```bash</div><div class="line"></div><div class="line"><span class="comment">#### 010、实时监控进程 （top）</span></div><div class="line"></div><div class="line">```bash</div><div class="line">top - 17:29:20 up 14 min, 2 users, load average: 0.06, 0.15, 0.22</div><div class="line">Tasks: 257 total, 3 running, 254 sleeping, 0 stopped, 0 zombie</div><div class="line">%Cpu(s): 13.0 us, 1.7 sy, 0.0 ni, 85.3 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st</div><div class="line">KiB Mem: 1010440 total, 948448 used, 61992 free, 80900 buffers</div><div class="line">KiB Swap: 1046524 total, 0 used, 1046524 free. 375568 cached Mem</div><div class="line"></div><div class="line">PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND </div><div class="line">1422 root 20 0 255648 58120 15076 R 3.0 5.8 0:09.22 Xorg </div><div class="line">2749 anderson 20 0 628868 23444 14392 S 1.0 2.3 0:02.67 gnome-termi+ </div><div class="line">2468 anderson 20 0 237640 17756 14304 S 0.3 1.8 0:02.41 vmtoolsd </div><div class="line">1 root 20 0 33772 3132 1496 S 0.0 0.3 0:02.48 init </div><div class="line">2 root 20 0 0 0 0 S 0.0 0.0 0:00.01 kthreadd </div><div class="line">3 root 20 0 0 0 0 S 0.0 0.0 0:00.33 ksoftirqd/0 </div><div class="line">4 root 20 0 0 0 0 S 0.0 0.0 0:00.00 kworker/0:</div><div class="line">```bash</div><div class="line"></div><div class="line">- PID <span class="comment">#进程的ID</span></div><div class="line">- USER <span class="comment">#进程拥有着所属的用户</span></div><div class="line">- PR <span class="comment">#进程优先级</span></div><div class="line">- NI <span class="comment">#进程的nice value</span></div><div class="line">- VIRT <span class="comment">#进程所使用的虚拟内存总量</span></div><div class="line">- RES <span class="comment">#进程当前正在使用的物理内存量</span></div><div class="line">- SHR <span class="comment">#进程与当前进程共享的内存量</span></div><div class="line">- S <span class="comment">#进程状态（D=可中断睡眠，R=运行中，S=睡眠，T=已跟踪或已停止，Z=僵死）</span></div><div class="line">- %CPU <span class="comment">#进程正在使用的CPU时间份额</span></div><div class="line">- %MEM <span class="comment">#进程正使用的可用物理内存份额</span></div><div class="line">- TIME+ <span class="comment">#进程启动后已使用的总CPU时间</span></div><div class="line">- COMMAND <span class="comment">#进程的命令行名称</span></div><div class="line"></div><div class="line"><span class="comment">#### 011、停止进程（kill，killall）</span></div><div class="line"></div><div class="line">```bash</div><div class="line"><span class="built_in">kill</span> 3300 <span class="comment">#将PID为3300的进程杀死</span></div><div class="line">killall <span class="comment">#杀死所有进程</span></div></pre></td></tr></table></figure>
<h4 id="012、挂载介质（mount）"><a href="/2015/10/06/菜鸟学Linux之基本命令/#012、挂载介质（mount）" class="headerlink" title="012、挂载介质（mount）"></a>012、挂载介质（mount）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mount <span class="comment">#显示系统当前的挂载介质的设备列表</span></div><div class="line">mount <span class="_">-a</span> <span class="comment">#挂载etc/fstab文件中指定的所有文件系统</span></div><div class="line">mount <span class="_">-f</span> <span class="comment">#是mount命令模拟挂载某个设备，实际上不挂载</span></div><div class="line">mount -F <span class="comment">#和-a参数连用时，同时挂载所有文件系统</span></div><div class="line">mount -v <span class="comment">#详细模式</span></div><div class="line">mount <span class="_">-l</span> <span class="comment">#自动为ext2、ext3或者 XFS文件系统添加文件系统标签</span></div></pre></td></tr></table></figure>
<h4 id="013、移出设备（unmount）"><a href="/2015/10/06/菜鸟学Linux之基本命令/#013、移出设备（unmount）" class="headerlink" title="013、移出设备（unmount）"></a>013、移出设备（unmount）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">unmount [ddirectory|device] 移出指定的介质</div><div class="line">```bash</div><div class="line"></div><div class="line"><span class="comment">#### 014、查看文件系统（df、du）</span></div><div class="line"></div><div class="line">```bash</div><div class="line">df <span class="comment">#查看所有已挂载磁盘的使用情况。</span></div><div class="line">du <span class="comment">#显示特定目录的磁盘的使用情况。</span></div></pre></td></tr></table></figure>
<h4 id="015、数据排序（sort）"><a href="/2015/10/06/菜鸟学Linux之基本命令/#015、数据排序（sort）" class="headerlink" title="015、数据排序（sort）"></a>015、数据排序（sort）</h4><h4 id="016、搜索数据（grep）"><a href="/2015/10/06/菜鸟学Linux之基本命令/#016、搜索数据（grep）" class="headerlink" title="016、搜索数据（grep）"></a>016、搜索数据（grep）</h4><h4 id="017、压缩数据（bzip2）"><a href="/2015/10/06/菜鸟学Linux之基本命令/#017、压缩数据（bzip2）" class="headerlink" title="017、压缩数据（bzip2）"></a>017、压缩数据（bzip2）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bzip2 <span class="comment">#用于压缩文件</span></div><div class="line">bzcat <span class="comment">#用于显示已压缩的文本文件的内容</span></div><div class="line">bunzip2 <span class="comment">#用于解压.bzip2文件</span></div><div class="line">bzip2recover <span class="comment">#用于尝试恢复受损的压缩文件</span></div></pre></td></tr></table></figure>
<h4 id="018、压缩数据（gzip）"><a href="/2015/10/06/菜鸟学Linux之基本命令/#018、压缩数据（gzip）" class="headerlink" title="018、压缩数据（gzip）"></a>018、压缩数据（gzip）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gzip <span class="comment">#压缩文件</span></div><div class="line">gzcat <span class="comment">#用于显示压缩后的文本文件的内容</span></div><div class="line">gunzip <span class="comment">#用于解压文件</span></div></pre></td></tr></table></figure>
<h4 id="019、压缩数据（zip）"><a href="/2015/10/06/菜鸟学Linux之基本命令/#019、压缩数据（zip）" class="headerlink" title="019、压缩数据（zip）"></a>019、压缩数据（zip）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">zip <span class="comment">#用于创建包含列出文件和目录的压缩文件</span></div><div class="line">zipcloak <span class="comment">#用于创建包含列出文件和目录的加密压缩文件</span></div><div class="line">zipnote <span class="comment">#用于提取zip文件中的注释</span></div><div class="line">zipsplit <span class="comment">#用于将zip文件分割成指定特定大小的的多个小文件</span></div><div class="line">unzip <span class="comment">#用于提取压缩zip文件中的文件和目录</span></div></pre></td></tr></table></figure>
<h4 id="020、归档数据（tar）"><a href="/2015/10/06/菜鸟学Linux之基本命令/#020、归档数据（tar）" class="headerlink" title="020、归档数据（tar）"></a>020、归档数据（tar）</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[菜鸟学Linux之基本概念]]></title>
      <url>/2015/09/27/%E8%8F%9C%E9%B8%9F%E5%AD%A6Linux%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h6 id="更新至2015-09-27"><a href="/2015/09/27/菜鸟学Linux之基本概念/#更新至2015-09-27" class="headerlink" title="(更新至2015-09-27)"></a>(更新至2015-09-27)</h6><h4 id="Linux内核（Kernel）"><a href="/2015/09/27/菜鸟学Linux之基本概念/#Linux内核（Kernel）" class="headerlink" title="Linux内核（Kernel）"></a>Linux内核（Kernel）</h4><p>Linux系统的核心称为内核，内核控制计算机上的所有硬件和软件，在必要的时候分配硬件，使用软件。</p>
<h4 id="交换空间（Swap-space）"><a href="/2015/09/27/菜鸟学Linux之基本概念/#交换空间（Swap-space）" class="headerlink" title="交换空间（Swap space）"></a>交换空间（Swap space）</h4><p>Linux的内存管理需要使用硬盘空间，这个空间称为交换空间。内核不断地在交换空间和实际物理空间上交换虚拟内存位置上的内容。这样系统认为可用的内存比实际存在的多得多。</p>
<h4 id="分页（Page）"><a href="/2015/09/27/菜鸟学Linux之基本概念/#分页（Page）" class="headerlink" title="分页（Page）"></a>分页（Page）</h4><p>将内存部分分组为多个数据块，这个过程称之为分页。内核将没有访问的内存分页复制到交换空间的操作称为移出。</p>
<h4 id="初始进程（Init-Process）"><a href="/2015/09/27/菜鸟学Linux之基本概念/#初始进程（Init-Process）" class="headerlink" title="初始进程（Init Process）"></a>初始进程（Init Process）</h4><p>Linux创建的第一个进程。这个初始进程可以创建其他系统进程。Linux将初始进程加载到虚拟内存中。Linux每创建一个进程就为其分配一个唯一的空间，用于储存该进程的数据和代码。</p>
<h4 id="设备文件"><a href="/2015/09/27/菜鸟学Linux之基本概念/#设备文件" class="headerlink" title="设备文件"></a>设备文件</h4><p>Linux将硬件设备标识为特殊文件，称为设备文件。设备文件的分类：<br>字符、块、网络。</p>
<ul>
<li>字符设备用于那些一次仅处理一个字符的设备。大部分的调制解调器和终端类型都识别为字符文件。</li>
<li>块设备用于那些一次可处理大量数据块的设备，如设备管理器。</li>
<li>网络文件类型用于使用数据包发送和接收数据的设备，如网卡等。</li>
</ul>
<h4 id="虚拟文件系统（Virtual-File-System-VFS）"><a href="/2015/09/27/菜鸟学Linux之基本概念/#虚拟文件系统（Virtual-File-System-VFS）" class="headerlink" title="虚拟文件系统（Virtual File System VFS）"></a>虚拟文件系统（Virtual File System VFS）</h4><p>Linux 系统内核使用VFS与每个文件系统进行连接。挂载和使用每个文件系统的时候，VFS在内存中缓存相关的信息。</p>
<h4 id="GNU（GNU-is-Not-Unix）"><a href="/2015/09/27/菜鸟学Linux之基本概念/#GNU（GNU-is-Not-Unix）" class="headerlink" title="GNU（GNU is Not Unix）"></a>GNU（GNU is Not Unix）</h4><p>GNU组织开发了一个完整的Unix使用程序集，但是没有任何内核去运行他们，这些实用程序的开发基于集中新的开发思想，称为开源软件（OOS）。Linux和GNU的结合诞生了一个完整的功能强大的免费操作系统。</p>
<h4 id="Shell（GNU-Linux-Shell）"><a href="/2015/09/27/菜鸟学Linux之基本概念/#Shell（GNU-Linux-Shell）" class="headerlink" title="Shell（GNU/Linux Shell）"></a>Shell（GNU/Linux Shell）</h4><p>Shell是一个特殊的交互式实用程序。一个Linux系统中可以有多个shell程序。比如bash shell、ash shell、korn shel、tcsh shell、zsh shell等等。</p>
<h4 id="Linux桌面环境"><a href="/2015/09/27/菜鸟学Linux之基本概念/#Linux桌面环境" class="headerlink" title="Linux桌面环境"></a>Linux桌面环境</h4><p>X Windows系统 KDE桌面 GNOME桌面</p>
<h4 id="发行版"><a href="/2015/09/27/菜鸟学Linux之基本概念/#发行版" class="headerlink" title="发行版"></a>发行版</h4><p>完整的Linux系统包称之为发行版。<br>Slackware 原始的Linux发行版之一，广受Linux发烧友的好评。<br>Red Hat 商用发行版，主要用于Internet服务器。<br>Fedora 从Red Hat分离出来的部分，针对家庭用户<br>Ubuntu 供学校和家庭使用的免费发行版</p>
<h4 id="挂载点（mount-point）"><a href="/2015/09/27/菜鸟学Linux之基本概念/#挂载点（mount-point）" class="headerlink" title="挂载点（mount point）"></a>挂载点（mount point）</h4><p>虚拟目录中用于额外分配存储设备的目录</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[[作品介绍]AutoPowerOff小程序]]></title>
      <url>/2014/12/04/%E4%BD%9C%E5%93%81%E4%BB%8B%E7%BB%8D-AutoPowerOff%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>AutoPowerOff是基于C# WPF开发的一款自动定时关机的小程序。具有良好的UI体验与操作体验，能够为小白们提供自动定时关机的计划任务。</p>
<a id="more"></a>
<h4 id="作品截图："><a href="/2014/12/04/作品介绍-AutoPowerOff小程序/#作品截图：" class="headerlink" title="作品截图："></a>作品截图：</h4><p><img src="http://i1.piimg.com/577934/34a1ff0cb308522bs.png" alt="AutoPowerOff v1.0"></p>
<p><img src="http://i1.piimg.com/577934/b49bb5ce1895dd39.png" alt="AutoPowerOff v1.0"></p>
<h4 id="作品功能："><a href="/2014/12/04/作品介绍-AutoPowerOff小程序/#作品功能：" class="headerlink" title="作品功能："></a>作品功能：</h4><ul>
<li>可自由设置定时关机时间</li>
<li>动态显示倒计时</li>
</ul>
<h4 id="下载链接："><a href="/2014/12/04/作品介绍-AutoPowerOff小程序/#下载链接：" class="headerlink" title="下载链接："></a>下载链接：</h4><ul>
<li><a href="https://github.com/Forward2015/AutoPowserOff/blob/master/AutoPowerOff%20Pro.exe?raw=true" target="_blank" rel="external">v1.0下载</a></li>
</ul>
<h4 id="开发时间："><a href="/2014/12/04/作品介绍-AutoPowerOff小程序/#开发时间：" class="headerlink" title="开发时间："></a>开发时间：</h4><ul>
<li>2014-12</li>
</ul>
<h4 id="维护状态："><a href="/2014/12/04/作品介绍-AutoPowerOff小程序/#维护状态：" class="headerlink" title="维护状态："></a>维护状态：</h4><ul>
<li>停止维护</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
